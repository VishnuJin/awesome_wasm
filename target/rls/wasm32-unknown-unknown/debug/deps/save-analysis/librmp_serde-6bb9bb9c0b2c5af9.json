{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4","program":"/home/suru/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","rmp_serde","--edition=2018","/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=6bb9bb9c0b2c5af9","-C","extra-filename=-6bb9bb9c0b2c5af9","--out-dir","/home/suru/Documents/awesome_wasm/target/rls/wasm32-unknown-unknown/debug/deps","--target","wasm32-unknown-unknown","-L","dependency=/home/suru/Documents/awesome_wasm/target/rls/wasm32-unknown-unknown/debug/deps","-L","dependency=/home/suru/Documents/awesome_wasm/target/rls/debug/deps","--extern","byteorder=/home/suru/Documents/awesome_wasm/target/rls/wasm32-unknown-unknown/debug/deps/libbyteorder-5d8a1f0016c3d4ca.rmeta","--extern","rmp=/home/suru/Documents/awesome_wasm/target/rls/wasm32-unknown-unknown/debug/deps/librmp-d34536c7a3b845e5.rmeta","--extern","serde=/home/suru/Documents/awesome_wasm/target/rls/wasm32-unknown-unknown/debug/deps/libserde-91ef6f7830e57d65.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/suru/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/suru/Documents/awesome_wasm/target/rls/wasm32-unknown-unknown/debug/deps/librmp_serde-6bb9bb9c0b2c5af9.rmeta"},"prelude":{"crate_id":{"name":"rmp_serde","disambiguator":[1936978173384364288,14111477812242930889]},"crate_root":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src","external_crates":[{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[17568117084726535670,18291600942983091792]}},{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[11708719394972853161,10740351817569260753]}},{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[11739846921667929886,4899200388694349132]}},{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[10483847702699074036,9448700856939319914]}},{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[13547053222791032196,5616744556569750145]}},{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[1671359507371111213,8555349780106746800]}},{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[10553035774617414455,11464508503641710306]}},{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12030632638709788125,179720963704046562]}},{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17497149768326916465,12808847267177544861]}},{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[16272633320396836489,9042107923364971302]}},{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[8020748326108297999,16907006358149453028]}},{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","num":12,"id":{"name":"dlmalloc","disambiguator":[14908421788973856670,17807852881498547973]}},{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","num":13,"id":{"name":"serde","disambiguator":[10362752534225817208,14453123574184786104]}},{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","num":14,"id":{"name":"serde_derive","disambiguator":[6037834130130488611,17842463658795390511]}},{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","num":15,"id":{"name":"rmp","disambiguator":[10113385517999052348,17306090833965413064]}},{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","num":16,"id":{"name":"byteorder","disambiguator":[15849737753360944621,14209032557546942040]}},{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","num":17,"id":{"name":"num_traits","disambiguator":[10136725111933920827,11215299027748122273]}}],"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":0,"byte_end":9322,"line_start":1,"line_end":355,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":811},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1969,"byte_end":1981,"line_start":71,"line_end":71,"column_start":25,"column_end":37},"alias_span":null,"name":"Deserializer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":353},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1983,"byte_end":1992,"line_start":71,"line_end":71,"column_start":39,"column_end":48},"alias_span":null,"name":"from_read","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":359},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1994,"byte_end":2007,"line_start":71,"line_end":71,"column_start":50,"column_end":63},"alias_span":null,"name":"from_read_ref","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":356},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":2009,"byte_end":2019,"line_start":71,"line_end":71,"column_start":65,"column_end":75},"alias_span":null,"name":"from_slice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1060},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":2046,"byte_end":2056,"line_start":72,"line_end":72,"column_start":25,"column_end":35},"alias_span":null,"name":"Serializer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":665},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":2058,"byte_end":2064,"line_start":72,"line_end":72,"column_start":37,"column_end":43},"alias_span":null,"name":"to_vec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":667},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":2066,"byte_end":2078,"line_start":72,"line_end":72,"column_start":45,"column_end":57},"alias_span":null,"name":"to_vec_named","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":0,"byte_end":9322,"line_start":1,"line_end":355,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":1138},{"krate":0,"index":14},{"krate":0,"index":1140},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":125},{"krate":0,"index":363},{"krate":0,"index":669},{"krate":0,"index":1099},{"krate":0,"index":1107},{"krate":0,"index":1105},{"krate":0,"index":1101},{"krate":0,"index":1102},{"krate":0,"index":670},{"krate":0,"index":680},{"krate":0,"index":683},{"krate":0,"index":685},{"krate":0,"index":697},{"krate":0,"index":1109},{"krate":0,"index":1123},{"krate":0,"index":1121},{"krate":0,"index":1118},{"krate":0,"index":1112},{"krate":0,"index":1114},{"krate":0,"index":701},{"krate":0,"index":710},{"krate":0,"index":714},{"krate":0,"index":716},{"krate":0,"index":724}],"decl_id":null,"docs":" This crate connects Rust MessagePack library with [`serde`][serde] providing an ability to\n easily serialize and deserialize both Rust built-in types, the standard library and custom data\n structures.","sig":null,"attributes":[{"value":"/ This crate connects Rust MessagePack library with [`serde`][serde] providing an ability to","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":0,"byte_end":94,"line_start":1,"line_end":1,"column_start":1,"column_end":95}},{"value":"/ easily serialize and deserialize both Rust built-in types, the standard library and custom data","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":95,"byte_end":194,"line_start":2,"line_end":2,"column_start":1,"column_end":100}},{"value":"/ structures.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":195,"byte_end":210,"line_start":3,"line_end":3,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":211,"byte_end":214,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ ## Motivating example","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":215,"byte_end":240,"line_start":5,"line_end":5,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":241,"byte_end":244,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":245,"byte_end":252,"line_start":7,"line_end":7,"column_start":1,"column_end":8}},{"value":"/ let buf = rmp_serde::to_vec(&(42, \"the Answer\")).unwrap();","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":253,"byte_end":315,"line_start":8,"line_end":8,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":316,"byte_end":319,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":320,"byte_end":335,"line_start":10,"line_end":10,"column_start":1,"column_end":16}},{"value":"/     vec![0x92, 0x2a, 0xaa, 0x74, 0x68, 0x65, 0x20, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72],","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":336,"byte_end":427,"line_start":11,"line_end":11,"column_start":1,"column_end":92}},{"value":"/     buf","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":428,"byte_end":439,"line_start":12,"line_end":12,"column_start":1,"column_end":12}},{"value":"/ );","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":440,"byte_end":446,"line_start":13,"line_end":13,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":447,"byte_end":450,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ assert_eq!((42, \"the Answer\"), rmp_serde::from_read_ref(&buf).unwrap());","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":451,"byte_end":527,"line_start":15,"line_end":15,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":528,"byte_end":535,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":536,"byte_end":539,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Type-based Serialization and Deserialization","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":540,"byte_end":590,"line_start":18,"line_end":18,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":591,"byte_end":594,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Serde provides a mechanism for low boilerplate serialization & deserialization of values to and","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":595,"byte_end":694,"line_start":20,"line_end":20,"column_start":1,"column_end":100}},{"value":"/ from MessagePack via the serialization API.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":695,"byte_end":742,"line_start":21,"line_end":21,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":743,"byte_end":746,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ To be able to serialize a piece of data, it must implement the `serde::Serialize` trait. To be","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":747,"byte_end":845,"line_start":23,"line_end":23,"column_start":1,"column_end":99}},{"value":"/ able to deserialize a piece of data, it must implement the `serde::Deserialize` trait. Serde","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":846,"byte_end":942,"line_start":24,"line_end":24,"column_start":1,"column_end":97}},{"value":"/ provides an annotation to automatically generate the code for these","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":943,"byte_end":1014,"line_start":25,"line_end":25,"column_start":1,"column_end":72}},{"value":"/ traits: `#[derive(Serialize, Deserialize)]`.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1015,"byte_end":1063,"line_start":26,"line_end":26,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1064,"byte_end":1067,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1068,"byte_end":1082,"line_start":28,"line_end":28,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1083,"byte_end":1086,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1087,"byte_end":1094,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/ extern crate serde;","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1095,"byte_end":1118,"line_start":31,"line_end":31,"column_start":1,"column_end":24}},{"value":"/ #[macro_use]","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1119,"byte_end":1135,"line_start":32,"line_end":32,"column_start":1,"column_end":17}},{"value":"/ extern crate serde_derive;","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1136,"byte_end":1166,"line_start":33,"line_end":33,"column_start":1,"column_end":31}},{"value":"/ extern crate rmp_serde as rmps;","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1167,"byte_end":1202,"line_start":34,"line_end":34,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1203,"byte_end":1206,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1207,"byte_end":1241,"line_start":36,"line_end":36,"column_start":1,"column_end":35}},{"value":"/ use serde::{Deserialize, Serialize};","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1242,"byte_end":1282,"line_start":37,"line_end":37,"column_start":1,"column_end":41}},{"value":"/ use rmps::{Deserializer, Serializer};","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1283,"byte_end":1324,"line_start":38,"line_end":38,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1325,"byte_end":1328,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ #[derive(Debug, PartialEq, Deserialize, Serialize)]","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1329,"byte_end":1384,"line_start":40,"line_end":40,"column_start":1,"column_end":56}},{"value":"/ struct Human {","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1385,"byte_end":1403,"line_start":41,"line_end":41,"column_start":1,"column_end":19}},{"value":"/     age: u32,","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1404,"byte_end":1421,"line_start":42,"line_end":42,"column_start":1,"column_end":18}},{"value":"/     name: String,","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1422,"byte_end":1443,"line_start":43,"line_end":43,"column_start":1,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1444,"byte_end":1449,"line_start":44,"line_end":44,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1450,"byte_end":1453,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1454,"byte_end":1469,"line_start":46,"line_end":46,"column_start":1,"column_end":16}},{"value":"/     let mut buf = Vec::new();","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1470,"byte_end":1503,"line_start":47,"line_end":47,"column_start":1,"column_end":34}},{"value":"/     let val = Human {","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1504,"byte_end":1529,"line_start":48,"line_end":48,"column_start":1,"column_end":26}},{"value":"/         age: 42,","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1530,"byte_end":1550,"line_start":49,"line_end":49,"column_start":1,"column_end":21}},{"value":"/         name: \"John\".into(),","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1551,"byte_end":1583,"line_start":50,"line_end":50,"column_start":1,"column_end":33}},{"value":"/     };","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1584,"byte_end":1594,"line_start":51,"line_end":51,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1595,"byte_end":1598,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/     val.serialize(&mut Serializer::new(&mut buf)).unwrap();","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1599,"byte_end":1662,"line_start":53,"line_end":53,"column_start":1,"column_end":64}},{"value":"/ }","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1663,"byte_end":1668,"line_start":54,"line_end":54,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1669,"byte_end":1676,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1677,"byte_end":1680,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ [serde]: https://serde.rs/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1681,"byte_end":1711,"line_start":57,"line_end":57,"column_start":1,"column_end":31}},{"value":"warn(missing_debug_implementations, missing_docs)","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":1713,"byte_end":1766,"line_start":59,"line_end":59,"column_start":1,"column_end":54}}]},{"kind":"Mod","id":{"krate":0,"index":25},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"config","qualname":"::config","value":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":1160},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":728},{"krate":0,"index":734},{"krate":0,"index":732},{"krate":0,"index":730},{"krate":0,"index":54},{"krate":0,"index":735},{"krate":0,"index":745},{"krate":0,"index":742},{"krate":0,"index":739},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":747},{"krate":0,"index":757},{"krate":0,"index":754},{"krate":0,"index":751},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":759},{"krate":0,"index":769},{"krate":0,"index":766},{"krate":0,"index":763},{"krate":0,"index":95},{"krate":0,"index":98},{"krate":0,"index":771},{"krate":0,"index":781},{"krate":0,"index":778},{"krate":0,"index":775},{"krate":0,"index":110},{"krate":0,"index":113}],"decl_id":null,"docs":" Change MessagePack behavior with configuration wrappers.\n","sig":null,"attributes":[{"value":"/ Change MessagePack behavior with configuration wrappers.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":9324,"byte_end":9384,"line_start":1,"line_end":1,"column_start":1,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":33},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":9730,"byte_end":9746,"line_start":11,"line_end":11,"column_start":11,"column_end":27},"name":"SerializerConfig","qualname":"::config::SerializerConfig","value":"SerializerConfig: sealed::SerializerConfig","parent":null,"children":[],"decl_id":null,"docs":" Represents configuration that dicatates what the serializer does.","sig":null,"attributes":[{"value":"/ Represents configuration that dicatates what the serializer does.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":9485,"byte_end":9554,"line_start":7,"line_end":7,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":9555,"byte_end":9558,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Implemented as an empty trait depending on a hidden trait in order to allow changing the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":9559,"byte_end":9651,"line_start":9,"line_end":9,"column_start":1,"column_end":93}},{"value":"/ methods of this trait without breaking backwards compatibility.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":9652,"byte_end":9719,"line_start":10,"line_end":10,"column_start":1,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":43},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":10219,"byte_end":10235,"line_start":24,"line_end":24,"column_start":15,"column_end":31},"name":"SerializerConfig","qualname":"::config::sealed::SerializerConfig","value":"SerializerConfig","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":51}],"decl_id":null,"docs":" This is the inner trait - the real SerializerConfig.","sig":null,"attributes":[{"value":"/ This is the inner trait - the real SerializerConfig.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":9946,"byte_end":10002,"line_start":20,"line_end":20,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":10007,"byte_end":10010,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ This hack disallows external implementations and usage of SerializerConfig and thus","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":10015,"byte_end":10102,"line_start":22,"line_end":22,"column_start":5,"column_end":92}},{"value":"/ allows us to change SerializerConfig methods freely without breaking backwards compatibility.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":10107,"byte_end":10204,"line_start":23,"line_end":23,"column_start":5,"column_end":102}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":10249,"byte_end":10265,"line_start":25,"line_end":25,"column_start":12,"column_end":28},"name":"write_struct_len","qualname":"::config::sealed::SerializerConfig::write_struct_len","value":"pub fn write_struct_len<S>(&mut S, usize) -> Result<(), Error> where\nS: UnderlyingWrite, for<'a> &'a mut S: Serializer<Ok = (), Error = ()>","parent":{"krate":0,"index":43},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":10440,"byte_end":10458,"line_start":30,"line_end":30,"column_start":12,"column_end":30},"name":"write_struct_field","qualname":"::config::sealed::SerializerConfig::write_struct_field","value":"pub fn write_struct_field<S, T: ?Sized>(&mut S, &'static str, &T)\n-> Result<(), Error> where S: UnderlyingWrite,\nfor<'a> &'a mut S: Serializer<Ok = (), Error = ()>, T: Serialize","parent":{"krate":0,"index":43},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":10851,"byte_end":10870,"line_start":39,"line_end":39,"column_start":12,"column_end":31},"name":"write_variant_ident","qualname":"::config::sealed::SerializerConfig::write_variant_ident","value":"pub fn write_variant_ident<S>(&mut S, u32, &'static str) -> Result<(), Error>\nwhere S: UnderlyingWrite, for<'a> &'a mut S: Serializer<Ok = (), Error = ()>","parent":{"krate":0,"index":43},"children":[],"decl_id":null,"docs":" Encodes an enum variant ident (id or name) according to underlying writer.","sig":null,"attributes":[{"value":"/ Encodes an enum variant ident (id or name) according to underlying writer.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":10686,"byte_end":10764,"line_start":36,"line_end":36,"column_start":9,"column_end":87}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":10773,"byte_end":10776,"line_start":37,"line_end":37,"column_start":9,"column_end":12}},{"value":"/ Used in `Serializer::serialize_*_variant` methods.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":10785,"byte_end":10839,"line_start":38,"line_end":38,"column_start":9,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":728},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":11340,"byte_end":11353,"line_start":55,"line_end":55,"column_start":12,"column_end":25},"name":"DefaultConfig","qualname":"::config::DefaultConfig","value":"","parent":null,"children":[],"decl_id":null,"docs":" The default serializer configuration.","sig":null,"attributes":[{"value":"/ The default serializer configuration.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":11120,"byte_end":11161,"line_start":50,"line_end":50,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":11162,"byte_end":11165,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ This writes structs as a tuple, without field names, and enum variants as integers.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":11166,"byte_end":11253,"line_start":52,"line_end":52,"column_start":1,"column_end":88}},{"value":"/ This is the most compact representation.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":11254,"byte_end":11298,"line_start":53,"line_end":53,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":735},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":12685,"byte_end":12700,"line_start":98,"line_end":98,"column_start":12,"column_end":27},"name":"StructMapConfig","qualname":"::config::StructMapConfig","value":"","parent":null,"children":[],"decl_id":null,"docs":" Config wrapper, that overrides struct serialization by packing as a map with field names.","sig":null,"attributes":[{"value":"/ Config wrapper, that overrides struct serialization by packing as a map with field names.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":12237,"byte_end":12330,"line_start":90,"line_end":90,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":12331,"byte_end":12334,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ MessagePack specification does not tell how to serialize structs. This trait allows you to","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":12335,"byte_end":12429,"line_start":92,"line_end":92,"column_start":1,"column_end":95}},{"value":"/ extend serialization to match your app's requirements.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":12430,"byte_end":12488,"line_start":93,"line_end":93,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":12489,"byte_end":12492,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ Default `Serializer` implementation writes structs as a tuple, i.e. only its length is encoded,","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":12493,"byte_end":12592,"line_start":95,"line_end":95,"column_start":1,"column_end":100}},{"value":"/ because it is the most compact representation.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":12593,"byte_end":12643,"line_start":96,"line_end":96,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":12858,"byte_end":12861,"line_start":102,"line_end":102,"column_start":12,"column_end":15},"name":"new","qualname":"<StructMapConfig<C>>::new","value":"pub fn new(C) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `StructMapConfig` inheriting unchanged configuration options from the given configuration.\n","sig":null,"attributes":[{"value":"/ Creates a `StructMapConfig` inheriting unchanged configuration options from the given configuration.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":12742,"byte_end":12846,"line_start":101,"line_end":101,"column_start":5,"column_end":109}}]},{"kind":"Struct","id":{"krate":0,"index":747},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":14054,"byte_end":14071,"line_start":147,"line_end":147,"column_start":12,"column_end":29},"name":"StructTupleConfig","qualname":"::config::StructTupleConfig","value":"","parent":null,"children":[],"decl_id":null,"docs":" Config wrapper that overrides struct serlization by packing as a tuple without field\n names.\n","sig":null,"attributes":[{"value":"/ Config wrapper that overrides struct serlization by packing as a tuple without field","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":13913,"byte_end":14001,"line_start":144,"line_end":144,"column_start":1,"column_end":89}},{"value":"/ names.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":14002,"byte_end":14012,"line_start":145,"line_end":145,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":14233,"byte_end":14236,"line_start":151,"line_end":151,"column_start":12,"column_end":15},"name":"new","qualname":"<StructTupleConfig<C>>::new","value":"pub fn new(C) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `StructTupleConfig` inheriting unchanged configuration options from the given configuration.\n","sig":null,"attributes":[{"value":"/ Creates a `StructTupleConfig` inheriting unchanged configuration options from the given configuration.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":14115,"byte_end":14221,"line_start":150,"line_end":150,"column_start":5,"column_end":111}}]},{"kind":"Struct","id":{"krate":0,"index":759},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":15545,"byte_end":15564,"line_start":197,"line_end":197,"column_start":12,"column_end":31},"name":"VariantStringConfig","qualname":"::config::VariantStringConfig","value":"","parent":null,"children":[],"decl_id":null,"docs":" Config wrapper, that overrides enum serialization by serializing enum variant names as strings.","sig":null,"attributes":[{"value":"/ Config wrapper, that overrides enum serialization by serializing enum variant names as strings.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":15247,"byte_end":15346,"line_start":192,"line_end":192,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":15347,"byte_end":15350,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ Default `Serializer` implementation writes enum names as integers, i.e. only indices are encoded,","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":15351,"byte_end":15452,"line_start":194,"line_end":194,"column_start":1,"column_end":102}},{"value":"/ because it is the most compact representation.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":15453,"byte_end":15503,"line_start":195,"line_end":195,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":15730,"byte_end":15733,"line_start":201,"line_end":201,"column_start":12,"column_end":15},"name":"new","qualname":"<VariantStringConfig<C>>::new","value":"pub fn new(C) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `VariantStringConfig` inheriting unchanged configuration options from the given configuration.\n","sig":null,"attributes":[{"value":"/ Creates a `VariantStringConfig` inheriting unchanged configuration options from the given configuration.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":15610,"byte_end":15718,"line_start":200,"line_end":200,"column_start":5,"column_end":113}}]},{"kind":"Struct","id":{"krate":0,"index":771},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":16852,"byte_end":16872,"line_start":242,"line_end":242,"column_start":12,"column_end":32},"name":"VariantIntegerConfig","qualname":"::config::VariantIntegerConfig","value":"","parent":null,"children":[],"decl_id":null,"docs":" Config wrapper that overrides enum variant serialization by packing enum names as their integer indices.\n","sig":null,"attributes":[{"value":"/ Config wrapper that overrides enum variant serialization by packing enum names as their integer indices.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":16702,"byte_end":16810,"line_start":240,"line_end":240,"column_start":1,"column_end":109}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":17040,"byte_end":17043,"line_start":246,"line_end":246,"column_start":12,"column_end":15},"name":"new","qualname":"<VariantIntegerConfig<C>>::new","value":"pub fn new(C) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `VariantIntegerConfig` inheriting unchanged configuration options from the given configuration.\n","sig":null,"attributes":[{"value":"/ Creates a `VariantIntegerConfig` inheriting unchanged configuration options from the given configuration.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":16919,"byte_end":17028,"line_start":245,"line_end":245,"column_start":5,"column_end":114}}]},{"kind":"Mod","id":{"krate":0,"index":125},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"decode","qualname":"::decode","value":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","parent":null,"children":[{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":1218},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":783},{"krate":0,"index":809},{"krate":0,"index":158},{"krate":0,"index":161},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":811},{"krate":0,"index":816},{"krate":0,"index":177},{"krate":0,"index":184},{"krate":0,"index":187},{"krate":0,"index":192},{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":819},{"krate":0,"index":826},{"krate":0,"index":828},{"krate":0,"index":834},{"krate":0,"index":214},{"krate":0,"index":219},{"krate":0,"index":226},{"krate":0,"index":233},{"krate":0,"index":240},{"krate":0,"index":259},{"krate":0,"index":264},{"krate":0,"index":268},{"krate":0,"index":276},{"krate":0,"index":281},{"krate":0,"index":285},{"krate":0,"index":295},{"krate":0,"index":299},{"krate":0,"index":303},{"krate":0,"index":311},{"krate":0,"index":994},{"krate":0,"index":1023},{"krate":0,"index":1019},{"krate":0,"index":1014},{"krate":0,"index":1004},{"krate":0,"index":1008},{"krate":0,"index":323},{"krate":0,"index":1028},{"krate":0,"index":1032},{"krate":0,"index":327},{"krate":0,"index":330},{"krate":0,"index":335},{"krate":0,"index":1035},{"krate":0,"index":1040},{"krate":0,"index":339},{"krate":0,"index":343},{"krate":0,"index":348},{"krate":0,"index":353},{"krate":0,"index":356},{"krate":0,"index":359}],"decl_id":null,"docs":" Generic MessagePack deserialization.\n","sig":null,"attributes":[{"value":"/ Generic MessagePack deserialization.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":18020,"byte_end":18060,"line_start":1,"line_end":1,"column_start":1,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":784},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":18696,"byte_end":18713,"line_start":24,"line_end":24,"column_start":5,"column_end":22},"name":"InvalidMarkerRead","qualname":"::decode::Error::InvalidMarkerRead","value":"Error::InvalidMarkerRead(io::Error)","parent":{"krate":0,"index":783},"children":[],"decl_id":null,"docs":" The enclosed I/O error occurred while trying to read a MessagePack\n marker.\n","sig":null,"attributes":[{"value":"/ The enclosed I/O error occurred while trying to read a MessagePack","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":18605,"byte_end":18675,"line_start":22,"line_end":22,"column_start":5,"column_end":75}},{"value":"/ marker.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":18680,"byte_end":18691,"line_start":23,"line_end":23,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":787},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":18829,"byte_end":18844,"line_start":27,"line_end":27,"column_start":5,"column_end":20},"name":"InvalidDataRead","qualname":"::decode::Error::InvalidDataRead","value":"Error::InvalidDataRead(io::Error)","parent":{"krate":0,"index":783},"children":[],"decl_id":null,"docs":" The enclosed I/O error occurred while trying to read the encoded\n MessagePack data.\n","sig":null,"attributes":[{"value":"/ The enclosed I/O error occurred while trying to read the encoded","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":18730,"byte_end":18798,"line_start":25,"line_end":25,"column_start":5,"column_end":73}},{"value":"/ MessagePack data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":18803,"byte_end":18824,"line_start":26,"line_end":26,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":790},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":18935,"byte_end":18947,"line_start":29,"line_end":29,"column_start":5,"column_end":17},"name":"TypeMismatch","qualname":"::decode::Error::TypeMismatch","value":"Error::TypeMismatch(Marker)","parent":{"krate":0,"index":783},"children":[],"decl_id":null,"docs":" A mismatch occurred between the decoded and expected value types.\n","sig":null,"attributes":[{"value":"/ A mismatch occurred between the decoded and expected value types.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":18861,"byte_end":18930,"line_start":28,"line_end":28,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":793},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":19021,"byte_end":19031,"line_start":31,"line_end":31,"column_start":5,"column_end":15},"name":"OutOfRange","qualname":"::decode::Error::OutOfRange","value":"Error::OutOfRange","parent":{"krate":0,"index":783},"children":[],"decl_id":null,"docs":" A numeric cast failed due to an out-of-range error.\n","sig":null,"attributes":[{"value":"/ A numeric cast failed due to an out-of-range error.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":18961,"byte_end":19016,"line_start":30,"line_end":30,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":795},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":19104,"byte_end":19118,"line_start":33,"line_end":33,"column_start":5,"column_end":19},"name":"LengthMismatch","qualname":"::decode::Error::LengthMismatch","value":"Error::LengthMismatch(u32)","parent":{"krate":0,"index":783},"children":[],"decl_id":null,"docs":" A decoded array did not have the enclosed expected length.\n","sig":null,"attributes":[{"value":"/ A decoded array did not have the enclosed expected length.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":19037,"byte_end":19099,"line_start":32,"line_end":32,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":798},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":19227,"byte_end":19240,"line_start":36,"line_end":36,"column_start":5,"column_end":18},"name":"Uncategorized","qualname":"::decode::Error::Uncategorized","value":"Error::Uncategorized(String)","parent":{"krate":0,"index":783},"children":[],"decl_id":null,"docs":" An otherwise uncategorized error occurred. See the enclosed `String` for\n details.\n","sig":null,"attributes":[{"value":"/ An otherwise uncategorized error occurred. See the enclosed `String` for","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":19129,"byte_end":19205,"line_start":34,"line_end":34,"column_start":5,"column_end":81}},{"value":"/ details.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":19210,"byte_end":19222,"line_start":35,"line_end":35,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":801},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":19373,"byte_end":19379,"line_start":39,"line_end":39,"column_start":5,"column_end":11},"name":"Syntax","qualname":"::decode::Error::Syntax","value":"Error::Syntax(String)","parent":{"krate":0,"index":783},"children":[],"decl_id":null,"docs":" A general error occurred while deserializing the expected type. See the\n enclosed `String` for details.\n","sig":null,"attributes":[{"value":"/ A general error occurred while deserializing the expected type. See the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":19254,"byte_end":19329,"line_start":37,"line_end":37,"column_start":5,"column_end":80}},{"value":"/ enclosed `String` for details.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":19334,"byte_end":19368,"line_start":38,"line_end":38,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":804},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":19449,"byte_end":19458,"line_start":41,"line_end":41,"column_start":5,"column_end":14},"name":"Utf8Error","qualname":"::decode::Error::Utf8Error","value":"Error::Utf8Error(Utf8Error)","parent":{"krate":0,"index":783},"children":[],"decl_id":null,"docs":" An encoded string could not be parsed as UTF-8.\n","sig":null,"attributes":[{"value":"/ An encoded string could not be parsed as UTF-8.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":19393,"byte_end":19444,"line_start":40,"line_end":40,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":807},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":19533,"byte_end":19551,"line_start":43,"line_end":43,"column_start":5,"column_end":23},"name":"DepthLimitExceeded","qualname":"::decode::Error::DepthLimitExceeded","value":"Error::DepthLimitExceeded","parent":{"krate":0,"index":783},"children":[],"decl_id":null,"docs":" The depth limit was exceeded; not currently used.\n","sig":null,"attributes":[{"value":"/ The depth limit was exceeded; not currently used.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":19475,"byte_end":19528,"line_start":42,"line_end":42,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":783},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":18593,"byte_end":18598,"line_start":21,"line_end":21,"column_start":10,"column_end":15},"name":"Error","qualname":"::decode::Error","value":"pub enum Error {\n\n    /// The enclosed I/O error occurred while trying to read a MessagePack\n    /// marker.\n    InvalidMarkerRead(io::Error),\n\n    /// The enclosed I/O error occurred while trying to read the encoded\n    /// MessagePack data.\n    InvalidDataRead(io::Error),\n\n    /// A mismatch occurred between the decoded and expected value types.\n    TypeMismatch(Marker),\n\n    /// A numeric cast failed due to an out-of-range error.\n    OutOfRange,\n\n    /// A decoded array did not have the enclosed expected length.\n    LengthMismatch(u32),\n\n    /// An otherwise uncategorized error occurred. See the enclosed `String` for\n    /// details.\n    Uncategorized(String),\n\n    /// A general error occurred while deserializing the expected type. See the\n    /// enclosed `String` for details.\n    Syntax(String),\n\n    /// An encoded string could not be parsed as UTF-8.\n    Utf8Error(Utf8Error),\n\n    /// The depth limit was exceeded; not currently used.\n    DepthLimitExceeded,\n}","parent":null,"children":[{"krate":0,"index":784},{"krate":0,"index":787},{"krate":0,"index":790},{"krate":0,"index":793},{"krate":0,"index":795},{"krate":0,"index":798},{"krate":0,"index":801},{"krate":0,"index":804},{"krate":0,"index":807}],"decl_id":null,"docs":" Enum representing errors that can occur while decoding MessagePack data.\n","sig":null,"attributes":[{"value":"/ Enum representing errors that can occur while decoding MessagePack data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":18490,"byte_end":18566,"line_start":19,"line_end":19,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":811},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":23332,"byte_end":23344,"line_start":148,"line_end":148,"column_start":12,"column_end":24},"name":"Deserializer","qualname":"::decode::Deserializer","value":"Deserializer {  }","parent":null,"children":[{"krate":0,"index":813},{"krate":0,"index":814},{"krate":0,"index":815}],"decl_id":null,"docs":" A Deserializer that reads bytes from a buffer.","sig":null,"attributes":[{"value":"/ A Deserializer that reads bytes from a buffer.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":23114,"byte_end":23164,"line_start":141,"line_end":141,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":23165,"byte_end":23168,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":23169,"byte_end":23179,"line_start":143,"line_end":143,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":23180,"byte_end":23183,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ All instances of `ErrorKind::Interrupted` are handled by this function and the underlying","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":23184,"byte_end":23277,"line_start":145,"line_end":145,"column_start":1,"column_end":94}},{"value":"/ operation is retried.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":23278,"byte_end":23303,"line_start":146,"line_end":146,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":23542,"byte_end":23551,"line_start":157,"line_end":157,"column_start":12,"column_end":21},"name":"from_read","qualname":"<Deserializer<ReadReader<R>>>::from_read","value":"pub fn from_read(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(note = \"use `Deserializer::new` instead\")","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":23477,"byte_end":23530,"line_start":156,"line_end":156,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":23680,"byte_end":23683,"line_start":162,"line_end":162,"column_start":12,"column_end":15},"name":"new","qualname":"<Deserializer<ReadReader<R>>>::new","value":"pub fn new(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Deserializer` by consuming the given reader.\n","sig":null,"attributes":[{"value":"/ Constructs a new `Deserializer` by consuming the given reader.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":23602,"byte_end":23668,"line_start":161,"line_end":161,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":23970,"byte_end":23977,"line_start":172,"line_end":172,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Deserializer<ReadReader<R>>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the underlying reader in this decoder.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the underlying reader in this decoder.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":23896,"byte_end":23958,"line_start":171,"line_end":171,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":24106,"byte_end":24113,"line_start":177,"line_end":177,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Deserializer<ReadReader<R>>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the underlying reader in this decoder.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the underlying reader in this decoder.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":24024,"byte_end":24094,"line_start":176,"line_end":176,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":24247,"byte_end":24257,"line_start":182,"line_end":182,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Deserializer<ReadReader<R>>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this deserializer returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this deserializer returning the underlying reader.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":24172,"byte_end":24235,"line_start":181,"line_end":181,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":24459,"byte_end":24467,"line_start":189,"line_end":189,"column_start":12,"column_end":20},"name":"position","qualname":"<Deserializer<ReadReader<Cursor<R>>>>::position","value":"pub fn position(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the current position of this deserializer, i.e. how many bytes were read.\n","sig":null,"attributes":[{"value":"/ Returns the current position of this deserializer, i.e. how many bytes were read.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":24362,"byte_end":24447,"line_start":188,"line_end":188,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":24694,"byte_end":24707,"line_start":199,"line_end":199,"column_start":12,"column_end":25},"name":"from_read_ref","qualname":"<Deserializer<ReadRefReader>>::from_read_ref","value":"pub fn from_read_ref(&'de R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Deserializer` from the given byte slice.\n","sig":null,"attributes":[{"value":"/ Constructs a new `Deserializer` from the given byte slice.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":24620,"byte_end":24682,"line_start":198,"line_end":198,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":24939,"byte_end":24946,"line_start":208,"line_end":208,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Deserializer<ReadRefReader>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the underlying reader in this decoder.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the underlying reader in this decoder.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":24865,"byte_end":24927,"line_start":207,"line_end":207,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":25106,"byte_end":25119,"line_start":215,"line_end":215,"column_start":12,"column_end":25},"name":"set_max_depth","qualname":"<Deserializer<R>>::set_max_depth","value":"pub fn set_max_depth(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Changes the maximum nesting depth that is allowed\n","sig":null,"attributes":[{"value":"/ Changes the maximum nesting depth that is allowed","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":25041,"byte_end":25094,"line_start":214,"line_end":214,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":998},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":44194,"byte_end":44202,"line_start":775,"line_end":775,"column_start":5,"column_end":13},"name":"Borrowed","qualname":"::decode::Reference::Borrowed","value":"Reference::Borrowed(&'b T)","parent":{"krate":0,"index":994},"children":[],"decl_id":null,"docs":" The reference is pointed at data that was borrowed.\n","sig":null,"attributes":[{"value":"/ The reference is pointed at data that was borrowed.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":44134,"byte_end":44189,"line_start":774,"line_end":774,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1001},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":44273,"byte_end":44279,"line_start":777,"line_end":777,"column_start":5,"column_end":11},"name":"Copied","qualname":"::decode::Reference::Copied","value":"Reference::Copied(&'c T)","parent":{"krate":0,"index":994},"children":[],"decl_id":null,"docs":" The reference is pointed at data that was copied.\n","sig":null,"attributes":[{"value":"/ The reference is pointed at data that was copied.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":44215,"byte_end":44268,"line_start":776,"line_end":776,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":994},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":44089,"byte_end":44098,"line_start":773,"line_end":773,"column_start":10,"column_end":19},"name":"Reference","qualname":"::decode::Reference","value":"pub enum Reference<'b, 'c, T: ?Sized + 'static> {\n\n    /// The reference is pointed at data that was borrowed.\n    Borrowed(&'b T),\n\n    /// The reference is pointed at data that was copied.\n    Copied(&'c T),\n}","parent":null,"children":[{"krate":0,"index":998},{"krate":0,"index":1001}],"decl_id":null,"docs":" Unification of both borrowed and non-borrowed reference types.\n","sig":null,"attributes":[{"value":"/ Unification of both borrowed and non-borrowed reference types.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":43972,"byte_end":44038,"line_start":771,"line_end":771,"column_start":1,"column_end":67}}]},{"kind":"Trait","id":{"krate":0,"index":323},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":44427,"byte_end":44436,"line_start":783,"line_end":783,"column_start":11,"column_end":20},"name":"ReadSlice","qualname":"::decode::ReadSlice","value":"ReadSlice<'de>: Read","parent":null,"children":[{"krate":0,"index":325}],"decl_id":null,"docs":" Extends the `Read` trait by allowing to read slices directly by borrowing bytes.","sig":null,"attributes":[{"value":"/ Extends the `Read` trait by allowing to read slices directly by borrowing bytes.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":44291,"byte_end":44375,"line_start":780,"line_end":780,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":44376,"byte_end":44379,"line_start":781,"line_end":781,"column_start":1,"column_end":4}},{"value":"/ Used to allow zero-copy reading.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":44380,"byte_end":44416,"line_start":782,"line_end":782,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":44529,"byte_end":44539,"line_start":785,"line_end":785,"column_start":8,"column_end":18},"name":"read_slice","qualname":"::decode::ReadSlice::read_slice","value":"pub fn read_slice<'a>(&'a mut Self, usize) -> Result<Reference, io::Error>","parent":{"krate":0,"index":323},"children":[],"decl_id":null,"docs":" Reads the exact number of bytes from the underlying byte-array.\n","sig":null,"attributes":[{"value":"/ Reads the exact number of bytes from the underlying byte-array.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":44454,"byte_end":44521,"line_start":784,"line_end":784,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":1028},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":44675,"byte_end":44685,"line_start":790,"line_end":790,"column_start":12,"column_end":22},"name":"ReadReader","qualname":"::decode::ReadReader","value":"ReadReader {  }","parent":null,"children":[{"krate":0,"index":1030},{"krate":0,"index":1031}],"decl_id":null,"docs":" Owned reader wrapper.\n","sig":null,"attributes":[{"value":"/ Owned reader wrapper.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":44621,"byte_end":44646,"line_start":788,"line_end":788,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":1035},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":45513,"byte_end":45526,"line_start":828,"line_end":828,"column_start":12,"column_end":25},"name":"ReadRefReader","qualname":"::decode::ReadRefReader","value":"ReadRefReader {  }","parent":null,"children":[{"krate":0,"index":1038},{"krate":0,"index":1039}],"decl_id":null,"docs":" Borrowed reader wrapper.\n","sig":null,"attributes":[{"value":"/ Borrowed reader wrapper.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":45456,"byte_end":45484,"line_start":826,"line_end":826,"column_start":1,"column_end":29}}]},{"kind":"Function","id":{"krate":0,"index":353},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":47277,"byte_end":47286,"line_start":884,"line_end":884,"column_start":8,"column_end":17},"name":"from_read","qualname":"::decode::from_read","value":"pub fn from_read<R, T>(R) -> Result<T, Error> where R: Read,\nT: DeserializeOwned","parent":null,"children":[],"decl_id":null,"docs":" Deserialize an instance of type `T` from an I/O stream of MessagePack.","sig":null,"attributes":[{"value":"/ Deserialize an instance of type `T` from an I/O stream of MessagePack.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":46879,"byte_end":46953,"line_start":877,"line_end":877,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":46954,"byte_end":46957,"line_start":878,"line_end":878,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":46958,"byte_end":46970,"line_start":879,"line_end":879,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":46971,"byte_end":46974,"line_start":880,"line_end":880,"column_start":1,"column_end":4}},{"value":"/ This conversion can fail if the structure of the Value does not match the structure expected","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":46975,"byte_end":47071,"line_start":881,"line_end":881,"column_start":1,"column_end":97}},{"value":"/ by `T`. It can also fail if the structure is correct but `T`'s implementation of `Deserialize`","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":47072,"byte_end":47170,"line_start":882,"line_end":882,"column_start":1,"column_end":99}},{"value":"/ decides that something is wrong with the data, for example required struct fields are missing.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":47171,"byte_end":47269,"line_start":883,"line_end":883,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":356},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":47570,"byte_end":47580,"line_start":895,"line_end":895,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::decode::from_slice","value":"pub fn from_slice<'a, T>(&'a [u8]) -> Result<T, Error> where T: Deserialize","parent":null,"children":[],"decl_id":null,"docs":" Deserializes a byte slice into the desired type.","sig":null,"attributes":[{"value":"/ Deserializes a byte slice into the desired type.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":47423,"byte_end":47475,"line_start":891,"line_end":891,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":47476,"byte_end":47479,"line_start":892,"line_end":892,"column_start":1,"column_end":4}},{"value":"/ Currently deprecated, use more generic `from_read_ref` instead.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":47480,"byte_end":47547,"line_start":893,"line_end":893,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":359},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":48682,"byte_end":48695,"line_start":930,"line_end":930,"column_start":8,"column_end":21},"name":"from_read_ref","qualname":"::decode::from_read_ref","value":"pub fn from_read_ref<'a, R: ?Sized, T>(&'a R) -> Result<T, Error> where\nR: AsRef<[u8]>, T: Deserialize","parent":null,"children":[],"decl_id":null,"docs":" Deserialize an instance of type `T` from a reference I/O reader of MessagePack.","sig":null,"attributes":[{"value":"/ Deserialize an instance of type `T` from a reference I/O reader of MessagePack.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":47684,"byte_end":47767,"line_start":902,"line_end":902,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":47768,"byte_end":47771,"line_start":903,"line_end":903,"column_start":1,"column_end":4}},{"value":"/ Deserialization will be performed in zero-copy manner whenever it is possible, borrowing the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":47772,"byte_end":47868,"line_start":904,"line_end":904,"column_start":1,"column_end":97}},{"value":"/ data from the reader itself. For example, strings and byte-arrays won't be not copied.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":47869,"byte_end":47959,"line_start":905,"line_end":905,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":47960,"byte_end":47963,"line_start":906,"line_end":906,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":47964,"byte_end":47976,"line_start":907,"line_end":907,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":47977,"byte_end":47980,"line_start":908,"line_end":908,"column_start":1,"column_end":4}},{"value":"/ This conversion can fail if the structure of the Value does not match the structure expected","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":47981,"byte_end":48077,"line_start":909,"line_end":909,"column_start":1,"column_end":97}},{"value":"/ by `T`. It can also fail if the structure is correct but `T`'s implementation of `Deserialize`","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":48078,"byte_end":48176,"line_start":910,"line_end":910,"column_start":1,"column_end":99}},{"value":"/ decides that something is wrong with the data, for example required struct fields are missing.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":48177,"byte_end":48275,"line_start":911,"line_end":911,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":48276,"byte_end":48279,"line_start":912,"line_end":912,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":48280,"byte_end":48294,"line_start":913,"line_end":913,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":48295,"byte_end":48298,"line_start":914,"line_end":914,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":48299,"byte_end":48306,"line_start":915,"line_end":915,"column_start":1,"column_end":8}},{"value":"/ # #[macro_use] extern crate serde_derive;","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":48307,"byte_end":48352,"line_start":916,"line_end":916,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":48353,"byte_end":48356,"line_start":917,"line_end":917,"column_start":1,"column_end":4}},{"value":"/ // Encoded `[\"Bobby\", 8]`.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":48357,"byte_end":48387,"line_start":918,"line_end":918,"column_start":1,"column_end":31}},{"value":"/ let buf = [0x92, 0xa5, 0x42, 0x6f, 0x62, 0x62, 0x79, 0x8];","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":48388,"byte_end":48450,"line_start":919,"line_end":919,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":48451,"byte_end":48454,"line_start":920,"line_end":920,"column_start":1,"column_end":4}},{"value":"/ #[derive(Debug, Deserialize, PartialEq)]","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":48455,"byte_end":48499,"line_start":921,"line_end":921,"column_start":1,"column_end":45}},{"value":"/ struct Dog<'a> {","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":48500,"byte_end":48520,"line_start":922,"line_end":922,"column_start":1,"column_end":21}},{"value":"/    name: &'a str,","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":48521,"byte_end":48542,"line_start":923,"line_end":923,"column_start":1,"column_end":22}},{"value":"/    age: u8,","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":48543,"byte_end":48558,"line_start":924,"line_end":924,"column_start":1,"column_end":16}},{"value":"/ }","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":48559,"byte_end":48564,"line_start":925,"line_end":925,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":48565,"byte_end":48568,"line_start":926,"line_end":926,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(Dog { name: \"Bobby\", age: 8 }, rmp_serde::from_read_ref(&buf).unwrap());","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":48569,"byte_end":48656,"line_start":927,"line_end":927,"column_start":1,"column_end":88}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":48657,"byte_end":48664,"line_start":928,"line_end":928,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":48665,"byte_end":48674,"line_start":929,"line_end":929,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":363},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"encode","qualname":"::encode","value":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":1238},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":1258},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":1044},{"krate":0,"index":1058},{"krate":0,"index":389},{"krate":0,"index":392},{"krate":0,"index":394},{"krate":0,"index":396},{"krate":0,"index":399},{"krate":0,"index":1060},{"krate":0,"index":1066},{"krate":0,"index":404},{"krate":0,"index":411},{"krate":0,"index":414},{"krate":0,"index":417},{"krate":0,"index":420},{"krate":0,"index":425},{"krate":0,"index":432},{"krate":0,"index":1070},{"krate":0,"index":1075},{"krate":0,"index":1080},{"krate":0,"index":1086},{"krate":0,"index":1090},{"krate":0,"index":1095},{"krate":0,"index":439},{"krate":0,"index":448},{"krate":0,"index":457},{"krate":0,"index":466},{"krate":0,"index":475},{"krate":0,"index":486},{"krate":0,"index":495},{"krate":0,"index":504},{"krate":0,"index":552},{"krate":0,"index":596},{"krate":0,"index":639},{"krate":0,"index":647},{"krate":0,"index":653},{"krate":0,"index":659},{"krate":0,"index":662},{"krate":0,"index":665},{"krate":0,"index":667}],"decl_id":null,"docs":" Serialize a Rust data structure into MessagePack data.\n","sig":null,"attributes":[{"value":"/ Serialize a Rust data structure into MessagePack data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":48889,"byte_end":48947,"line_start":1,"line_end":1,"column_start":1,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1045},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":49648,"byte_end":49665,"line_start":26,"line_end":26,"column_start":5,"column_end":22},"name":"InvalidValueWrite","qualname":"::encode::Error::InvalidValueWrite","value":"Error::InvalidValueWrite(ValueWriteError)","parent":{"krate":0,"index":1044},"children":[],"decl_id":null,"docs":" Failed to write a MessagePack value.\n","sig":null,"attributes":[{"value":"/ Failed to write a MessagePack value.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":49603,"byte_end":49643,"line_start":25,"line_end":25,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1048},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":49772,"byte_end":49785,"line_start":28,"line_end":28,"column_start":5,"column_end":18},"name":"UnknownLength","qualname":"::encode::Error::UnknownLength","value":"Error::UnknownLength","parent":{"krate":0,"index":1044},"children":[],"decl_id":null,"docs":" Failed to serialize struct, sequence or map, because its length is unknown.\n","sig":null,"attributes":[{"value":"/ Failed to serialize struct, sequence or map, because its length is unknown.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":49688,"byte_end":49767,"line_start":27,"line_end":27,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1050},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":49868,"byte_end":49884,"line_start":30,"line_end":30,"column_start":5,"column_end":21},"name":"InvalidDataModel","qualname":"::encode::Error::InvalidDataModel","value":"Error::InvalidDataModel(&'static str)","parent":{"krate":0,"index":1044},"children":[],"decl_id":null,"docs":" Invalid Data model, i.e. Serialize trait is not implmented correctly\n","sig":null,"attributes":[{"value":"/ Invalid Data model, i.e. Serialize trait is not implmented correctly","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":49791,"byte_end":49863,"line_start":29,"line_end":29,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1053},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":49933,"byte_end":49951,"line_start":32,"line_end":32,"column_start":5,"column_end":23},"name":"DepthLimitExceeded","qualname":"::encode::Error::DepthLimitExceeded","value":"Error::DepthLimitExceeded","parent":{"krate":0,"index":1044},"children":[],"decl_id":null,"docs":" Depth limit exceeded\n","sig":null,"attributes":[{"value":"/ Depth limit exceeded","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":49904,"byte_end":49928,"line_start":31,"line_end":31,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1055},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":50001,"byte_end":50007,"line_start":34,"line_end":34,"column_start":5,"column_end":11},"name":"Syntax","qualname":"::encode::Error::Syntax","value":"Error::Syntax(String)","parent":{"krate":0,"index":1044},"children":[],"decl_id":null,"docs":" Catchall for syntax error messages.\n","sig":null,"attributes":[{"value":"/ Catchall for syntax error messages.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":49957,"byte_end":49996,"line_start":33,"line_end":33,"column_start":5,"column_end":44}}]},{"kind":"Enum","id":{"krate":0,"index":1044},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":49591,"byte_end":49596,"line_start":24,"line_end":24,"column_start":10,"column_end":15},"name":"Error","qualname":"::encode::Error","value":"pub enum Error {\n\n    /// Failed to write a MessagePack value.\n    InvalidValueWrite(ValueWriteError),\n\n    /// Failed to serialize struct, sequence or map, because its length is unknown.\n    UnknownLength,\n\n    /// Invalid Data model, i.e. Serialize trait is not implmented correctly\n    InvalidDataModel(&'static str),\n\n    /// Depth limit exceeded\n    DepthLimitExceeded,\n\n    /// Catchall for syntax error messages.\n    Syntax(String),\n}","parent":null,"children":[{"krate":0,"index":1045},{"krate":0,"index":1048},{"krate":0,"index":1050},{"krate":0,"index":1053},{"krate":0,"index":1055}],"decl_id":null,"docs":" This type represents all possible errors that can occur when serializing or\n deserializing MessagePack data.\n","sig":null,"attributes":[{"value":"/ This type represents all possible errors that can occur when serializing or","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":49449,"byte_end":49528,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ deserializing MessagePack data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":49529,"byte_end":49564,"line_start":22,"line_end":22,"column_start":1,"column_end":36}}]},{"kind":"Trait","id":{"krate":0,"index":399},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":51828,"byte_end":51843,"line_start":89,"line_end":89,"column_start":11,"column_end":26},"name":"UnderlyingWrite","qualname":"::encode::UnderlyingWrite","value":"UnderlyingWrite","parent":null,"children":[{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403}],"decl_id":null,"docs":" Obtain the underlying writer.\n","sig":null,"attributes":[{"value":"/ Obtain the underlying writer.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":51784,"byte_end":51817,"line_start":88,"line_end":88,"column_start":1,"column_end":34}}]},{"kind":"Type","id":{"krate":0,"index":400},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":51887,"byte_end":51892,"line_start":91,"line_end":91,"column_start":10,"column_end":15},"name":"Write","qualname":"::encode::UnderlyingWrite::Write","value":"type Write: Write;","parent":{"krate":0,"index":399},"children":[],"decl_id":null,"docs":" Underlying writer type.\n","sig":null,"attributes":[{"value":"/ Underlying writer type.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":51850,"byte_end":51877,"line_start":90,"line_end":90,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":51960,"byte_end":51967,"line_start":94,"line_end":94,"column_start":8,"column_end":15},"name":"get_ref","qualname":"::encode::UnderlyingWrite::get_ref","value":"pub fn get_ref(&Self) -> &Self::Write","parent":{"krate":0,"index":399},"children":[],"decl_id":null,"docs":" Gets a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the underlying writer.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":51906,"byte_end":51952,"line_start":93,"line_end":93,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":52137,"byte_end":52144,"line_start":99,"line_end":99,"column_start":8,"column_end":15},"name":"get_mut","qualname":"::encode::UnderlyingWrite::get_mut","value":"pub fn get_mut(&mut Self) -> &mut Self::Write","parent":{"krate":0,"index":399},"children":[],"decl_id":null,"docs":" Gets a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the underlying writer.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":51997,"byte_end":52051,"line_start":96,"line_end":96,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":52056,"byte_end":52059,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ It is inadvisable to directly write to the underlying writer.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":52064,"byte_end":52129,"line_start":98,"line_end":98,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":52253,"byte_end":52263,"line_start":102,"line_end":102,"column_start":8,"column_end":18},"name":"into_inner","qualname":"::encode::UnderlyingWrite::into_inner","value":"pub fn into_inner(Self) -> Self::Write","parent":{"krate":0,"index":399},"children":[],"decl_id":null,"docs":" Unwraps this `Serializer`, returning the underlying writer.\n","sig":null,"attributes":[{"value":"/ Unwraps this `Serializer`, returning the underlying writer.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":52182,"byte_end":52245,"line_start":101,"line_end":101,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":1060},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":52925,"byte_end":52935,"line_start":120,"line_end":120,"column_start":12,"column_end":22},"name":"Serializer","qualname":"::encode::Serializer","value":"Serializer {  }","parent":null,"children":[{"krate":0,"index":1063},{"krate":0,"index":1064},{"krate":0,"index":1065}],"decl_id":null,"docs":" Represents MessagePack serialization implementation.","sig":null,"attributes":[{"value":"/ Represents MessagePack serialization implementation.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":52289,"byte_end":52345,"line_start":105,"line_end":105,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":52346,"byte_end":52349,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":52350,"byte_end":52360,"line_start":107,"line_end":107,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":52361,"byte_end":52364,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ MessagePack has no specification about how to encode enum types. Thus we are free to do","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":52365,"byte_end":52456,"line_start":109,"line_end":109,"column_start":1,"column_end":92}},{"value":"/ whatever we want, so the given choice may be not ideal for you.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":52457,"byte_end":52524,"line_start":110,"line_end":110,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":52525,"byte_end":52528,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ An enum value is represented as a single-entry map whose key is the variant","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":52529,"byte_end":52608,"line_start":112,"line_end":112,"column_start":1,"column_end":80}},{"value":"/ id and whose value is a sequence containing all associated data. If the enum","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":52609,"byte_end":52689,"line_start":113,"line_end":113,"column_start":1,"column_end":81}},{"value":"/ does not have associated data, the sequence is empty.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":52690,"byte_end":52747,"line_start":114,"line_end":114,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":52748,"byte_end":52751,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ All instances of `ErrorKind::Interrupted` are handled by this function and the underlying","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":52752,"byte_end":52845,"line_start":116,"line_end":116,"column_start":1,"column_end":94}},{"value":"/ operation is retried.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":52846,"byte_end":52871,"line_start":117,"line_end":117,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":53107,"byte_end":53114,"line_start":129,"line_end":129,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Serializer<W, C>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the underlying writer.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":53049,"byte_end":53095,"line_start":128,"line_end":128,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":53302,"byte_end":53309,"line_start":136,"line_end":136,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Serializer<W, C>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the underlying writer.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":53158,"byte_end":53212,"line_start":133,"line_end":133,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":53217,"byte_end":53220,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ It is inadvisable to directly write to the underlying writer.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":53225,"byte_end":53290,"line_start":135,"line_end":135,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":53440,"byte_end":53450,"line_start":141,"line_end":141,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Serializer<W, C>>::into_inner","value":"pub fn into_inner(Self) -> W","parent":null,"children":[],"decl_id":null,"docs":" Unwraps this `Serializer`, returning the underlying writer.\n","sig":null,"attributes":[{"value":"/ Unwraps this `Serializer`, returning the underlying writer.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":53365,"byte_end":53428,"line_start":140,"line_end":140,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":53610,"byte_end":53623,"line_start":149,"line_end":149,"column_start":12,"column_end":25},"name":"set_max_depth","qualname":"<Serializer<W, C>>::set_max_depth","value":"pub fn set_max_depth(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Changes the maximum nesting depth that is allowed.","sig":null,"attributes":[{"value":"/ Changes the maximum nesting depth that is allowed.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":53491,"byte_end":53545,"line_start":145,"line_end":145,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":53550,"byte_end":53553,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ Currently unused.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":53558,"byte_end":53579,"line_start":147,"line_end":147,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":54041,"byte_end":54044,"line_start":162,"line_end":162,"column_start":12,"column_end":15},"name":"new","qualname":"<Serializer<W, DefaultConfig>>::new","value":"pub fn new(W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `MessagePack` serializer whose output will be written to the writer\n specified.","sig":null,"attributes":[{"value":"/ Constructs a new `MessagePack` serializer whose output will be written to the writer","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":53738,"byte_end":53826,"line_start":155,"line_end":155,"column_start":5,"column_end":93}},{"value":"/ specified.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":53831,"byte_end":53845,"line_start":156,"line_end":156,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":53850,"byte_end":53853,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":53858,"byte_end":53868,"line_start":158,"line_end":158,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":53873,"byte_end":53876,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ This is the default constructor, which returns a serializer that will serialize structs","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":53881,"byte_end":53972,"line_start":160,"line_end":160,"column_start":5,"column_end":96}},{"value":"/ and enums using the most compact representation.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":53977,"byte_end":54029,"line_start":161,"line_end":161,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":54331,"byte_end":54338,"line_start":174,"line_end":174,"column_start":12,"column_end":19},"name":"compact","qualname":"<Serializer<W, StructTupleConfig<DefaultConfig>>>::compact","value":"pub fn compact(W) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(note = \"use `Serializer::new` instead\")","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":54247,"byte_end":54300,"line_start":172,"line_end":172,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":54578,"byte_end":54587,"line_start":182,"line_end":182,"column_start":12,"column_end":21},"name":"new_named","qualname":"<Serializer<W, StructMapConfig<DefaultConfig>>>::new_named","value":"pub fn new_named(W) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(note = \"use `Serializer::with_struct_map()` instead\")","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":54480,"byte_end":54547,"line_start":180,"line_end":180,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":55117,"byte_end":55132,"line_start":200,"line_end":200,"column_start":12,"column_end":27},"name":"with_struct_map","qualname":"<Serializer<W, C>>::with_struct_map","value":"pub fn with_struct_map(Self) -> Serializer<W, StructMapConfig<C>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this serializer returning the new one, which will serialize structs as a map.","sig":null,"attributes":[{"value":"/ Consumes this serializer returning the new one, which will serialize structs as a map.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":54892,"byte_end":54982,"line_start":196,"line_end":196,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":54987,"byte_end":54990,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ This is used, when you the default struct serialization as a tuple does not fit your","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":54995,"byte_end":55083,"line_start":198,"line_end":198,"column_start":5,"column_end":93}},{"value":"/ requirements.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":55088,"byte_end":55105,"line_start":199,"line_end":199,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":55613,"byte_end":55630,"line_start":214,"line_end":214,"column_start":12,"column_end":29},"name":"with_struct_tuple","qualname":"<Serializer<W, C>>::with_struct_tuple","value":"pub fn with_struct_tuple(Self) -> Serializer<W, StructTupleConfig<C>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this serializer returning the new one, which will serialize structs as a tuple\n without field names.","sig":null,"attributes":[{"value":"/ Consumes this serializer returning the new one, which will serialize structs as a tuple","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":55358,"byte_end":55449,"line_start":209,"line_end":209,"column_start":5,"column_end":96}},{"value":"/ without field names.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":55454,"byte_end":55478,"line_start":210,"line_end":210,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":55483,"byte_end":55486,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ This is the default MessagePack serialization mechanism, emitting the most compact","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":55491,"byte_end":55577,"line_start":212,"line_end":212,"column_start":5,"column_end":91}},{"value":"/ representation.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":55582,"byte_end":55601,"line_start":213,"line_end":213,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":56094,"byte_end":56114,"line_start":227,"line_end":227,"column_start":12,"column_end":32},"name":"with_string_variants","qualname":"<Serializer<W, C>>::with_string_variants","value":"pub fn with_string_variants(Self) -> Serializer<W, VariantStringConfig<C>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this serializer returning the new one, which will serialize enum variants as strings.","sig":null,"attributes":[{"value":"/ Consumes this serializer returning the new one, which will serialize enum variants as strings.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":55860,"byte_end":55958,"line_start":223,"line_end":223,"column_start":5,"column_end":103}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":55963,"byte_end":55966,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ This is used, when you the default struct serialization as integers does not fit your","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":55971,"byte_end":56060,"line_start":225,"line_end":225,"column_start":5,"column_end":94}},{"value":"/ requirements.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":56065,"byte_end":56082,"line_start":226,"line_end":226,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":56605,"byte_end":56626,"line_start":241,"line_end":241,"column_start":12,"column_end":33},"name":"with_integer_variants","qualname":"<Serializer<W, C>>::with_integer_variants","value":"pub fn with_integer_variants(Self) -> Serializer<W, VariantIntegerConfig<C>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this serializer returning the new one, which will serialize enum variants as a their\n integer indices.","sig":null,"attributes":[{"value":"/ Consumes this serializer returning the new one, which will serialize enum variants as a their","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":56348,"byte_end":56445,"line_start":236,"line_end":236,"column_start":5,"column_end":102}},{"value":"/ integer indices.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":56450,"byte_end":56470,"line_start":237,"line_end":237,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":56475,"byte_end":56478,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ This is the default MessagePack serialization mechanism, emitting the most compact","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":56483,"byte_end":56569,"line_start":239,"line_end":239,"column_start":5,"column_end":91}},{"value":"/ representation.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":56574,"byte_end":56593,"line_start":240,"line_end":240,"column_start":5,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":1070},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":57209,"byte_end":57217,"line_start":269,"line_end":269,"column_start":12,"column_end":20},"name":"Compound","qualname":"::encode::Compound","value":"Compound {  }","parent":null,"children":[{"krate":0,"index":1074}],"decl_id":null,"docs":" Part of serde serialization API.\n","sig":null,"attributes":[{"value":"/ Part of serde serialization API.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":57144,"byte_end":57180,"line_start":267,"line_end":267,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1080},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":57326,"byte_end":57344,"line_start":275,"line_end":275,"column_start":12,"column_end":30},"name":"ExtFieldSerializer","qualname":"::encode::ExtFieldSerializer","value":"ExtFieldSerializer {  }","parent":null,"children":[{"krate":0,"index":1083},{"krate":0,"index":1084},{"krate":0,"index":1085}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":57292,"byte_end":57314,"line_start":274,"line_end":274,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":1090},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":57507,"byte_end":57520,"line_start":283,"line_end":283,"column_start":12,"column_end":25},"name":"ExtSerializer","qualname":"::encode::ExtSerializer","value":"ExtSerializer {  }","parent":null,"children":[{"krate":0,"index":1093},{"krate":0,"index":1094}],"decl_id":null,"docs":" Represents MessagePack serialization implementation for Ext.\n","sig":null,"attributes":[{"value":"/ Represents MessagePack serialization implementation for Ext.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":57414,"byte_end":57478,"line_start":281,"line_end":281,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":659},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":80111,"byte_end":80116,"line_start":951,"line_end":951,"column_start":8,"column_end":13},"name":"write","qualname":"::encode::write","value":"pub fn write<W: ?Sized, T: ?Sized>(&mut W, &T) -> Result<(), Error> where\nW: Write, T: Serialize","parent":null,"children":[],"decl_id":null,"docs":" Serialize the given data structure as MessagePack into the I/O stream.\n This function uses compact representation - structures as arrays","sig":null,"attributes":[{"value":"/ Serialize the given data structure as MessagePack into the I/O stream.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":79863,"byte_end":79937,"line_start":946,"line_end":946,"column_start":1,"column_end":75}},{"value":"/ This function uses compact representation - structures as arrays","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":79938,"byte_end":80006,"line_start":947,"line_end":947,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":80007,"byte_end":80010,"line_start":948,"line_end":948,"column_start":1,"column_end":4}},{"value":"/ Serialization can fail if `T`'s implementation of `Serialize` decides to fail.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":80011,"byte_end":80093,"line_start":949,"line_end":949,"column_start":1,"column_end":83}},{"value":"inline","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":80094,"byte_end":80103,"line_start":950,"line_end":950,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":662},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":80496,"byte_end":80507,"line_start":964,"line_end":964,"column_start":8,"column_end":19},"name":"write_named","qualname":"::encode::write_named","value":"pub fn write_named<W: ?Sized, T: ?Sized>(&mut W, &T) -> Result<(), Error>\nwhere W: Write, T: Serialize","parent":null,"children":[],"decl_id":null,"docs":" Serialize the given data structure as MessagePack into the I/O stream.\n This function serializes structures as maps","sig":null,"attributes":[{"value":"/ Serialize the given data structure as MessagePack into the I/O stream.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":80269,"byte_end":80343,"line_start":959,"line_end":959,"column_start":1,"column_end":75}},{"value":"/ This function serializes structures as maps","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":80344,"byte_end":80391,"line_start":960,"line_end":960,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":80392,"byte_end":80395,"line_start":961,"line_end":961,"column_start":1,"column_end":4}},{"value":"/ Serialization can fail if `T`'s implementation of `Serialize` decides to fail.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":80396,"byte_end":80478,"line_start":962,"line_end":962,"column_start":1,"column_end":83}},{"value":"inline","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":80479,"byte_end":80488,"line_start":963,"line_end":963,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":665},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":80959,"byte_end":80965,"line_start":979,"line_end":979,"column_start":8,"column_end":14},"name":"to_vec","qualname":"::encode::to_vec","value":"pub fn to_vec<T: ?Sized>(&T) -> Result<Vec<u8>, Error> where T: Serialize","parent":null,"children":[],"decl_id":null,"docs":" Serialize the given data structure as a MessagePack byte vector.\n This method uses compact representation, structs are serialized as arrays","sig":null,"attributes":[{"value":"/ Serialize the given data structure as a MessagePack byte vector.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":80708,"byte_end":80776,"line_start":974,"line_end":974,"column_start":1,"column_end":69}},{"value":"/ This method uses compact representation, structs are serialized as arrays","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":80777,"byte_end":80854,"line_start":975,"line_end":975,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":80855,"byte_end":80858,"line_start":976,"line_end":976,"column_start":1,"column_end":4}},{"value":"/ Serialization can fail if `T`'s implementation of `Serialize` decides to fail.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":80859,"byte_end":80941,"line_start":977,"line_end":977,"column_start":1,"column_end":83}},{"value":"inline","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":80942,"byte_end":80951,"line_start":978,"line_end":978,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":667},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":81356,"byte_end":81368,"line_start":995,"line_end":995,"column_start":8,"column_end":20},"name":"to_vec_named","qualname":"::encode::to_vec_named","value":"pub fn to_vec_named<T: ?Sized>(&T) -> Result<Vec<u8>, Error> where\nT: Serialize","parent":null,"children":[],"decl_id":null,"docs":" Serializes data structure into byte vector as a map\n Resulting MessagePack message will contain field names","sig":null,"attributes":[{"value":"/ Serializes data structure into byte vector as a map","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":81120,"byte_end":81175,"line_start":988,"line_end":988,"column_start":1,"column_end":56}},{"value":"/ Resulting MessagePack message will contain field names","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":81176,"byte_end":81234,"line_start":989,"line_end":989,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":81235,"byte_end":81238,"line_start":990,"line_end":990,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":81239,"byte_end":81251,"line_start":991,"line_end":991,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":81252,"byte_end":81255,"line_start":992,"line_end":992,"column_start":1,"column_end":4}},{"value":"/ Serialization can fail if `T`'s implementation of `Serialize` decides to fail.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":81256,"byte_end":81338,"line_start":993,"line_end":993,"column_start":1,"column_end":83}},{"value":"inline","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":81339,"byte_end":81348,"line_start":994,"line_end":994,"column_start":1,"column_end":10}}]},{"kind":"Const","id":{"krate":0,"index":669},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":2603,"byte_end":2626,"line_start":91,"line_end":91,"column_start":11,"column_end":34},"name":"MSGPACK_EXT_STRUCT_NAME","qualname":"::MSGPACK_EXT_STRUCT_NAME","value":"&str","parent":null,"children":[],"decl_id":null,"docs":" Name of Serde newtype struct to Represent Msgpack's Ext\n Msgpack Ext: Ext(tag, binary)\n Serde data model: _ExtStruct((tag, binary))\n Example Serde impl for custom type:","sig":null,"attributes":[{"value":"/ Name of Serde newtype struct to Represent Msgpack's Ext","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":2131,"byte_end":2190,"line_start":78,"line_end":78,"column_start":1,"column_end":60}},{"value":"/ Msgpack Ext: Ext(tag, binary)","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":2191,"byte_end":2224,"line_start":79,"line_end":79,"column_start":1,"column_end":34}},{"value":"/ Serde data model: _ExtStruct((tag, binary))","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":2225,"byte_end":2272,"line_start":80,"line_end":80,"column_start":1,"column_end":48}},{"value":"/ Example Serde impl for custom type:","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":2273,"byte_end":2312,"line_start":81,"line_end":81,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":2313,"byte_end":2316,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":2317,"byte_end":2330,"line_start":83,"line_end":83,"column_start":1,"column_end":14}},{"value":"/ #[derive(Debug, PartialEq, Serialize, Deserialize)]","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":2331,"byte_end":2386,"line_start":84,"line_end":84,"column_start":1,"column_end":56}},{"value":"/ #[serde(rename = \"_ExtStruct\")]","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":2387,"byte_end":2422,"line_start":85,"line_end":85,"column_start":1,"column_end":36}},{"value":"/ struct ExtStruct((i8, serde_bytes::ByteBuf));","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":2423,"byte_end":2472,"line_start":86,"line_end":86,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":2473,"byte_end":2476,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ test_round(ExtStruct((2, serde_bytes::ByteBuf::from(vec![5]))),","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":2477,"byte_end":2544,"line_start":88,"line_end":88,"column_start":1,"column_end":68}},{"value":"/            Value::Ext(2, vec![5]));","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":2545,"byte_end":2584,"line_start":89,"line_end":89,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":2585,"byte_end":2592,"line_start":90,"line_end":90,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1099},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":2910,"byte_end":2913,"line_start":98,"line_end":98,"column_start":12,"column_end":15},"name":"Raw","qualname":"::Raw","value":"Raw {  }","parent":null,"children":[{"krate":0,"index":1100}],"decl_id":null,"docs":" Helper that allows both to encode and decode strings no matter whether they contain valid or\n invalid UTF-8.","sig":null,"attributes":[{"value":"/ Helper that allows both to encode and decode strings no matter whether they contain valid or","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":2650,"byte_end":2746,"line_start":93,"line_end":93,"column_start":1,"column_end":97}},{"value":"/ invalid UTF-8.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":2747,"byte_end":2765,"line_start":94,"line_end":94,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":2766,"byte_end":2769,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ Regardless of validity the UTF-8 content this type will always be serialized as a string.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":2770,"byte_end":2863,"line_start":96,"line_end":96,"column_start":1,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":3040,"byte_end":3043,"line_start":104,"line_end":104,"column_start":12,"column_end":15},"name":"new","qualname":"<Raw>::new","value":"pub fn new(String) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Raw` from the UTF-8 string.\n","sig":null,"attributes":[{"value":"/ Constructs a new `Raw` from the UTF-8 string.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":2979,"byte_end":3028,"line_start":103,"line_end":103,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":3156,"byte_end":3165,"line_start":109,"line_end":109,"column_start":12,"column_end":21},"name":"from_utf8","qualname":"<Raw>::from_utf8","value":"pub fn from_utf8(Vec<u8>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a vector of bytes to a `Raw`.\n","sig":null,"attributes":[{"value":"/ Converts a vector of bytes to a `Raw`.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":3102,"byte_end":3144,"line_start":108,"line_end":108,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":3510,"byte_end":3516,"line_start":122,"line_end":122,"column_start":12,"column_end":18},"name":"is_str","qualname":"<Raw>::is_str","value":"pub fn is_str(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the raw is valid UTF-8.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the raw is valid UTF-8.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":3453,"byte_end":3498,"line_start":121,"line_end":121,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":3642,"byte_end":3648,"line_start":127,"line_end":127,"column_start":12,"column_end":18},"name":"is_err","qualname":"<Raw>::is_err","value":"pub fn is_err(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the raw contains invalid UTF-8 sequence.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the raw contains invalid UTF-8 sequence.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":3568,"byte_end":3630,"line_start":126,"line_end":126,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":675},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":3788,"byte_end":3794,"line_start":132,"line_end":132,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Raw>::as_str","value":"pub fn as_str(&Self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Returns the string reference if the raw is valid UTF-8, or else `None`.\n","sig":null,"attributes":[{"value":"/ Returns the string reference if the raw is valid UTF-8, or else `None`.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":3701,"byte_end":3776,"line_start":131,"line_end":131,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":676},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":4054,"byte_end":4060,"line_start":141,"line_end":141,"column_start":12,"column_end":18},"name":"as_err","qualname":"<Raw>::as_err","value":"pub fn as_err(&Self) -> Option<&Utf8Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying `Utf8Error` if the raw contains invalid UTF-8 sequence, or\n else `None`.\n","sig":null,"attributes":[{"value":"/ Returns the underlying `Utf8Error` if the raw contains invalid UTF-8 sequence, or","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":3936,"byte_end":4021,"line_start":139,"line_end":139,"column_start":5,"column_end":90}},{"value":"/ else `None`.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":4026,"byte_end":4042,"line_start":140,"line_end":140,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":4269,"byte_end":4277,"line_start":149,"line_end":149,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Raw>::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns a byte slice of this raw's contents.\n","sig":null,"attributes":[{"value":"/ Returns a byte slice of this raw's contents.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":4209,"byte_end":4257,"line_start":148,"line_end":148,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":678},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":4519,"byte_end":4527,"line_start":157,"line_end":157,"column_start":12,"column_end":20},"name":"into_str","qualname":"<Raw>::into_str","value":"pub fn into_str(Self) -> Option<String>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this object, yielding the string if the raw is valid UTF-8, or else `None`.\n","sig":null,"attributes":[{"value":"/ Consumes this object, yielding the string if the raw is valid UTF-8, or else `None`.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":4419,"byte_end":4507,"line_start":156,"line_end":156,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":679},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":4637,"byte_end":4647,"line_start":162,"line_end":162,"column_start":12,"column_end":22},"name":"into_bytes","qualname":"<Raw>::into_bytes","value":"pub fn into_bytes(Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Converts a `Raw` into a byte vector.\n","sig":null,"attributes":[{"value":"/ Converts a `Raw` into a byte vector.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":4585,"byte_end":4625,"line_start":161,"line_end":161,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":1109},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":6664,"byte_end":6670,"line_start":247,"line_end":247,"column_start":12,"column_end":18},"name":"RawRef","qualname":"::RawRef","value":"RawRef {  }","parent":null,"children":[{"krate":0,"index":1111}],"decl_id":null,"docs":" Helper that allows both to encode and decode strings no matter whether they contain valid or\n invalid UTF-8.","sig":null,"attributes":[{"value":"/ Helper that allows both to encode and decode strings no matter whether they contain valid or","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":6398,"byte_end":6494,"line_start":242,"line_end":242,"column_start":1,"column_end":97}},{"value":"/ invalid UTF-8.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":6495,"byte_end":6513,"line_start":243,"line_end":243,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":6514,"byte_end":6517,"line_start":244,"line_end":244,"column_start":1,"column_end":4}},{"value":"/ Regardless of validity the UTF-8 content this type will always be serialized as a string.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":6518,"byte_end":6611,"line_start":245,"line_end":245,"column_start":1,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":703},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":6817,"byte_end":6820,"line_start":253,"line_end":253,"column_start":12,"column_end":15},"name":"new","qualname":"<RawRef>::new","value":"pub fn new(&'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `RawRef` from the UTF-8 string.\n","sig":null,"attributes":[{"value":"/ Constructs a new `RawRef` from the UTF-8 string.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":6753,"byte_end":6805,"line_start":252,"line_end":252,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":6937,"byte_end":6946,"line_start":258,"line_end":258,"column_start":12,"column_end":21},"name":"from_utf8","qualname":"<RawRef>::from_utf8","value":"pub fn from_utf8(&'a [u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a vector of bytes to a `RawRef`.\n","sig":null,"attributes":[{"value":"/ Converts a vector of bytes to a `RawRef`.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":6880,"byte_end":6925,"line_start":257,"line_end":257,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":7237,"byte_end":7243,"line_start":270,"line_end":270,"column_start":12,"column_end":18},"name":"is_str","qualname":"<RawRef>::is_str","value":"pub fn is_str(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the raw is valid UTF-8.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the raw is valid UTF-8.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":7180,"byte_end":7225,"line_start":269,"line_end":269,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":7369,"byte_end":7375,"line_start":275,"line_end":275,"column_start":12,"column_end":18},"name":"is_err","qualname":"<RawRef>::is_err","value":"pub fn is_err(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the raw contains invalid UTF-8 sequence.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the raw contains invalid UTF-8 sequence.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":7295,"byte_end":7357,"line_start":274,"line_end":274,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":7515,"byte_end":7521,"line_start":280,"line_end":280,"column_start":12,"column_end":18},"name":"as_str","qualname":"<RawRef>::as_str","value":"pub fn as_str(&Self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Returns the string reference if the raw is valid UTF-8, or else `None`.\n","sig":null,"attributes":[{"value":"/ Returns the string reference if the raw is valid UTF-8, or else `None`.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":7428,"byte_end":7503,"line_start":279,"line_end":279,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":7772,"byte_end":7778,"line_start":289,"line_end":289,"column_start":12,"column_end":18},"name":"as_err","qualname":"<RawRef>::as_err","value":"pub fn as_err(&Self) -> Option<&Utf8Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying `Utf8Error` if the raw contains invalid UTF-8 sequence, or\n else `None`.\n","sig":null,"attributes":[{"value":"/ Returns the underlying `Utf8Error` if the raw contains invalid UTF-8 sequence, or","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":7654,"byte_end":7739,"line_start":287,"line_end":287,"column_start":5,"column_end":90}},{"value":"/ else `None`.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":7744,"byte_end":7760,"line_start":288,"line_end":288,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":7987,"byte_end":7995,"line_start":297,"line_end":297,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<RawRef>::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns a byte slice of this raw's contents.\n","sig":null,"attributes":[{"value":"/ Returns a byte slice of this raw's contents.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":7927,"byte_end":7975,"line_start":296,"line_end":296,"column_start":5,"column_end":53}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":9832,"byte_end":9833,"line_start":13,"line_end":13,"column_start":56,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":11390,"byte_end":11403,"line_start":57,"line_end":57,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":12717,"byte_end":12732,"line_start":100,"line_end":100,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":12959,"byte_end":12974,"line_start":107,"line_end":107,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":14088,"byte_end":14105,"line_start":149,"line_end":149,"column_start":9,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":14336,"byte_end":14353,"line_start":156,"line_end":156,"column_start":38,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":15581,"byte_end":15600,"line_start":199,"line_end":199,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":15835,"byte_end":15854,"line_start":206,"line_end":206,"column_start":38,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":16889,"byte_end":16909,"line_start":244,"line_end":244,"column_start":9,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":17146,"byte_end":17166,"line_start":251,"line_end":251,"column_start":38,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":115},{"krate":0,"index":118},{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":19578,"byte_end":19583,"line_start":46,"line_end":46,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":20210,"byte_end":20215,"line_start":66,"line_end":66,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":20327,"byte_end":20332,"line_start":72,"line_end":72,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":21422,"byte_end":21427,"line_start":94,"line_end":94,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":21606,"byte_end":21611,"line_start":102,"line_end":102,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":21722,"byte_end":21727,"line_start":108,"line_end":108,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":22093,"byte_end":22098,"line_start":118,"line_end":118,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":22548,"byte_end":22553,"line_start":129,"line_end":129,"column_start":42,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":23424,"byte_end":23436,"line_start":154,"line_end":154,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":24320,"byte_end":24332,"line_start":187,"line_end":187,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":24536,"byte_end":24548,"line_start":194,"line_end":194,"column_start":14,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":25019,"byte_end":25031,"line_start":213,"line_end":213,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":28106,"byte_end":28121,"line_start":309,"line_end":309,"column_start":39,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":28389,"byte_end":28404,"line_start":319,"line_end":319,"column_start":65,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":838},{"krate":0,"index":840},{"krate":0,"index":842},{"krate":0,"index":844},{"krate":0,"index":846},{"krate":0,"index":848},{"krate":0,"index":850},{"krate":0,"index":852},{"krate":0,"index":854},{"krate":0,"index":856},{"krate":0,"index":858},{"krate":0,"index":860},{"krate":0,"index":862},{"krate":0,"index":864},{"krate":0,"index":866},{"krate":0,"index":868},{"krate":0,"index":870},{"krate":0,"index":872},{"krate":0,"index":874},{"krate":0,"index":876},{"krate":0,"index":878},{"krate":0,"index":880},{"krate":0,"index":882},{"krate":0,"index":884},{"krate":0,"index":886},{"krate":0,"index":888},{"krate":0,"index":890},{"krate":0,"index":892}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":28908,"byte_end":28923,"line_start":336,"line_end":336,"column_start":62,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":230},{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":41096,"byte_end":41105,"line_start":654,"line_end":654,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":267}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":41316,"byte_end":41325,"line_start":663,"line_end":663,"column_start":62,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":41829,"byte_end":41838,"line_start":687,"line_end":687,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":42049,"byte_end":42058,"line_start":696,"line_end":696,"column_start":62,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":292},{"krate":0,"index":294}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":42720,"byte_end":42733,"line_start":725,"line_end":725,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":42913,"byte_end":42926,"line_start":733,"line_end":733,"column_start":58,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":43230,"byte_end":43243,"line_start":744,"line_end":744,"column_start":61,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":319},{"krate":0,"index":321}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":44743,"byte_end":44753,"line_start":795,"line_end":795,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":44923,"byte_end":44933,"line_start":804,"line_end":804,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":333}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":45211,"byte_end":45221,"line_start":814,"line_end":814,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":337},{"krate":0,"index":338}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":45615,"byte_end":45628,"line_start":833,"line_end":833,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":45792,"byte_end":45805,"line_start":842,"line_end":842,"column_start":44,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":346},{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":46114,"byte_end":46127,"line_start":854,"line_end":854,"column_start":55,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":50042,"byte_end":50047,"line_start":37,"line_end":37,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":390},{"krate":0,"index":391}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":50863,"byte_end":50868,"line_start":61,"line_end":61,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":51486,"byte_end":51491,"line_start":75,"line_end":75,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":395}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":51613,"byte_end":51618,"line_start":81,"line_end":81,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":397}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":53026,"byte_end":53036,"line_start":127,"line_end":127,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":53703,"byte_end":53713,"line_start":154,"line_end":154,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":413}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":54193,"byte_end":54203,"line_start":171,"line_end":171,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":54428,"byte_end":54438,"line_start":179,"line_end":179,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":419}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":54687,"byte_end":54697,"line_start":187,"line_end":187,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":424}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":54869,"byte_end":54879,"line_start":195,"line_end":195,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":56898,"byte_end":56908,"line_start":251,"line_end":251,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":57662,"byte_end":57670,"line_start":288,"line_end":288,"column_start":63,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":447}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":58011,"byte_end":58019,"line_start":301,"line_end":301,"column_start":65,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":58366,"byte_end":58374,"line_start":314,"line_end":314,"column_start":71,"column_end":79},"value":"","parent":null,"children":[{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":58720,"byte_end":58728,"line_start":327,"line_end":327,"column_start":72,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":474}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":59065,"byte_end":59073,"line_start":340,"line_end":340,"column_start":63,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":483},{"krate":0,"index":485}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":59550,"byte_end":59558,"line_start":357,"line_end":357,"column_start":66,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":59954,"byte_end":59962,"line_start":372,"line_end":372,"column_start":73,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":503}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":79028,"byte_end":79041,"line_start":911,"line_end":911,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":650},{"krate":0,"index":652}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":79469,"byte_end":79487,"line_start":928,"line_end":928,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":656},{"krate":0,"index":658}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":2969,"byte_end":2972,"line_start":102,"line_end":102,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":677},{"krate":0,"index":678},{"krate":0,"index":679}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":4796,"byte_end":4799,"line_start":170,"line_end":170,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":681}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":5143,"byte_end":5153,"line_start":186,"line_end":186,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":687},{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":691},{"krate":0,"index":693},{"krate":0,"index":695}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":6230,"byte_end":6233,"line_start":233,"line_end":233,"column_start":32,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":699}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":6736,"byte_end":6742,"line_start":251,"line_end":251,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":8158,"byte_end":8164,"line_start":305,"line_end":305,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":712}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":8509,"byte_end":8522,"line_start":321,"line_end":321,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":722}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":9145,"byte_end":9151,"line_start":348,"line_end":348,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":726}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":2090,"byte_end":2096,"line_start":74,"line_end":74,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":25}},{"kind":"Mod","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":2106,"byte_end":2112,"line_start":75,"line_end":75,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":125}},{"kind":"Mod","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":2122,"byte_end":2128,"line_start":76,"line_end":76,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":363}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":9756,"byte_end":9772,"line_start":11,"line_end":11,"column_start":37,"column_end":53},"kind":"SuperTrait","from":{"krate":0,"index":43},"to":{"krate":0,"index":33}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":9832,"byte_end":9833,"line_start":13,"line_end":13,"column_start":56,"column_end":57},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":35},"to":{"krate":0,"index":33}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":11390,"byte_end":11403,"line_start":57,"line_end":57,"column_start":35,"column_end":48},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":728},"to":{"krate":0,"index":43}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":12717,"byte_end":12732,"line_start":100,"line_end":100,"column_start":9,"column_end":24},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":735},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":12959,"byte_end":12974,"line_start":107,"line_end":107,"column_start":38,"column_end":53},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":735},"to":{"krate":0,"index":43}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":14088,"byte_end":14105,"line_start":149,"line_end":149,"column_start":9,"column_end":26},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":747},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":14336,"byte_end":14353,"line_start":156,"line_end":156,"column_start":38,"column_end":55},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":747},"to":{"krate":0,"index":43}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":15581,"byte_end":15600,"line_start":199,"line_end":199,"column_start":9,"column_end":28},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":759},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":15835,"byte_end":15854,"line_start":206,"line_end":206,"column_start":38,"column_end":57},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":759},"to":{"krate":0,"index":43}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":16889,"byte_end":16909,"line_start":244,"line_end":244,"column_start":9,"column_end":29},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":771},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/config.rs","byte_start":17146,"byte_end":17166,"line_start":251,"line_end":251,"column_start":38,"column_end":58},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":771},"to":{"krate":0,"index":43}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":19578,"byte_end":19583,"line_start":46,"line_end":46,"column_start":23,"column_end":28},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":783},"to":{"krate":1,"index":1740}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":20210,"byte_end":20215,"line_start":66,"line_end":66,"column_start":20,"column_end":25},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":783},"to":{"krate":13,"index":7987}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":20327,"byte_end":20332,"line_start":72,"line_end":72,"column_start":18,"column_end":23},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":783},"to":{"krate":2,"index":6843}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":21422,"byte_end":21427,"line_start":94,"line_end":94,"column_start":32,"column_end":37},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":783},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":21606,"byte_end":21611,"line_start":102,"line_end":102,"column_start":26,"column_end":31},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":783},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":21722,"byte_end":21727,"line_start":108,"line_end":108,"column_start":31,"column_end":36},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":783},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":22093,"byte_end":22098,"line_start":118,"line_end":118,"column_start":34,"column_end":39},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":783},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":22548,"byte_end":22553,"line_start":129,"line_end":129,"column_start":42,"column_end":47},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":783},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":23424,"byte_end":23436,"line_start":154,"line_end":154,"column_start":15,"column_end":27},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":811},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":24320,"byte_end":24332,"line_start":187,"line_end":187,"column_start":22,"column_end":34},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":811},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":24536,"byte_end":24548,"line_start":194,"line_end":194,"column_start":14,"column_end":26},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":811},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":25019,"byte_end":25031,"line_start":213,"line_end":213,"column_start":30,"column_end":42},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":811},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":28106,"byte_end":28121,"line_start":309,"line_end":309,"column_start":39,"column_end":54},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":828},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":28389,"byte_end":28404,"line_start":319,"line_end":319,"column_start":65,"column_end":80},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":828},"to":{"krate":13,"index":1185}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":28908,"byte_end":28923,"line_start":336,"line_end":336,"column_start":62,"column_end":77},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":828},"to":{"krate":13,"index":1303}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":41096,"byte_end":41105,"line_start":654,"line_end":654,"column_start":17,"column_end":26},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":259},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":41316,"byte_end":41325,"line_start":663,"line_end":663,"column_start":62,"column_end":71},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":259},"to":{"krate":13,"index":1303}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":41829,"byte_end":41838,"line_start":687,"line_end":687,"column_start":17,"column_end":26},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":276},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":42049,"byte_end":42058,"line_start":696,"line_end":696,"column_start":62,"column_end":71},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":276},"to":{"krate":13,"index":1321}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":42720,"byte_end":42733,"line_start":725,"line_end":725,"column_start":17,"column_end":30},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":295},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":42913,"byte_end":42926,"line_start":733,"line_end":733,"column_start":58,"column_end":71},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":295},"to":{"krate":13,"index":1359}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":43230,"byte_end":43243,"line_start":744,"line_end":744,"column_start":61,"column_end":74},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":295},"to":{"krate":13,"index":1367}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":44443,"byte_end":44447,"line_start":783,"line_end":783,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":3133},"to":{"krate":0,"index":323}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":44743,"byte_end":44753,"line_start":795,"line_end":795,"column_start":15,"column_end":25},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1028},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":44923,"byte_end":44933,"line_start":804,"line_end":804,"column_start":39,"column_end":49},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1028},"to":{"krate":0,"index":323}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":45211,"byte_end":45221,"line_start":814,"line_end":814,"column_start":24,"column_end":34},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1028},"to":{"krate":1,"index":3133}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":45615,"byte_end":45628,"line_start":833,"line_end":833,"column_start":35,"column_end":48},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1035},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":45792,"byte_end":45805,"line_start":842,"line_end":842,"column_start":44,"column_end":57},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1035},"to":{"krate":1,"index":3133}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/decode.rs","byte_start":46114,"byte_end":46127,"line_start":854,"line_end":854,"column_start":55,"column_end":68},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1035},"to":{"krate":0,"index":323}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":50042,"byte_end":50047,"line_start":37,"line_end":37,"column_start":23,"column_end":28},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":1740}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":50863,"byte_end":50868,"line_start":61,"line_end":61,"column_start":18,"column_end":23},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1044},"to":{"krate":2,"index":6843}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":51486,"byte_end":51491,"line_start":75,"line_end":75,"column_start":32,"column_end":37},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1044},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":51613,"byte_end":51618,"line_start":81,"line_end":81,"column_start":28,"column_end":33},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1044},"to":{"krate":13,"index":8568}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":53026,"byte_end":53036,"line_start":127,"line_end":127,"column_start":19,"column_end":29},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1060},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":53703,"byte_end":53713,"line_start":154,"line_end":154,"column_start":16,"column_end":26},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1060},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":54193,"byte_end":54203,"line_start":171,"line_end":171,"column_start":16,"column_end":26},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1060},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":54428,"byte_end":54438,"line_start":179,"line_end":179,"column_start":16,"column_end":26},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1060},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":54687,"byte_end":54697,"line_start":187,"line_end":187,"column_start":28,"column_end":38},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1060},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":54869,"byte_end":54879,"line_start":195,"line_end":195,"column_start":19,"column_end":29},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1060},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":56898,"byte_end":56908,"line_start":251,"line_end":251,"column_start":39,"column_end":49},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1060},"to":{"krate":0,"index":399}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":57662,"byte_end":57670,"line_start":288,"line_end":288,"column_start":63,"column_end":71},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1070},"to":{"krate":13,"index":1696}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":58011,"byte_end":58019,"line_start":301,"line_end":301,"column_start":65,"column_end":73},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1070},"to":{"krate":13,"index":1702}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":58366,"byte_end":58374,"line_start":314,"line_end":314,"column_start":71,"column_end":79},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1070},"to":{"krate":13,"index":1708}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":58720,"byte_end":58728,"line_start":327,"line_end":327,"column_start":72,"column_end":80},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1070},"to":{"krate":13,"index":1714}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":59065,"byte_end":59073,"line_start":340,"line_end":340,"column_start":63,"column_end":71},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1070},"to":{"krate":13,"index":1720}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":59550,"byte_end":59558,"line_start":357,"line_end":357,"column_start":66,"column_end":74},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1070},"to":{"krate":13,"index":1731}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":59954,"byte_end":59962,"line_start":372,"line_end":372,"column_start":73,"column_end":81},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1070},"to":{"krate":13,"index":1738}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":79028,"byte_end":79041,"line_start":911,"line_end":911,"column_start":25,"column_end":38},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1090},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/encode.rs","byte_start":79469,"byte_end":79487,"line_start":928,"line_end":928,"column_start":25,"column_end":43},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1080},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":2969,"byte_end":2972,"line_start":102,"line_end":102,"column_start":6,"column_end":9},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1099},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":4796,"byte_end":4799,"line_start":170,"line_end":170,"column_start":20,"column_end":23},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1099},"to":{"krate":13,"index":1643}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":5143,"byte_end":5153,"line_start":186,"line_end":186,"column_start":32,"column_end":42},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":683},"to":{"krate":13,"index":1247}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":6230,"byte_end":6233,"line_start":233,"line_end":233,"column_start":32,"column_end":35},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1099},"to":{"krate":13,"index":1163}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":6736,"byte_end":6742,"line_start":251,"line_end":251,"column_start":10,"column_end":16},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1109},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":8158,"byte_end":8164,"line_start":305,"line_end":305,"column_start":24,"column_end":30},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1109},"to":{"krate":13,"index":1643}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":8509,"byte_end":8522,"line_start":321,"line_end":321,"column_start":32,"column_end":45},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":714},"to":{"krate":13,"index":1247}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-serde-0.14.4/src/lib.rs","byte_start":9145,"byte_end":9151,"line_start":348,"line_end":348,"column_start":32,"column_end":38},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1109},"to":{"krate":13,"index":1163}}]}