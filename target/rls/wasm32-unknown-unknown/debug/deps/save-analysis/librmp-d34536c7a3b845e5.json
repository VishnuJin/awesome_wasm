{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9","program":"/home/suru/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","rmp","--edition=2018","/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=d34536c7a3b845e5","-C","extra-filename=-d34536c7a3b845e5","--out-dir","/home/suru/Documents/awesome_wasm/target/rls/wasm32-unknown-unknown/debug/deps","--target","wasm32-unknown-unknown","-L","dependency=/home/suru/Documents/awesome_wasm/target/rls/wasm32-unknown-unknown/debug/deps","-L","dependency=/home/suru/Documents/awesome_wasm/target/rls/debug/deps","--extern","byteorder=/home/suru/Documents/awesome_wasm/target/rls/wasm32-unknown-unknown/debug/deps/libbyteorder-5d8a1f0016c3d4ca.rmeta","--extern","num_traits=/home/suru/Documents/awesome_wasm/target/rls/wasm32-unknown-unknown/debug/deps/libnum_traits-c70380acf8981bdc.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/suru/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/suru/Documents/awesome_wasm/target/rls/wasm32-unknown-unknown/debug/deps/librmp-d34536c7a3b845e5.rmeta"},"prelude":{"crate_id":{"name":"rmp","disambiguator":[10113385517999052348,17306090833965413064]},"crate_root":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src","external_crates":[{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[17568117084726535670,18291600942983091792]}},{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[11708719394972853161,10740351817569260753]}},{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[11739846921667929886,4899200388694349132]}},{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[10483847702699074036,9448700856939319914]}},{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[13547053222791032196,5616744556569750145]}},{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[1671359507371111213,8555349780106746800]}},{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[10553035774617414455,11464508503641710306]}},{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12030632638709788125,179720963704046562]}},{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17497149768326916465,12808847267177544861]}},{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[16272633320396836489,9042107923364971302]}},{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[8020748326108297999,16907006358149453028]}},{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","num":12,"id":{"name":"dlmalloc","disambiguator":[14908421788973856670,17807852881498547973]}},{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","num":13,"id":{"name":"byteorder","disambiguator":[15849737753360944621,14209032557546942040]}},{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","num":14,"id":{"name":"num_traits","disambiguator":[10136725111933920827,11215299027748122273]}}],"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":0,"byte_end":5858,"line_start":1,"line_end":158,"column_start":1,"column_end":36}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":62},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6601,"byte_end":6610,"line_start":18,"line_end":18,"column_start":22,"column_end":31},"alias_span":null,"name":"read_nfix","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":64},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6612,"byte_end":6619,"line_start":18,"line_end":18,"column_start":33,"column_end":40},"alias_span":null,"name":"read_i8","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":66},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6621,"byte_end":6629,"line_start":18,"line_end":18,"column_start":42,"column_end":50},"alias_span":null,"name":"read_i16","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":68},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6631,"byte_end":6639,"line_start":18,"line_end":18,"column_start":52,"column_end":60},"alias_span":null,"name":"read_i32","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":70},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6641,"byte_end":6649,"line_start":18,"line_end":18,"column_start":62,"column_end":70},"alias_span":null,"name":"read_i64","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":124},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6673,"byte_end":6682,"line_start":19,"line_end":19,"column_start":22,"column_end":31},"alias_span":null,"name":"read_pfix","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":126},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6684,"byte_end":6691,"line_start":19,"line_end":19,"column_start":33,"column_end":40},"alias_span":null,"name":"read_u8","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":128},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6693,"byte_end":6701,"line_start":19,"line_end":19,"column_start":42,"column_end":50},"alias_span":null,"name":"read_u16","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":130},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6703,"byte_end":6711,"line_start":19,"line_end":19,"column_start":52,"column_end":60},"alias_span":null,"name":"read_u32","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":132},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6713,"byte_end":6721,"line_start":19,"line_end":19,"column_start":62,"column_end":70},"alias_span":null,"name":"read_u64","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":12},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6744,"byte_end":6752,"line_start":20,"line_end":20,"column_start":21,"column_end":29},"alias_span":null,"name":"read_f32","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":14},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6754,"byte_end":6762,"line_start":20,"line_end":20,"column_start":31,"column_end":39},"alias_span":null,"name":"read_f64","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":101},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6785,"byte_end":6797,"line_start":21,"line_end":21,"column_start":21,"column_end":33},"alias_span":null,"name":"read_str_len","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":105},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6799,"byte_end":6807,"line_start":21,"line_end":21,"column_start":35,"column_end":43},"alias_span":null,"name":"read_str","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":112},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6809,"byte_end":6828,"line_start":21,"line_end":21,"column_start":45,"column_end":64},"alias_span":null,"name":"read_str_from_slice","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":111},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6830,"byte_end":6842,"line_start":21,"line_end":21,"column_start":66,"column_end":78},"alias_span":null,"name":"read_str_ref","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":436},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6844,"byte_end":6861,"line_start":21,"line_end":21,"column_start":80,"column_end":97},"alias_span":null,"name":"DecodeStringError","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":26},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6884,"byte_end":6896,"line_start":22,"line_end":22,"column_start":21,"column_end":33},"alias_span":null,"name":"read_fixext1","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":28},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6898,"byte_end":6910,"line_start":22,"line_end":22,"column_start":35,"column_end":47},"alias_span":null,"name":"read_fixext2","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":33},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6912,"byte_end":6924,"line_start":22,"line_end":22,"column_start":49,"column_end":61},"alias_span":null,"name":"read_fixext4","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":38},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6926,"byte_end":6938,"line_start":22,"line_end":22,"column_start":63,"column_end":75},"alias_span":null,"name":"read_fixext8","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":43},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6940,"byte_end":6953,"line_start":22,"line_end":22,"column_start":77,"column_end":90},"alias_span":null,"name":"read_fixext16","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":50},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6955,"byte_end":6968,"line_start":22,"line_end":22,"column_start":92,"column_end":105},"alias_span":null,"name":"read_ext_meta","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":427},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6970,"byte_end":6977,"line_start":22,"line_end":22,"column_start":107,"column_end":114},"alias_span":null,"name":"ExtMeta","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":274},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":42191,"byte_end":42201,"line_start":12,"line_end":12,"column_start":22,"column_end":32},"alias_span":null,"name":"write_nfix","value":"","parent":{"krate":0,"index":228}},{"kind":"Use","ref_id":{"krate":0,"index":276},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":42203,"byte_end":42211,"line_start":12,"line_end":12,"column_start":34,"column_end":42},"alias_span":null,"name":"write_i8","value":"","parent":{"krate":0,"index":228}},{"kind":"Use","ref_id":{"krate":0,"index":278},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":42213,"byte_end":42222,"line_start":12,"line_end":12,"column_start":44,"column_end":53},"alias_span":null,"name":"write_i16","value":"","parent":{"krate":0,"index":228}},{"kind":"Use","ref_id":{"krate":0,"index":280},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":42224,"byte_end":42233,"line_start":12,"line_end":12,"column_start":55,"column_end":64},"alias_span":null,"name":"write_i32","value":"","parent":{"krate":0,"index":228}},{"kind":"Use","ref_id":{"krate":0,"index":282},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":42235,"byte_end":42244,"line_start":12,"line_end":12,"column_start":66,"column_end":75},"alias_span":null,"name":"write_i64","value":"","parent":{"krate":0,"index":228}},{"kind":"Use","ref_id":{"krate":0,"index":284},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":42246,"byte_end":42256,"line_start":12,"line_end":12,"column_start":77,"column_end":87},"alias_span":null,"name":"write_sint","value":"","parent":{"krate":0,"index":228}},{"kind":"Use","ref_id":{"krate":0,"index":311},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":42280,"byte_end":42290,"line_start":13,"line_end":13,"column_start":22,"column_end":32},"alias_span":null,"name":"write_pfix","value":"","parent":{"krate":0,"index":228}},{"kind":"Use","ref_id":{"krate":0,"index":313},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":42292,"byte_end":42300,"line_start":13,"line_end":13,"column_start":34,"column_end":42},"alias_span":null,"name":"write_u8","value":"","parent":{"krate":0,"index":228}},{"kind":"Use","ref_id":{"krate":0,"index":315},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":42302,"byte_end":42311,"line_start":13,"line_end":13,"column_start":44,"column_end":53},"alias_span":null,"name":"write_u16","value":"","parent":{"krate":0,"index":228}},{"kind":"Use","ref_id":{"krate":0,"index":317},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":42313,"byte_end":42322,"line_start":13,"line_end":13,"column_start":55,"column_end":64},"alias_span":null,"name":"write_u32","value":"","parent":{"krate":0,"index":228}},{"kind":"Use","ref_id":{"krate":0,"index":319},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":42324,"byte_end":42333,"line_start":13,"line_end":13,"column_start":66,"column_end":75},"alias_span":null,"name":"write_u64","value":"","parent":{"krate":0,"index":228}},{"kind":"Use","ref_id":{"krate":0,"index":321},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":42335,"byte_end":42345,"line_start":13,"line_end":13,"column_start":77,"column_end":87},"alias_span":null,"name":"write_uint","value":"","parent":{"krate":0,"index":228}},{"kind":"Use","ref_id":{"krate":0,"index":251},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":42368,"byte_end":42377,"line_start":14,"line_end":14,"column_start":21,"column_end":30},"alias_span":null,"name":"write_f32","value":"","parent":{"krate":0,"index":228}},{"kind":"Use","ref_id":{"krate":0,"index":253},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":42379,"byte_end":42388,"line_start":14,"line_end":14,"column_start":32,"column_end":41},"alias_span":null,"name":"write_f64","value":"","parent":{"krate":0,"index":228}},{"kind":"Use","ref_id":{"krate":0,"index":295},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":42411,"byte_end":42424,"line_start":15,"line_end":15,"column_start":21,"column_end":34},"alias_span":null,"name":"write_str_len","value":"","parent":{"krate":0,"index":228}},{"kind":"Use","ref_id":{"krate":0,"index":297},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":42426,"byte_end":42435,"line_start":15,"line_end":15,"column_start":36,"column_end":45},"alias_span":null,"name":"write_str","value":"","parent":{"krate":0,"index":228}},{"kind":"Use","ref_id":{"krate":0,"index":239},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":42458,"byte_end":42471,"line_start":16,"line_end":16,"column_start":21,"column_end":34},"alias_span":null,"name":"write_bin_len","value":"","parent":{"krate":0,"index":228}},{"kind":"Use","ref_id":{"krate":0,"index":241},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":42473,"byte_end":42482,"line_start":16,"line_end":16,"column_start":36,"column_end":45},"alias_span":null,"name":"write_bin","value":"","parent":{"krate":0,"index":228}},{"kind":"Use","ref_id":{"krate":0,"index":497},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":5720,"byte_end":5726,"line_start":155,"line_end":155,"column_start":24,"column_end":30},"alias_span":null,"name":"Marker","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":0,"byte_end":5858,"line_start":1,"line_end":158,"column_start":1,"column_end":36},"name":"","qualname":"::","value":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":228},{"krate":0,"index":414},{"krate":0,"index":425},{"krate":0,"index":426}],"decl_id":null,"docs":" # The Rust MessagePack Library","sig":null,"attributes":[{"value":"/ # The Rust MessagePack Library","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":0,"byte_end":34,"line_start":1,"line_end":1,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":35,"byte_end":38,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ RMP is a pure Rust [MessagePack](http://msgpack.org) implementation of an efficient binary","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":39,"byte_end":133,"line_start":3,"line_end":3,"column_start":1,"column_end":95}},{"value":"/ serialization format. This crate provides low-level core functionality, writers and readers for","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":134,"byte_end":233,"line_start":4,"line_end":4,"column_start":1,"column_end":100}},{"value":"/ primitive values with direct mapping between binary MessagePack format.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":234,"byte_end":309,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":310,"byte_end":313,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ **Warning** this library is still in rapid development and everything may change until 1.0","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":314,"byte_end":408,"line_start":7,"line_end":7,"column_start":1,"column_end":95}},{"value":"/ comes.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":409,"byte_end":419,"line_start":8,"line_end":8,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":420,"byte_end":423,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":424,"byte_end":436,"line_start":10,"line_end":10,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":437,"byte_end":440,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ To use `rmp`, first add this to your `Cargo.toml`:","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":441,"byte_end":495,"line_start":12,"line_end":12,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":496,"byte_end":499,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":500,"byte_end":511,"line_start":14,"line_end":14,"column_start":1,"column_end":12}},{"value":"/ [dependencies.rmp]","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":512,"byte_end":534,"line_start":15,"line_end":15,"column_start":1,"column_end":23}},{"value":"/ rmp = \"^0.8\"","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":535,"byte_end":551,"line_start":16,"line_end":16,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":552,"byte_end":559,"line_start":17,"line_end":17,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":560,"byte_end":563,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Then, add this line to your crate root:","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":564,"byte_end":607,"line_start":19,"line_end":19,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":608,"byte_end":611,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":612,"byte_end":623,"line_start":21,"line_end":21,"column_start":1,"column_end":12}},{"value":"/ extern crate rmp;","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":624,"byte_end":645,"line_start":22,"line_end":22,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":646,"byte_end":653,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":654,"byte_end":657,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ## Features","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":658,"byte_end":673,"line_start":25,"line_end":25,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":674,"byte_end":677,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ - **Convenient API**","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":678,"byte_end":702,"line_start":27,"line_end":27,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":703,"byte_end":706,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/   RMP is designed to be lightweight and straightforward. There are low-level API, which gives you","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":707,"byte_end":808,"line_start":29,"line_end":29,"column_start":1,"column_end":102}},{"value":"/   full control on data encoding/decoding process and makes no heap allocations. On the other hand","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":809,"byte_end":910,"line_start":30,"line_end":30,"column_start":1,"column_end":102}},{"value":"/   there are high-level API, which provides you convenient interface using Rust standard library and","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":911,"byte_end":1014,"line_start":31,"line_end":31,"column_start":1,"column_end":104}},{"value":"/   compiler reflection, allowing to encode/decode structures using `derive` attribute.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":1015,"byte_end":1104,"line_start":32,"line_end":32,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":1105,"byte_end":1108,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ - **Zero-copy value decoding**","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":1109,"byte_end":1143,"line_start":34,"line_end":34,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":1144,"byte_end":1147,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/   RMP allows to decode bytes from a buffer in a zero-copy manner easily and blazingly fast, while Rust","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":1148,"byte_end":1254,"line_start":36,"line_end":36,"column_start":1,"column_end":107}},{"value":"/   static checks guarantees that the data will be valid until buffer lives.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":1255,"byte_end":1333,"line_start":37,"line_end":37,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":1334,"byte_end":1337,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ - **Clear error handling**","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":1338,"byte_end":1368,"line_start":39,"line_end":39,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":1369,"byte_end":1372,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/   RMP's error system guarantees that you never receive an error enum with unreachable variant.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":1373,"byte_end":1471,"line_start":41,"line_end":41,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":1472,"byte_end":1475,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ - **Robust and tested**","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":1476,"byte_end":1503,"line_start":43,"line_end":43,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":1504,"byte_end":1507,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/   This project is developed using TDD and CI, so any found bugs will be fixed without breaking","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":1508,"byte_end":1606,"line_start":45,"line_end":45,"column_start":1,"column_end":99}},{"value":"/   existing functionality.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":1607,"byte_end":1636,"line_start":46,"line_end":46,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":1637,"byte_end":1640,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ ## Detailed","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":1641,"byte_end":1656,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":1657,"byte_end":1660,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ This crate represents the very basic functionality needed to work with MessagePack format.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":1661,"byte_end":1755,"line_start":50,"line_end":50,"column_start":1,"column_end":95}},{"value":"/ Ideologically it is developed as a basis for building high-level abstractions.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":1756,"byte_end":1838,"line_start":51,"line_end":51,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":1839,"byte_end":1842,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ Currently there are two large modules: encode and decode. More detail you can find in the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":1843,"byte_end":1936,"line_start":53,"line_end":53,"column_start":1,"column_end":94}},{"value":"/ corresponding sections.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":1937,"byte_end":1964,"line_start":54,"line_end":54,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":1965,"byte_end":1968,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ Formally every MessagePack message consists of some marker encapsulating a data type and the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":1969,"byte_end":2065,"line_start":56,"line_end":56,"column_start":1,"column_end":97}},{"value":"/ data itself. Sometimes there are no separate data chunk, for example for booleans. In these","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":2066,"byte_end":2161,"line_start":57,"line_end":57,"column_start":1,"column_end":96}},{"value":"/ cases a marker contains the value. For example, the `true` value is encoded as `0xc3`.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":2162,"byte_end":2252,"line_start":58,"line_end":58,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":2253,"byte_end":2256,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":2257,"byte_end":2264,"line_start":60,"line_end":60,"column_start":1,"column_end":8}},{"value":"/ let mut buf = Vec::new();","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":2265,"byte_end":2294,"line_start":61,"line_end":61,"column_start":1,"column_end":30}},{"value":"/ rmp::encode::write_bool(&mut buf, true).unwrap();","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":2295,"byte_end":2348,"line_start":62,"line_end":62,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":2349,"byte_end":2352,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ assert_eq!([0xc3], buf[..]);","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":2353,"byte_end":2385,"line_start":64,"line_end":64,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":2386,"byte_end":2393,"line_start":65,"line_end":65,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":2394,"byte_end":2397,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ Sometimes a single value can be encoded in multiple ways. For example a value of `42` can be","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":2398,"byte_end":2494,"line_start":67,"line_end":67,"column_start":1,"column_end":97}},{"value":"/ represented as: `[0x2a], [0xcc, 0x2a], [0xcd, 0x00, 0x2a]` and so on, and all of them are","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":2495,"byte_end":2588,"line_start":68,"line_end":68,"column_start":1,"column_end":94}},{"value":"/ considered as valid representations. To allow fine-grained control over encoding such values","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":2589,"byte_end":2685,"line_start":69,"line_end":69,"column_start":1,"column_end":97}},{"value":"/ the library provides direct mapping functions.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":2686,"byte_end":2736,"line_start":70,"line_end":70,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":2737,"byte_end":2740,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":2741,"byte_end":2748,"line_start":72,"line_end":72,"column_start":1,"column_end":8}},{"value":"/ let mut bufs = vec![vec![]; 5];","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":2749,"byte_end":2784,"line_start":73,"line_end":73,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":2785,"byte_end":2788,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ rmp::encode::write_pfix(&mut bufs[0], 42).unwrap();","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":2789,"byte_end":2844,"line_start":75,"line_end":75,"column_start":1,"column_end":56}},{"value":"/ rmp::encode::write_u8(&mut bufs[1], 42).unwrap();","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":2845,"byte_end":2898,"line_start":76,"line_end":76,"column_start":1,"column_end":54}},{"value":"/ rmp::encode::write_u16(&mut bufs[2], 42).unwrap();","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":2899,"byte_end":2953,"line_start":77,"line_end":77,"column_start":1,"column_end":55}},{"value":"/ rmp::encode::write_u32(&mut bufs[3], 42).unwrap();","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":2954,"byte_end":3008,"line_start":78,"line_end":78,"column_start":1,"column_end":55}},{"value":"/ rmp::encode::write_u64(&mut bufs[4], 42).unwrap();","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":3009,"byte_end":3063,"line_start":79,"line_end":79,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":3064,"byte_end":3067,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ assert_eq!([0x2a], bufs[0][..]);","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":3068,"byte_end":3104,"line_start":81,"line_end":81,"column_start":1,"column_end":37}},{"value":"/ assert_eq!([0xcc, 0x2a], bufs[1][..]);","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":3105,"byte_end":3147,"line_start":82,"line_end":82,"column_start":1,"column_end":43}},{"value":"/ assert_eq!([0xcd, 0x00, 0x2a], bufs[2][..]);","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":3148,"byte_end":3196,"line_start":83,"line_end":83,"column_start":1,"column_end":49}},{"value":"/ assert_eq!([0xce, 0x00, 0x00, 0x00, 0x2a], bufs[3][..]);","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":3197,"byte_end":3257,"line_start":84,"line_end":84,"column_start":1,"column_end":61}},{"value":"/ assert_eq!([0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a], bufs[4][..]);","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":3258,"byte_end":3342,"line_start":85,"line_end":85,"column_start":1,"column_end":85}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":3343,"byte_end":3350,"line_start":86,"line_end":86,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":3351,"byte_end":3354,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ But they aren't planned to be widely used. Instead we often need to encode bytes compactly to","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":3355,"byte_end":3452,"line_start":88,"line_end":88,"column_start":1,"column_end":98}},{"value":"/ save space. In these cases RMP provides functions that guarantee that for encoding the most","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":3453,"byte_end":3548,"line_start":89,"line_end":89,"column_start":1,"column_end":96}},{"value":"/ compact representation will be chosen.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":3549,"byte_end":3591,"line_start":90,"line_end":90,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":3592,"byte_end":3595,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":3596,"byte_end":3603,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"/ let mut buf = Vec::new();","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":3604,"byte_end":3633,"line_start":93,"line_end":93,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":3634,"byte_end":3637,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ rmp::encode::write_sint(&mut buf, 300).unwrap();","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":3638,"byte_end":3690,"line_start":95,"line_end":95,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":3691,"byte_end":3694,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ assert_eq!([0xcd, 0x1, 0x2c], buf[..]);","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":3695,"byte_end":3738,"line_start":97,"line_end":97,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":3739,"byte_end":3746,"line_start":98,"line_end":98,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":3747,"byte_end":3750,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ On the other hand for deserialization it is not matter in which representation the value is","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":3751,"byte_end":3846,"line_start":100,"line_end":100,"column_start":1,"column_end":96}},{"value":"/ encoded - RMP deals with all of them.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":3847,"byte_end":3888,"line_start":101,"line_end":101,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":3889,"byte_end":3892,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ Sometimes you know the exact type representation and want to enforce the deserialization process","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":3893,"byte_end":3993,"line_start":103,"line_end":103,"column_start":1,"column_end":101}},{"value":"/ to make it strongly type safe.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":3994,"byte_end":4028,"line_start":104,"line_end":104,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":4029,"byte_end":4032,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":4033,"byte_end":4040,"line_start":106,"line_end":106,"column_start":1,"column_end":8}},{"value":"/ let buf = [0xcd, 0x1, 0x2c];","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":4041,"byte_end":4073,"line_start":107,"line_end":107,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":4074,"byte_end":4077,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(300, rmp::decode::read_u16(&mut &buf[..]).unwrap());","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":4078,"byte_end":4145,"line_start":109,"line_end":109,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":4146,"byte_end":4153,"line_start":110,"line_end":110,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":4154,"byte_end":4157,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ However if you try to decode such bytearray as other integer type, for example `u32`, there will","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":4158,"byte_end":4258,"line_start":112,"line_end":112,"column_start":1,"column_end":101}},{"value":"/ be type mismatch error.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":4259,"byte_end":4286,"line_start":113,"line_end":113,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":4287,"byte_end":4290,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":4291,"byte_end":4298,"line_start":115,"line_end":115,"column_start":1,"column_end":8}},{"value":"/ let buf = [0xcd, 0x1, 0x2c];","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":4299,"byte_end":4331,"line_start":116,"line_end":116,"column_start":1,"column_end":33}},{"value":"/ rmp::decode::read_u32(&mut &buf[..]).err().unwrap();","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":4332,"byte_end":4388,"line_start":117,"line_end":117,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":4389,"byte_end":4396,"line_start":118,"line_end":118,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":4397,"byte_end":4400,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ But sometimes all you want is just to encode an integer that *must* fit in the specified type","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":4401,"byte_end":4498,"line_start":120,"line_end":120,"column_start":1,"column_end":98}},{"value":"/ no matter how it was encoded. RMP provides [`such`][read_int] function to ease integration with","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":4499,"byte_end":4598,"line_start":121,"line_end":121,"column_start":1,"column_end":100}},{"value":"/ other MessagePack libraries.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":4599,"byte_end":4631,"line_start":122,"line_end":122,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":4632,"byte_end":4635,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":4636,"byte_end":4643,"line_start":124,"line_end":124,"column_start":1,"column_end":8}},{"value":"/ let buf = [0xcd, 0x1, 0x2c];","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":4644,"byte_end":4676,"line_start":125,"line_end":125,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":4677,"byte_end":4680,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(300i16, rmp::decode::read_int(&mut &buf[..]).unwrap());","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":4681,"byte_end":4751,"line_start":127,"line_end":127,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(300i32, rmp::decode::read_int(&mut &buf[..]).unwrap());","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":4752,"byte_end":4822,"line_start":128,"line_end":128,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(300i64, rmp::decode::read_int(&mut &buf[..]).unwrap());","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":4823,"byte_end":4893,"line_start":129,"line_end":129,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(300u16, rmp::decode::read_int(&mut &buf[..]).unwrap());","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":4894,"byte_end":4964,"line_start":130,"line_end":130,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(300u32, rmp::decode::read_int(&mut &buf[..]).unwrap());","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":4965,"byte_end":5035,"line_start":131,"line_end":131,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(300u64, rmp::decode::read_int(&mut &buf[..]).unwrap());","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":5036,"byte_end":5106,"line_start":132,"line_end":132,"column_start":1,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":5107,"byte_end":5114,"line_start":133,"line_end":133,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":5115,"byte_end":5118,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ ## API","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":5119,"byte_end":5129,"line_start":135,"line_end":135,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":5130,"byte_end":5133,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ Almost all API are represented as pure functions, which accepts a generic `Write` or `Read` and","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":5134,"byte_end":5233,"line_start":137,"line_end":137,"column_start":1,"column_end":100}},{"value":"/ the value to be encoded/decoded. For example let's do a round trip for π number.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":5234,"byte_end":5319,"line_start":138,"line_end":138,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":5320,"byte_end":5323,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":5324,"byte_end":5331,"line_start":140,"line_end":140,"column_start":1,"column_end":8}},{"value":"/ let pi = std::f64::consts::PI;","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":5332,"byte_end":5366,"line_start":141,"line_end":141,"column_start":1,"column_end":35}},{"value":"/ let mut buf = Vec::new();","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":5367,"byte_end":5396,"line_start":142,"line_end":142,"column_start":1,"column_end":30}},{"value":"/ rmp::encode::write_f64(&mut buf, pi).unwrap();","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":5397,"byte_end":5447,"line_start":143,"line_end":143,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":5448,"byte_end":5451,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ assert_eq!([0xcb, 0x40, 0x9, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18], buf[..]);","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":5452,"byte_end":5531,"line_start":145,"line_end":145,"column_start":1,"column_end":80}},{"value":"/ assert_eq!(pi, rmp::decode::read_f64(&mut &buf[..]).unwrap());","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":5532,"byte_end":5598,"line_start":146,"line_end":146,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":5599,"byte_end":5606,"line_start":147,"line_end":147,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":5607,"byte_end":5610,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ [read_int]: decode/fn.read_int.html","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":5611,"byte_end":5650,"line_start":149,"line_end":149,"column_start":1,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":3},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"decode","qualname":"::decode","value":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","parent":null,"children":[{"krate":0,"index":4},{"krate":0,"index":16},{"krate":0,"index":52},{"krate":0,"index":72},{"krate":0,"index":114},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":457},{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":472},{"krate":0,"index":175},{"krate":0,"index":177},{"krate":0,"index":179},{"krate":0,"index":181},{"krate":0,"index":183},{"krate":0,"index":185},{"krate":0,"index":187},{"krate":0,"index":474},{"krate":0,"index":486},{"krate":0,"index":189},{"krate":0,"index":191},{"krate":0,"index":193},{"krate":0,"index":195},{"krate":0,"index":197},{"krate":0,"index":199},{"krate":0,"index":201},{"krate":0,"index":203},{"krate":0,"index":205},{"krate":0,"index":207},{"krate":0,"index":209},{"krate":0,"index":211},{"krate":0,"index":213},{"krate":0,"index":215},{"krate":0,"index":217},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":226}],"decl_id":null,"docs":" Provides various functions and structs for MessagePack decoding.","sig":null,"attributes":[{"value":"/ Provides various functions and structs for MessagePack decoding.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":5860,"byte_end":5928,"line_start":1,"line_end":1,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":5929,"byte_end":5932,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Most of the function defined in this module will silently handle interruption error (EINTR)","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":5933,"byte_end":6028,"line_start":3,"line_end":3,"column_start":1,"column_end":96}},{"value":"/ received from the given `Read` to be in consistent state with the `Write::write_all` method in","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6029,"byte_end":6127,"line_start":4,"line_end":4,"column_start":1,"column_end":99}},{"value":"/ the standard library.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6128,"byte_end":6153,"line_start":5,"line_end":5,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6154,"byte_end":6157,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Any other error would immediately interrupt the parsing process. If your reader can results in","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6158,"byte_end":6256,"line_start":7,"line_end":7,"column_start":1,"column_end":99}},{"value":"/ I/O error and simultaneously be a recoverable state (for example, when reading from","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6257,"byte_end":6344,"line_start":8,"line_end":8,"column_start":1,"column_end":88}},{"value":"/ non-blocking socket and it returns EWOULDBLOCK) be sure that you buffer the data externally","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6345,"byte_end":6440,"line_start":9,"line_end":9,"column_start":1,"column_end":96}},{"value":"/ to avoid data loss (using `BufRead` readers with manual consuming or some other way).","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":6441,"byte_end":6530,"line_start":10,"line_end":10,"column_start":1,"column_end":90}}]},{"kind":"Function","id":{"krate":0,"index":12},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":19746,"byte_end":19754,"line_start":22,"line_end":22,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::decode::dec::read_f32","value":"pub fn read_f32<R: Read>(&mut R) -> Result<f32, ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to read exactly 5 bytes from the given reader and to decode them as `f32` value.","sig":null,"attributes":[{"value":"/ Attempts to read exactly 5 bytes from the given reader and to decode them as `f32` value.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":19132,"byte_end":19225,"line_start":6,"line_end":6,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":19226,"byte_end":19229,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ The first byte should be the marker and the others should represent the data itself.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":19230,"byte_end":19318,"line_start":8,"line_end":8,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":19319,"byte_end":19322,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":19323,"byte_end":19335,"line_start":10,"line_end":10,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":19336,"byte_end":19339,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueReadError` on any I/O error while reading either the marker or","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":19340,"byte_end":19438,"line_start":12,"line_end":12,"column_start":1,"column_end":99}},{"value":"/ the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":19439,"byte_end":19452,"line_start":13,"line_end":13,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":19453,"byte_end":19456,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ It also returns `ValueReadError::TypeMismatch` if the actual type is not equal with the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":19457,"byte_end":19548,"line_start":15,"line_end":15,"column_start":1,"column_end":92}},{"value":"/ expected one, indicating you with the actual type.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":19549,"byte_end":19603,"line_start":16,"line_end":16,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":19604,"byte_end":19607,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":19608,"byte_end":19618,"line_start":18,"line_end":18,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":19619,"byte_end":19622,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This function will silently retry on every EINTR received from the underlying `Read` until","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":19623,"byte_end":19717,"line_start":20,"line_end":20,"column_start":1,"column_end":95}},{"value":"/ successful read.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":19718,"byte_end":19738,"line_start":21,"line_end":21,"column_start":1,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":14},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":20569,"byte_end":20577,"line_start":45,"line_end":45,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::decode::dec::read_f64","value":"pub fn read_f64<R: Read>(&mut R) -> Result<f64, ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to read exactly 9 bytes from the given reader and to decode them as `f64` value.","sig":null,"attributes":[{"value":"/ Attempts to read exactly 9 bytes from the given reader and to decode them as `f64` value.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":19955,"byte_end":20048,"line_start":29,"line_end":29,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":20049,"byte_end":20052,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ The first byte should be the marker and the others should represent the data itself.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":20053,"byte_end":20141,"line_start":31,"line_end":31,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":20142,"byte_end":20145,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":20146,"byte_end":20158,"line_start":33,"line_end":33,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":20159,"byte_end":20162,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueReadError` on any I/O error while reading either the marker or","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":20163,"byte_end":20261,"line_start":35,"line_end":35,"column_start":1,"column_end":99}},{"value":"/ the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":20262,"byte_end":20275,"line_start":36,"line_end":36,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":20276,"byte_end":20279,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ It also returns `ValueReadError::TypeMismatch` if the actual type is not equal with the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":20280,"byte_end":20371,"line_start":38,"line_end":38,"column_start":1,"column_end":92}},{"value":"/ expected one, indicating you with the actual type.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":20372,"byte_end":20426,"line_start":39,"line_end":39,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":20427,"byte_end":20430,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":20431,"byte_end":20441,"line_start":41,"line_end":41,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":20442,"byte_end":20445,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ This function will silently retry on every EINTR received from the underlying `Read` until","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":20446,"byte_end":20540,"line_start":43,"line_end":43,"column_start":1,"column_end":95}},{"value":"/ successful read.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/dec.rs","byte_start":20541,"byte_end":20561,"line_start":44,"line_end":44,"column_start":1,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":26},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":21564,"byte_end":21576,"line_start":23,"line_end":23,"column_start":8,"column_end":20},"name":"read_fixext1","qualname":"::decode::ext::read_fixext1","value":"pub fn read_fixext1<R: Read>(&mut R) -> Result<(i8, u8), ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to read exactly 3 bytes from the given reader and interpret them as a fixext1 type\n with data attached.","sig":null,"attributes":[{"value":"/ Attempts to read exactly 3 bytes from the given reader and interpret them as a fixext1 type","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":20918,"byte_end":21013,"line_start":6,"line_end":6,"column_start":1,"column_end":96}},{"value":"/ with data attached.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":21014,"byte_end":21037,"line_start":7,"line_end":7,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":21038,"byte_end":21041,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ According to the MessagePack specification, a fixext1 stores an integer and a byte array whose","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":21042,"byte_end":21140,"line_start":9,"line_end":9,"column_start":1,"column_end":99}},{"value":"/ length is 1 byte. Its marker byte is `0xd4`.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":21141,"byte_end":21189,"line_start":10,"line_end":10,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":21190,"byte_end":21193,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Note, that this function copies a byte array from the reader to the output `u8` variable.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":21194,"byte_end":21287,"line_start":12,"line_end":12,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":21288,"byte_end":21291,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":21292,"byte_end":21304,"line_start":14,"line_end":14,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":21305,"byte_end":21308,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueReadError` on any I/O error while reading either the marker or","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":21309,"byte_end":21407,"line_start":16,"line_end":16,"column_start":1,"column_end":99}},{"value":"/ the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":21408,"byte_end":21421,"line_start":17,"line_end":17,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":21422,"byte_end":21425,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":21426,"byte_end":21436,"line_start":19,"line_end":19,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":21437,"byte_end":21440,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This function will silently retry on every EINTR received from the underlying `Read` until","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":21441,"byte_end":21535,"line_start":21,"line_end":21,"column_start":1,"column_end":95}},{"value":"/ successful read.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":21536,"byte_end":21556,"line_start":22,"line_end":22,"column_start":1,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":28},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":22447,"byte_end":22459,"line_start":47,"line_end":47,"column_start":8,"column_end":20},"name":"read_fixext2","qualname":"::decode::ext::read_fixext2","value":"pub fn read_fixext2<R: Read>(&mut R) -> Result<(i8, [u8; ]), ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to read exactly 4 bytes from the given reader and interpret them as a fixext2 type\n with data attached.","sig":null,"attributes":[{"value":"/ Attempts to read exactly 4 bytes from the given reader and interpret them as a fixext2 type","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":21883,"byte_end":21978,"line_start":34,"line_end":34,"column_start":1,"column_end":96}},{"value":"/ with data attached.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":21979,"byte_end":22002,"line_start":35,"line_end":35,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":22003,"byte_end":22006,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ According to the MessagePack specification, a fixext2 stores an integer and a byte array whose","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":22007,"byte_end":22105,"line_start":37,"line_end":37,"column_start":1,"column_end":99}},{"value":"/ length is 2 bytes. Its marker byte is `0xd5`.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":22106,"byte_end":22155,"line_start":38,"line_end":38,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":22156,"byte_end":22159,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ Note, that this function copies a byte array from the reader to the output buffer, which is","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":22160,"byte_end":22255,"line_start":40,"line_end":40,"column_start":1,"column_end":96}},{"value":"/ unlikely if you want zero-copy functionality.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":22256,"byte_end":22305,"line_start":41,"line_end":41,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":22306,"byte_end":22309,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":22310,"byte_end":22322,"line_start":43,"line_end":43,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":22323,"byte_end":22326,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueReadError` on any I/O error while reading either the marker or","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":22327,"byte_end":22425,"line_start":45,"line_end":45,"column_start":1,"column_end":99}},{"value":"/ the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":22426,"byte_end":22439,"line_start":46,"line_end":46,"column_start":1,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":33},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":23323,"byte_end":23335,"line_start":70,"line_end":70,"column_start":8,"column_end":20},"name":"read_fixext4","qualname":"::decode::ext::read_fixext4","value":"pub fn read_fixext4<R: Read>(&mut R) -> Result<(i8, [u8; ]), ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to read exactly 6 bytes from the given reader and interpret them as a fixext4 type\n with data attached.","sig":null,"attributes":[{"value":"/ Attempts to read exactly 6 bytes from the given reader and interpret them as a fixext4 type","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":22759,"byte_end":22854,"line_start":57,"line_end":57,"column_start":1,"column_end":96}},{"value":"/ with data attached.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":22855,"byte_end":22878,"line_start":58,"line_end":58,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":22879,"byte_end":22882,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ According to the MessagePack specification, a fixext4 stores an integer and a byte array whose","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":22883,"byte_end":22981,"line_start":60,"line_end":60,"column_start":1,"column_end":99}},{"value":"/ length is 4 bytes. Its marker byte is `0xd6`.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":22982,"byte_end":23031,"line_start":61,"line_end":61,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":23032,"byte_end":23035,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ Note, that this function copies a byte array from the reader to the output buffer, which is","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":23036,"byte_end":23131,"line_start":63,"line_end":63,"column_start":1,"column_end":96}},{"value":"/ unlikely if you want zero-copy functionality.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":23132,"byte_end":23181,"line_start":64,"line_end":64,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":23182,"byte_end":23185,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":23186,"byte_end":23198,"line_start":66,"line_end":66,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":23199,"byte_end":23202,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueReadError` on any I/O error while reading either the marker or","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":23203,"byte_end":23301,"line_start":68,"line_end":68,"column_start":1,"column_end":99}},{"value":"/ the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":23302,"byte_end":23315,"line_start":69,"line_end":69,"column_start":1,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":38},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":24200,"byte_end":24212,"line_start":93,"line_end":93,"column_start":8,"column_end":20},"name":"read_fixext8","qualname":"::decode::ext::read_fixext8","value":"pub fn read_fixext8<R: Read>(&mut R) -> Result<(i8, [u8; ]), ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to read exactly 10 bytes from the given reader and interpret them as a fixext8 type\n with data attached.","sig":null,"attributes":[{"value":"/ Attempts to read exactly 10 bytes from the given reader and interpret them as a fixext8 type","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":23635,"byte_end":23731,"line_start":80,"line_end":80,"column_start":1,"column_end":97}},{"value":"/ with data attached.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":23732,"byte_end":23755,"line_start":81,"line_end":81,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":23756,"byte_end":23759,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ According to the MessagePack specification, a fixext8 stores an integer and a byte array whose","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":23760,"byte_end":23858,"line_start":83,"line_end":83,"column_start":1,"column_end":99}},{"value":"/ length is 8 bytes. Its marker byte is `0xd7`.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":23859,"byte_end":23908,"line_start":84,"line_end":84,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":23909,"byte_end":23912,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ Note, that this function copies a byte array from the reader to the output buffer, which is","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":23913,"byte_end":24008,"line_start":86,"line_end":86,"column_start":1,"column_end":96}},{"value":"/ unlikely if you want zero-copy functionality.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":24009,"byte_end":24058,"line_start":87,"line_end":87,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":24059,"byte_end":24062,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":24063,"byte_end":24075,"line_start":89,"line_end":89,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":24076,"byte_end":24079,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueReadError` on any I/O error while reading either the marker or","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":24080,"byte_end":24178,"line_start":91,"line_end":91,"column_start":1,"column_end":99}},{"value":"/ the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":24179,"byte_end":24192,"line_start":92,"line_end":92,"column_start":1,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":43},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":25080,"byte_end":25093,"line_start":116,"line_end":116,"column_start":8,"column_end":21},"name":"read_fixext16","qualname":"::decode::ext::read_fixext16","value":"pub fn read_fixext16<R: Read>(&mut R) -> Result<(i8, [u8; ]), ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to read exactly 18 bytes from the given reader and interpret them as a fixext16 type\n with data attached.","sig":null,"attributes":[{"value":"/ Attempts to read exactly 18 bytes from the given reader and interpret them as a fixext16 type","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":24512,"byte_end":24609,"line_start":103,"line_end":103,"column_start":1,"column_end":98}},{"value":"/ with data attached.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":24610,"byte_end":24633,"line_start":104,"line_end":104,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":24634,"byte_end":24637,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ According to the MessagePack specification, a fixext16 stores an integer and a byte array whose","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":24638,"byte_end":24737,"line_start":106,"line_end":106,"column_start":1,"column_end":100}},{"value":"/ length is 16 bytes. Its marker byte is `0xd8`.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":24738,"byte_end":24788,"line_start":107,"line_end":107,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":24789,"byte_end":24792,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ Note, that this function copies a byte array from the reader to the output buffer, which is","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":24793,"byte_end":24888,"line_start":109,"line_end":109,"column_start":1,"column_end":96}},{"value":"/ unlikely if you want zero-copy functionality.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":24889,"byte_end":24938,"line_start":110,"line_end":110,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":24939,"byte_end":24942,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":24943,"byte_end":24955,"line_start":112,"line_end":112,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":24956,"byte_end":24959,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueReadError` on any I/O error while reading either the marker or","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":24960,"byte_end":25058,"line_start":114,"line_end":114,"column_start":1,"column_end":99}},{"value":"/ the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":25059,"byte_end":25072,"line_start":115,"line_end":115,"column_start":1,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":427},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":26120,"byte_end":26127,"line_start":146,"line_end":146,"column_start":12,"column_end":19},"name":"ExtMeta","qualname":"::decode::ext::ExtMeta","value":"ExtMeta { typeid, size }","parent":null,"children":[{"krate":0,"index":428},{"krate":0,"index":429}],"decl_id":null,"docs":" Extension type meta information.","sig":null,"attributes":[{"value":"/ Extension type meta information.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":25646,"byte_end":25682,"line_start":134,"line_end":134,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":25683,"byte_end":25686,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ Extension represents a tuple of type information and a byte array where type information is an","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":25687,"byte_end":25785,"line_start":136,"line_end":136,"column_start":1,"column_end":99}},{"value":"/ integer whose meaning is defined by applications.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":25786,"byte_end":25839,"line_start":137,"line_end":137,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":25840,"byte_end":25843,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ Applications can assign 0 to 127 to store application-specific type information.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":25844,"byte_end":25928,"line_start":139,"line_end":139,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":25929,"byte_end":25932,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":25933,"byte_end":25943,"line_start":141,"line_end":141,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":25944,"byte_end":25947,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ MessagePack reserves -1 to -128 for future extension to add predefined types which will be","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":25948,"byte_end":26042,"line_start":143,"line_end":143,"column_start":1,"column_end":95}},{"value":"/ described in separated documents.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":26043,"byte_end":26080,"line_start":144,"line_end":144,"column_start":1,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":428},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":26164,"byte_end":26170,"line_start":148,"line_end":148,"column_start":9,"column_end":15},"name":"typeid","qualname":"::decode::ext::ExtMeta::typeid","value":"i8","parent":{"krate":0,"index":427},"children":[],"decl_id":null,"docs":" Type information.\n","sig":null,"attributes":[{"value":"/ Type information.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":26134,"byte_end":26155,"line_start":147,"line_end":147,"column_start":5,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":429},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":26209,"byte_end":26213,"line_start":150,"line_end":150,"column_start":9,"column_end":13},"name":"size","qualname":"::decode::ext::ExtMeta::size","value":"u32","parent":{"krate":0,"index":427},"children":[],"decl_id":null,"docs":" Byte array size.\n","sig":null,"attributes":[{"value":"/ Byte array size.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":26180,"byte_end":26200,"line_start":149,"line_end":149,"column_start":5,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":50},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/ext.rs","byte_start":26230,"byte_end":26243,"line_start":153,"line_end":153,"column_start":8,"column_end":21},"name":"read_ext_meta","qualname":"::decode::ext::read_ext_meta","value":"pub fn read_ext_meta<R: Read>(&mut R) -> Result<ExtMeta, ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":62},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":27731,"byte_end":27740,"line_start":24,"line_end":24,"column_start":8,"column_end":17},"name":"read_nfix","qualname":"::decode::sint::read_nfix","value":"pub fn read_nfix<R: Read>(&mut R) -> Result<i8, ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to read a single byte from the given reader and to decode it as a negative fixnum\n value.","sig":null,"attributes":[{"value":"/ Attempts to read a single byte from the given reader and to decode it as a negative fixnum","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":26973,"byte_end":27067,"line_start":6,"line_end":6,"column_start":1,"column_end":95}},{"value":"/ value.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":27068,"byte_end":27078,"line_start":7,"line_end":7,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":27079,"byte_end":27082,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ According to the MessagePack specification, a negative fixed integer value is represented using","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":27083,"byte_end":27182,"line_start":9,"line_end":9,"column_start":1,"column_end":100}},{"value":"/ a single byte in `[0xe0; 0xff]` range inclusively, prepended with a special marker mask.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":27183,"byte_end":27275,"line_start":10,"line_end":10,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":27276,"byte_end":27279,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":27280,"byte_end":27292,"line_start":12,"line_end":12,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":27293,"byte_end":27296,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueReadError` on any I/O error while reading the marker,","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":27297,"byte_end":27386,"line_start":14,"line_end":14,"column_start":1,"column_end":90}},{"value":"/ except the EINTR, which is handled internally.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":27387,"byte_end":27437,"line_start":15,"line_end":15,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":27438,"byte_end":27441,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ It also returns `ValueReadError::TypeMismatch` if the actual type is not equal with the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":27442,"byte_end":27533,"line_start":17,"line_end":17,"column_start":1,"column_end":92}},{"value":"/ expected one, indicating you with the actual type.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":27534,"byte_end":27588,"line_start":18,"line_end":18,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":27589,"byte_end":27592,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":27593,"byte_end":27603,"line_start":20,"line_end":20,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":27604,"byte_end":27607,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ This function will silently retry on every EINTR received from the underlying `Read` until","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":27608,"byte_end":27702,"line_start":22,"line_end":22,"column_start":1,"column_end":95}},{"value":"/ successful read.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":27703,"byte_end":27723,"line_start":23,"line_end":23,"column_start":1,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":64},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":28550,"byte_end":28557,"line_start":47,"line_end":47,"column_start":8,"column_end":15},"name":"read_i8","qualname":"::decode::sint::read_i8","value":"pub fn read_i8<R: Read>(&mut R) -> Result<i8, ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to read exactly 2 bytes from the given reader and to decode them as `i8` value.","sig":null,"attributes":[{"value":"/ Attempts to read exactly 2 bytes from the given reader and to decode them as `i8` value.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":27933,"byte_end":28025,"line_start":31,"line_end":31,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":28026,"byte_end":28029,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ The first byte should be the marker and the second one should represent the data itself.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":28030,"byte_end":28122,"line_start":33,"line_end":33,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":28123,"byte_end":28126,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":28127,"byte_end":28139,"line_start":35,"line_end":35,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":28140,"byte_end":28143,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueReadError` on any I/O error while reading either the marker or","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":28144,"byte_end":28242,"line_start":37,"line_end":37,"column_start":1,"column_end":99}},{"value":"/ the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":28243,"byte_end":28256,"line_start":38,"line_end":38,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":28257,"byte_end":28260,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ It also returns `ValueReadError::TypeMismatch` if the actual type is not equal with the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":28261,"byte_end":28352,"line_start":40,"line_end":40,"column_start":1,"column_end":92}},{"value":"/ expected one, indicating you with the actual type.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":28353,"byte_end":28407,"line_start":41,"line_end":41,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":28408,"byte_end":28411,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":28412,"byte_end":28422,"line_start":43,"line_end":43,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":28423,"byte_end":28426,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ This function will silently retry on every EINTR received from the underlying `Read` until","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":28427,"byte_end":28521,"line_start":45,"line_end":45,"column_start":1,"column_end":95}},{"value":"/ successful read.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":28522,"byte_end":28542,"line_start":46,"line_end":46,"column_start":1,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":66},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":29364,"byte_end":29372,"line_start":70,"line_end":70,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::decode::sint::read_i16","value":"pub fn read_i16<R: Read>(&mut R) -> Result<i16, ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to read exactly 3 bytes from the given reader and to decode them as `i16` value.","sig":null,"attributes":[{"value":"/ Attempts to read exactly 3 bytes from the given reader and to decode them as `i16` value.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":28750,"byte_end":28843,"line_start":54,"line_end":54,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":28844,"byte_end":28847,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ The first byte should be the marker and the others should represent the data itself.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":28848,"byte_end":28936,"line_start":56,"line_end":56,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":28937,"byte_end":28940,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":28941,"byte_end":28953,"line_start":58,"line_end":58,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":28954,"byte_end":28957,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueReadError` on any I/O error while reading either the marker or","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":28958,"byte_end":29056,"line_start":60,"line_end":60,"column_start":1,"column_end":99}},{"value":"/ the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":29057,"byte_end":29070,"line_start":61,"line_end":61,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":29071,"byte_end":29074,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ It also returns `ValueReadError::TypeMismatch` if the actual type is not equal with the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":29075,"byte_end":29166,"line_start":63,"line_end":63,"column_start":1,"column_end":92}},{"value":"/ expected one, indicating you with the actual type.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":29167,"byte_end":29221,"line_start":64,"line_end":64,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":29222,"byte_end":29225,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":29226,"byte_end":29236,"line_start":66,"line_end":66,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":29237,"byte_end":29240,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ This function will silently retry on every EINTR received from the underlying `Read` until","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":29241,"byte_end":29335,"line_start":68,"line_end":68,"column_start":1,"column_end":95}},{"value":"/ successful read.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":29336,"byte_end":29356,"line_start":69,"line_end":69,"column_start":1,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":68},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":30182,"byte_end":30190,"line_start":93,"line_end":93,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::decode::sint::read_i32","value":"pub fn read_i32<R: Read>(&mut R) -> Result<i32, ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to read exactly 5 bytes from the given reader and to decode them as `i32` value.","sig":null,"attributes":[{"value":"/ Attempts to read exactly 5 bytes from the given reader and to decode them as `i32` value.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":29568,"byte_end":29661,"line_start":77,"line_end":77,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":29662,"byte_end":29665,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ The first byte should be the marker and the others should represent the data itself.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":29666,"byte_end":29754,"line_start":79,"line_end":79,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":29755,"byte_end":29758,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":29759,"byte_end":29771,"line_start":81,"line_end":81,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":29772,"byte_end":29775,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueReadError` on any I/O error while reading either the marker or","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":29776,"byte_end":29874,"line_start":83,"line_end":83,"column_start":1,"column_end":99}},{"value":"/ the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":29875,"byte_end":29888,"line_start":84,"line_end":84,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":29889,"byte_end":29892,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ It also returns `ValueReadError::TypeMismatch` if the actual type is not equal with the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":29893,"byte_end":29984,"line_start":86,"line_end":86,"column_start":1,"column_end":92}},{"value":"/ expected one, indicating you with the actual type.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":29985,"byte_end":30039,"line_start":87,"line_end":87,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":30040,"byte_end":30043,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":30044,"byte_end":30054,"line_start":89,"line_end":89,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":30055,"byte_end":30058,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ This function will silently retry on every EINTR received from the underlying `Read` until","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":30059,"byte_end":30153,"line_start":91,"line_end":91,"column_start":1,"column_end":95}},{"value":"/ successful read.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":30154,"byte_end":30174,"line_start":92,"line_end":92,"column_start":1,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":70},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":31000,"byte_end":31008,"line_start":116,"line_end":116,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::decode::sint::read_i64","value":"pub fn read_i64<R: Read>(&mut R) -> Result<i64, ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to read exactly 9 bytes from the given reader and to decode them as `i64` value.","sig":null,"attributes":[{"value":"/ Attempts to read exactly 9 bytes from the given reader and to decode them as `i64` value.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":30386,"byte_end":30479,"line_start":100,"line_end":100,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":30480,"byte_end":30483,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ The first byte should be the marker and the others should represent the data itself.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":30484,"byte_end":30572,"line_start":102,"line_end":102,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":30573,"byte_end":30576,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":30577,"byte_end":30589,"line_start":104,"line_end":104,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":30590,"byte_end":30593,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueReadError` on any I/O error while reading either the marker or","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":30594,"byte_end":30692,"line_start":106,"line_end":106,"column_start":1,"column_end":99}},{"value":"/ the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":30693,"byte_end":30706,"line_start":107,"line_end":107,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":30707,"byte_end":30710,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ It also returns `ValueReadError::TypeMismatch` if the actual type is not equal with the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":30711,"byte_end":30802,"line_start":109,"line_end":109,"column_start":1,"column_end":92}},{"value":"/ expected one, indicating you with the actual type.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":30803,"byte_end":30857,"line_start":110,"line_end":110,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":30858,"byte_end":30861,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":30862,"byte_end":30872,"line_start":112,"line_end":112,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":30873,"byte_end":30876,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ This function will silently retry on every EINTR received from the underlying `Read` until","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":30877,"byte_end":30971,"line_start":114,"line_end":114,"column_start":1,"column_end":95}},{"value":"/ successful read.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/sint.rs","byte_start":30972,"byte_end":30992,"line_start":115,"line_end":115,"column_start":1,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":438},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":31495,"byte_end":31512,"line_start":11,"line_end":11,"column_start":5,"column_end":22},"name":"InvalidMarkerRead","qualname":"::decode::str::DecodeStringError::InvalidMarkerRead","value":"DecodeStringError::InvalidMarkerRead(Error)","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":441},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":31525,"byte_end":31540,"line_start":12,"line_end":12,"column_start":5,"column_end":20},"name":"InvalidDataRead","qualname":"::decode::str::DecodeStringError::InvalidDataRead","value":"DecodeStringError::InvalidDataRead(Error)","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":444},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":31553,"byte_end":31565,"line_start":13,"line_end":13,"column_start":5,"column_end":17},"name":"TypeMismatch","qualname":"::decode::str::DecodeStringError::TypeMismatch","value":"DecodeStringError::TypeMismatch(Marker)","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":447},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":31669,"byte_end":31687,"line_start":15,"line_end":15,"column_start":5,"column_end":23},"name":"BufferSizeTooSmall","qualname":"::decode::str::DecodeStringError::BufferSizeTooSmall","value":"DecodeStringError::BufferSizeTooSmall(u32)","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" The given buffer is not large enough to accumulate the specified amount of bytes.\n","sig":null,"attributes":[{"value":"/ The given buffer is not large enough to accumulate the specified amount of bytes.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":31579,"byte_end":31664,"line_start":14,"line_end":14,"column_start":5,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":450},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":31698,"byte_end":31709,"line_start":16,"line_end":16,"column_start":5,"column_end":16},"name":"InvalidUtf8","qualname":"::decode::str::DecodeStringError::InvalidUtf8","value":"DecodeStringError::InvalidUtf8(&'a [u8], Utf8Error)","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":436},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":31467,"byte_end":31484,"line_start":10,"line_end":10,"column_start":10,"column_end":27},"name":"DecodeStringError","qualname":"::decode::str::DecodeStringError","value":"pub enum DecodeStringError<'a> {\n    InvalidMarkerRead(Error),\n    InvalidDataRead(Error),\n    TypeMismatch(Marker),\n\n    /// The given buffer is not large enough to accumulate the specified amount of bytes.\n    BufferSizeTooSmall(u32),\n    InvalidUtf8(&'a [u8], Utf8Error),\n}","parent":null,"children":[{"krate":0,"index":438},{"krate":0,"index":441},{"krate":0,"index":444},{"krate":0,"index":447},{"krate":0,"index":450}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":101},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":33401,"byte_end":33413,"line_start":60,"line_end":60,"column_start":8,"column_end":20},"name":"read_str_len","qualname":"::decode::str::read_str_len","value":"pub fn read_str_len<R: Read>(&mut R) -> Result<u32, ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to read up to 9 bytes from the given reader and to decode them as a string `u32` size\n value.","sig":null,"attributes":[{"value":"/ Attempts to read up to 9 bytes from the given reader and to decode them as a string `u32` size","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":32816,"byte_end":32914,"line_start":47,"line_end":47,"column_start":1,"column_end":99}},{"value":"/ value.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":32915,"byte_end":32925,"line_start":48,"line_end":48,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":32926,"byte_end":32929,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ According to the MessagePack specification, the string format family stores an byte array in 1,","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":32930,"byte_end":33029,"line_start":50,"line_end":50,"column_start":1,"column_end":100}},{"value":"/ 2, 3, or 5 bytes of extra bytes in addition to the size of the byte array.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":33030,"byte_end":33108,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":33109,"byte_end":33112,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":33113,"byte_end":33125,"line_start":53,"line_end":53,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":33126,"byte_end":33129,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueReadError` on any I/O error while reading either the marker or","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":33130,"byte_end":33228,"line_start":55,"line_end":55,"column_start":1,"column_end":99}},{"value":"/ the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":33229,"byte_end":33242,"line_start":56,"line_end":56,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":33243,"byte_end":33246,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ It also returns `ValueReadError::TypeMismatch` if the actual type is not equal with the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":33247,"byte_end":33338,"line_start":58,"line_end":58,"column_start":1,"column_end":92}},{"value":"/ expected one, indicating you with the actual type.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":33339,"byte_end":33393,"line_start":59,"line_end":59,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":105},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":35109,"byte_end":35117,"line_start":106,"line_end":106,"column_start":8,"column_end":16},"name":"read_str","qualname":"::decode::str::read_str","value":"pub fn read_str<'r, R>(&mut R, &'r mut [u8])\n-> Result<&'r str, DecodeStringError> where R: Read","parent":null,"children":[],"decl_id":null,"docs":" Attempts to read a string data from the given reader and copy it to the buffer provided.","sig":null,"attributes":[{"value":"/ Attempts to read a string data from the given reader and copy it to the buffer provided.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":33938,"byte_end":34030,"line_start":76,"line_end":76,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":34031,"byte_end":34034,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ On success returns a borrowed string type, allowing to view the copied bytes as properly utf-8","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":34035,"byte_end":34133,"line_start":78,"line_end":78,"column_start":1,"column_end":99}},{"value":"/ string.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":34134,"byte_end":34145,"line_start":79,"line_end":79,"column_start":1,"column_end":12}},{"value":"/ According to the spec, the string's data must to be encoded using utf-8.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":34146,"byte_end":34222,"line_start":80,"line_end":80,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":34223,"byte_end":34226,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":34227,"byte_end":34239,"line_start":82,"line_end":82,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":34240,"byte_end":34243,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ Returns `Err` in the following cases:","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":34244,"byte_end":34285,"line_start":84,"line_end":84,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":34286,"byte_end":34289,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/  - if any IO error (including unexpected EOF) occurs, while reading an `rd`, except the EINTR,","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":34290,"byte_end":34388,"line_start":86,"line_end":86,"column_start":1,"column_end":99}},{"value":"/    which is handled internally.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":34389,"byte_end":34424,"line_start":87,"line_end":87,"column_start":1,"column_end":36}},{"value":"/  - if the `out` buffer size is not large enough to keep all the data copied.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":34425,"byte_end":34505,"line_start":88,"line_end":88,"column_start":1,"column_end":81}},{"value":"/  - if the data is not utf-8, with a description as to why the provided data is not utf-8 and","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":34506,"byte_end":34602,"line_start":89,"line_end":89,"column_start":1,"column_end":97}},{"value":"/    with a size of bytes actually copied to be able to get them from `out`.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":34603,"byte_end":34681,"line_start":90,"line_end":90,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":34682,"byte_end":34685,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":34686,"byte_end":34700,"line_start":92,"line_end":92,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":34701,"byte_end":34708,"line_start":93,"line_end":93,"column_start":1,"column_end":8}},{"value":"/ use rmp::decode::read_str;","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":34709,"byte_end":34739,"line_start":94,"line_end":94,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":34740,"byte_end":34743,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ let buf = [0xaa, 0x6c, 0x65, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65];","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":34744,"byte_end":34825,"line_start":96,"line_end":96,"column_start":1,"column_end":82}},{"value":"/ let mut out = [0u8; 16];","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":34826,"byte_end":34854,"line_start":97,"line_end":97,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":34855,"byte_end":34858,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(\"le message\", read_str(&mut &buf[..], &mut &mut out[..]).unwrap());","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":34859,"byte_end":34941,"line_start":99,"line_end":99,"column_start":1,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":34942,"byte_end":34949,"line_start":100,"line_end":100,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":34950,"byte_end":34953,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ # Unstable","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":34954,"byte_end":34968,"line_start":102,"line_end":102,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":34969,"byte_end":34972,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ This function is **unstable**, because it needs review.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":34973,"byte_end":35032,"line_start":104,"line_end":104,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":111},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":36340,"byte_end":36352,"line_start":144,"line_end":144,"column_start":8,"column_end":20},"name":"read_str_ref","qualname":"::decode::str::read_str_ref","value":"pub fn read_str_ref(&[u8]) -> Result<&[u8], DecodeStringError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to read and decode a string value from the reader, returning a borrowed slice from it.","sig":null,"attributes":[{"value":"/ Attempts to read and decode a string value from the reader, returning a borrowed slice from it.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":36048,"byte_end":36147,"line_start":140,"line_end":140,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":36148,"byte_end":36151,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"deprecated(since = \"0.8.6\", note =\n             \"useless, use `read_str_from_slice` instead\")","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":36249,"byte_end":36332,"line_start":143,"line_end":143,"column_start":1,"column_end":84}}]},{"kind":"Function","id":{"krate":0,"index":112},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":37226,"byte_end":37245,"line_start":173,"line_end":173,"column_start":8,"column_end":27},"name":"read_str_from_slice","qualname":"::decode::str::read_str_from_slice","value":"pub fn read_str_from_slice<T: ?Sized + AsRef<[u8]>>(&T)\n-> Result<(&str, &[u8]), DecodeStringError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to read and decode a string value from the reader, returning a borrowed slice from it.","sig":null,"attributes":[{"value":"/ Attempts to read and decode a string value from the reader, returning a borrowed slice from it.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":36569,"byte_end":36668,"line_start":151,"line_end":151,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":36669,"byte_end":36672,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":36673,"byte_end":36687,"line_start":153,"line_end":153,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":36688,"byte_end":36691,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":36692,"byte_end":36699,"line_start":155,"line_end":155,"column_start":1,"column_end":8}},{"value":"/ use rmp::encode::write_str;","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":36700,"byte_end":36731,"line_start":156,"line_end":156,"column_start":1,"column_end":32}},{"value":"/ use rmp::decode::read_str_from_slice;","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":36732,"byte_end":36773,"line_start":157,"line_end":157,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":36774,"byte_end":36777,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ let mut buf = Vec::new();","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":36778,"byte_end":36807,"line_start":159,"line_end":159,"column_start":1,"column_end":30}},{"value":"/ write_str(&mut buf, \"Unpacking\").unwrap();","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":36808,"byte_end":36854,"line_start":160,"line_end":160,"column_start":1,"column_end":47}},{"value":"/ write_str(&mut buf, \"multiple\").unwrap();","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":36855,"byte_end":36900,"line_start":161,"line_end":161,"column_start":1,"column_end":46}},{"value":"/ write_str(&mut buf, \"strings\").unwrap();","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":36901,"byte_end":36945,"line_start":162,"line_end":162,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":36946,"byte_end":36949,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ let mut chunks = Vec::new();","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":36950,"byte_end":36982,"line_start":164,"line_end":164,"column_start":1,"column_end":33}},{"value":"/ let mut unparsed = &buf[..];","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":36983,"byte_end":37015,"line_start":165,"line_end":165,"column_start":1,"column_end":33}},{"value":"/ while let Ok((chunk, tail)) = read_str_from_slice(unparsed) {","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":37016,"byte_end":37081,"line_start":166,"line_end":166,"column_start":1,"column_end":66}},{"value":"/     chunks.push(chunk);","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":37082,"byte_end":37109,"line_start":167,"line_end":167,"column_start":1,"column_end":28}},{"value":"/     unparsed = tail;","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":37110,"byte_end":37134,"line_start":168,"line_end":168,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":37135,"byte_end":37140,"line_start":169,"line_end":169,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":37141,"byte_end":37144,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(vec![\"Unpacking\", \"multiple\", \"strings\"], chunks);","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":37145,"byte_end":37210,"line_start":171,"line_end":171,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":37211,"byte_end":37218,"line_start":172,"line_end":172,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":124},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":38687,"byte_end":38696,"line_start":24,"line_end":24,"column_start":8,"column_end":17},"name":"read_pfix","qualname":"::decode::uint::read_pfix","value":"pub fn read_pfix<R: Read>(&mut R) -> Result<u8, ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to read a single byte from the given reader and to decode it as a positive fixnum\n value.","sig":null,"attributes":[{"value":"/ Attempts to read a single byte from the given reader and to decode it as a positive fixnum","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":37929,"byte_end":38023,"line_start":6,"line_end":6,"column_start":1,"column_end":95}},{"value":"/ value.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":38024,"byte_end":38034,"line_start":7,"line_end":7,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":38035,"byte_end":38038,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ According to the MessagePack specification, a positive fixed integer value is represented using","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":38039,"byte_end":38138,"line_start":9,"line_end":9,"column_start":1,"column_end":100}},{"value":"/ a single byte in `[0x00; 0x7f]` range inclusively, prepended with a special marker mask.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":38139,"byte_end":38231,"line_start":10,"line_end":10,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":38232,"byte_end":38235,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":38236,"byte_end":38248,"line_start":12,"line_end":12,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":38249,"byte_end":38252,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueReadError` on any I/O error while reading the marker,","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":38253,"byte_end":38342,"line_start":14,"line_end":14,"column_start":1,"column_end":90}},{"value":"/ except the EINTR, which is handled internally.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":38343,"byte_end":38393,"line_start":15,"line_end":15,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":38394,"byte_end":38397,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ It also returns `ValueReadError::TypeMismatch` if the actual type is not equal with the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":38398,"byte_end":38489,"line_start":17,"line_end":17,"column_start":1,"column_end":92}},{"value":"/ expected one, indicating you with the actual type.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":38490,"byte_end":38544,"line_start":18,"line_end":18,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":38545,"byte_end":38548,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":38549,"byte_end":38559,"line_start":20,"line_end":20,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":38560,"byte_end":38563,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ This function will silently retry on every EINTR received from the underlying `Read` until","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":38564,"byte_end":38658,"line_start":22,"line_end":22,"column_start":1,"column_end":95}},{"value":"/ successful read.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":38659,"byte_end":38679,"line_start":23,"line_end":23,"column_start":1,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":126},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":39371,"byte_end":39378,"line_start":42,"line_end":42,"column_start":8,"column_end":15},"name":"read_u8","qualname":"::decode::uint::read_u8","value":"pub fn read_u8<R: Read>(&mut R) -> Result<u8, ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to read exactly 2 bytes from the given reader and to decode them as `u8` value.","sig":null,"attributes":[{"value":"/ Attempts to read exactly 2 bytes from the given reader and to decode them as `u8` value.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":38889,"byte_end":38981,"line_start":31,"line_end":31,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":38982,"byte_end":38985,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ The first byte should be the marker and the second one should represent the data itself.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":38986,"byte_end":39078,"line_start":33,"line_end":33,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":39079,"byte_end":39082,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":39083,"byte_end":39095,"line_start":35,"line_end":35,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":39096,"byte_end":39099,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueReadError` on any I/O error while reading either the marker or","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":39100,"byte_end":39198,"line_start":37,"line_end":37,"column_start":1,"column_end":99}},{"value":"/ the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":39199,"byte_end":39212,"line_start":38,"line_end":38,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":39213,"byte_end":39216,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ It also returns `ValueReadError::TypeMismatch` if the actual type is not equal with the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":39217,"byte_end":39308,"line_start":40,"line_end":40,"column_start":1,"column_end":92}},{"value":"/ expected one, indicating you with the actual type.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":39309,"byte_end":39363,"line_start":41,"line_end":41,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":128},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":40185,"byte_end":40193,"line_start":65,"line_end":65,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::decode::uint::read_u16","value":"pub fn read_u16<R: Read>(&mut R) -> Result<u16, ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to read exactly 3 bytes from the given reader and to decode them as `u16` value.","sig":null,"attributes":[{"value":"/ Attempts to read exactly 3 bytes from the given reader and to decode them as `u16` value.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":39571,"byte_end":39664,"line_start":49,"line_end":49,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":39665,"byte_end":39668,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ The first byte should be the marker and the others should represent the data itself.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":39669,"byte_end":39757,"line_start":51,"line_end":51,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":39758,"byte_end":39761,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":39762,"byte_end":39774,"line_start":53,"line_end":53,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":39775,"byte_end":39778,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueReadError` on any I/O error while reading either the marker or","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":39779,"byte_end":39877,"line_start":55,"line_end":55,"column_start":1,"column_end":99}},{"value":"/ the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":39878,"byte_end":39891,"line_start":56,"line_end":56,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":39892,"byte_end":39895,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ It also returns `ValueReadError::TypeMismatch` if the actual type is not equal with the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":39896,"byte_end":39987,"line_start":58,"line_end":58,"column_start":1,"column_end":92}},{"value":"/ expected one, indicating you with the actual type.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":39988,"byte_end":40042,"line_start":59,"line_end":59,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":40043,"byte_end":40046,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":40047,"byte_end":40057,"line_start":61,"line_end":61,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":40058,"byte_end":40061,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ This function will silently retry on every EINTR received from the underlying `Read` until","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":40062,"byte_end":40156,"line_start":63,"line_end":63,"column_start":1,"column_end":95}},{"value":"/ successful read.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":40157,"byte_end":40177,"line_start":64,"line_end":64,"column_start":1,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":130},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":41003,"byte_end":41011,"line_start":88,"line_end":88,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::decode::uint::read_u32","value":"pub fn read_u32<R: Read>(&mut R) -> Result<u32, ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to read exactly 5 bytes from the given reader and to decode them as `u32` value.","sig":null,"attributes":[{"value":"/ Attempts to read exactly 5 bytes from the given reader and to decode them as `u32` value.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":40389,"byte_end":40482,"line_start":72,"line_end":72,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":40483,"byte_end":40486,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ The first byte should be the marker and the others should represent the data itself.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":40487,"byte_end":40575,"line_start":74,"line_end":74,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":40576,"byte_end":40579,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":40580,"byte_end":40592,"line_start":76,"line_end":76,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":40593,"byte_end":40596,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueReadError` on any I/O error while reading either the marker or","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":40597,"byte_end":40695,"line_start":78,"line_end":78,"column_start":1,"column_end":99}},{"value":"/ the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":40696,"byte_end":40709,"line_start":79,"line_end":79,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":40710,"byte_end":40713,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ It also returns `ValueReadError::TypeMismatch` if the actual type is not equal with the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":40714,"byte_end":40805,"line_start":81,"line_end":81,"column_start":1,"column_end":92}},{"value":"/ expected one, indicating you with the actual type.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":40806,"byte_end":40860,"line_start":82,"line_end":82,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":40861,"byte_end":40864,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":40865,"byte_end":40875,"line_start":84,"line_end":84,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":40876,"byte_end":40879,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ This function will silently retry on every EINTR received from the underlying `Read` until","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":40880,"byte_end":40974,"line_start":86,"line_end":86,"column_start":1,"column_end":95}},{"value":"/ successful read.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":40975,"byte_end":40995,"line_start":87,"line_end":87,"column_start":1,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":132},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":41821,"byte_end":41829,"line_start":111,"line_end":111,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::decode::uint::read_u64","value":"pub fn read_u64<R: Read>(&mut R) -> Result<u64, ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to read exactly 9 bytes from the given reader and to decode them as `u64` value.","sig":null,"attributes":[{"value":"/ Attempts to read exactly 9 bytes from the given reader and to decode them as `u64` value.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":41207,"byte_end":41300,"line_start":95,"line_end":95,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":41301,"byte_end":41304,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ The first byte should be the marker and the others should represent the data itself.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":41305,"byte_end":41393,"line_start":97,"line_end":97,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":41394,"byte_end":41397,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":41398,"byte_end":41410,"line_start":99,"line_end":99,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":41411,"byte_end":41414,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueReadError` on any I/O error while reading either the marker or","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":41415,"byte_end":41513,"line_start":101,"line_end":101,"column_start":1,"column_end":99}},{"value":"/ the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":41514,"byte_end":41527,"line_start":102,"line_end":102,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":41528,"byte_end":41531,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ It also returns `ValueReadError::TypeMismatch` if the actual type is not equal with the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":41532,"byte_end":41623,"line_start":104,"line_end":104,"column_start":1,"column_end":92}},{"value":"/ expected one, indicating you with the actual type.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":41624,"byte_end":41678,"line_start":105,"line_end":105,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":41679,"byte_end":41682,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":41683,"byte_end":41693,"line_start":107,"line_end":107,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":41694,"byte_end":41697,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ This function will silently retry on every EINTR received from the underlying `Read` until","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":41698,"byte_end":41792,"line_start":109,"line_end":109,"column_start":1,"column_end":95}},{"value":"/ successful read.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/uint.rs","byte_start":41793,"byte_end":41813,"line_start":110,"line_end":110,"column_start":1,"column_end":21}}]},{"kind":"Type","id":{"krate":0,"index":174},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":7239,"byte_end":7244,"line_start":35,"line_end":35,"column_start":10,"column_end":15},"name":"Error","qualname":"::decode::Error","value":"::std::io::Error","parent":null,"children":[],"decl_id":null,"docs":" An error that can occur when attempting to read bytes from the reader.\n","sig":null,"attributes":[{"value":"/ An error that can occur when attempting to read bytes from the reader.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":7155,"byte_end":7229,"line_start":34,"line_end":34,"column_start":1,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":457},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":7384,"byte_end":7399,"line_start":39,"line_end":39,"column_start":12,"column_end":27},"name":"MarkerReadError","qualname":"::decode::MarkerReadError","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error that can occur when attempting to read a MessagePack marker from the reader.\n","sig":null,"attributes":[{"value":"/ An error that can occur when attempting to read a MessagePack marker from the reader.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":7266,"byte_end":7355,"line_start":37,"line_end":37,"column_start":1,"column_end":90}}]},{"kind":"Field","id":{"krate":0,"index":459},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":7400,"byte_end":7409,"line_start":39,"line_end":39,"column_start":28,"column_end":37},"name":"0","qualname":"::decode::MarkerReadError::0","value":"std::io::Error","parent":{"krate":0,"index":457},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":463},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":7585,"byte_end":7602,"line_start":45,"line_end":45,"column_start":5,"column_end":22},"name":"InvalidMarkerRead","qualname":"::decode::ValueReadError::InvalidMarkerRead","value":"ValueReadError::InvalidMarkerRead(Error)","parent":{"krate":0,"index":462},"children":[],"decl_id":null,"docs":" Failed to read the marker.\n","sig":null,"attributes":[{"value":"/ Failed to read the marker.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":7550,"byte_end":7580,"line_start":44,"line_end":44,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":466},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":7648,"byte_end":7663,"line_start":47,"line_end":47,"column_start":5,"column_end":20},"name":"InvalidDataRead","qualname":"::decode::ValueReadError::InvalidDataRead","value":"ValueReadError::InvalidDataRead(Error)","parent":{"krate":0,"index":462},"children":[],"decl_id":null,"docs":" Failed to read the data.\n","sig":null,"attributes":[{"value":"/ Failed to read the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":7615,"byte_end":7643,"line_start":46,"line_end":46,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":469},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":7736,"byte_end":7748,"line_start":49,"line_end":49,"column_start":5,"column_end":17},"name":"TypeMismatch","qualname":"::decode::ValueReadError::TypeMismatch","value":"ValueReadError::TypeMismatch(Marker)","parent":{"krate":0,"index":462},"children":[],"decl_id":null,"docs":" The type decoded isn't match with the expected one.\n","sig":null,"attributes":[{"value":"/ The type decoded isn't match with the expected one.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":7676,"byte_end":7731,"line_start":48,"line_end":48,"column_start":5,"column_end":60}}]},{"kind":"Enum","id":{"krate":0,"index":462},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":7529,"byte_end":7543,"line_start":43,"line_end":43,"column_start":10,"column_end":24},"name":"ValueReadError","qualname":"::decode::ValueReadError","value":"pub enum ValueReadError {\n\n    /// Failed to read the marker.\n    InvalidMarkerRead(Error),\n\n    /// Failed to read the data.\n    InvalidDataRead(Error),\n\n    /// The type decoded isn't match with the expected one.\n    TypeMismatch(Marker),\n}","parent":null,"children":[{"krate":0,"index":463},{"krate":0,"index":466},{"krate":0,"index":469}],"decl_id":null,"docs":" An error which can occur when attempting to read a MessagePack value from the reader.\n","sig":null,"attributes":[{"value":"/ An error which can occur when attempting to read a MessagePack value from the reader.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":7413,"byte_end":7502,"line_start":41,"line_end":41,"column_start":1,"column_end":90}}]},{"kind":"Function","id":{"krate":0,"index":183},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":8994,"byte_end":9005,"line_start":89,"line_end":89,"column_start":8,"column_end":19},"name":"read_marker","qualname":"::decode::read_marker","value":"pub fn read_marker<R: Read>(&mut R) -> Result<Marker, MarkerReadError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to read a single byte from the given reader and to decode it as a MessagePack marker.\n","sig":null,"attributes":[{"value":"/ Attempts to read a single byte from the given reader and to decode it as a MessagePack marker.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":8888,"byte_end":8986,"line_start":88,"line_end":88,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":185},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":9759,"byte_end":9767,"line_start":109,"line_end":109,"column_start":8,"column_end":16},"name":"read_nil","qualname":"::decode::read_nil","value":"pub fn read_nil<R: Read>(&mut R) -> Result<(), ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to read a single byte from the given reader and to decode it as a nil value.","sig":null,"attributes":[{"value":"/ Attempts to read a single byte from the given reader and to decode it as a nil value.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":9106,"byte_end":9195,"line_start":93,"line_end":93,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":9196,"byte_end":9199,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ According to the MessagePack specification, a nil value is represented as a single `0xc0` byte.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":9200,"byte_end":9299,"line_start":95,"line_end":95,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":9300,"byte_end":9303,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":9304,"byte_end":9316,"line_start":97,"line_end":97,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":9317,"byte_end":9320,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueReadError` on any I/O error while reading the nil marker,","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":9321,"byte_end":9414,"line_start":99,"line_end":99,"column_start":1,"column_end":94}},{"value":"/ except the EINTR, which is handled internally.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":9415,"byte_end":9465,"line_start":100,"line_end":100,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":9466,"byte_end":9469,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ It also returns `ValueReadError::TypeMismatch` if the actual type is not equal with the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":9470,"byte_end":9561,"line_start":102,"line_end":102,"column_start":1,"column_end":92}},{"value":"/ expected one, indicating you with the actual type.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":9562,"byte_end":9616,"line_start":103,"line_end":103,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":9617,"byte_end":9620,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":9621,"byte_end":9631,"line_start":105,"line_end":105,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":9632,"byte_end":9635,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ This function will silently retry on every EINTR received from the underlying `Read` until","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":9636,"byte_end":9730,"line_start":107,"line_end":107,"column_start":1,"column_end":95}},{"value":"/ successful read.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":9731,"byte_end":9751,"line_start":108,"line_end":108,"column_start":1,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":187},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":10620,"byte_end":10629,"line_start":133,"line_end":133,"column_start":8,"column_end":17},"name":"read_bool","qualname":"::decode::read_bool","value":"pub fn read_bool<R: Read>(&mut R) -> Result<bool, ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to read a single byte from the given reader and to decode it as a boolean value.","sig":null,"attributes":[{"value":"/ Attempts to read a single byte from the given reader and to decode it as a boolean value.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":9952,"byte_end":10045,"line_start":116,"line_end":116,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":10046,"byte_end":10049,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ According to the MessagePack specification, an encoded boolean value is represented as a single","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":10050,"byte_end":10149,"line_start":118,"line_end":118,"column_start":1,"column_end":100}},{"value":"/ byte.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":10150,"byte_end":10159,"line_start":119,"line_end":119,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":10160,"byte_end":10163,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":10164,"byte_end":10176,"line_start":121,"line_end":121,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":10177,"byte_end":10180,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueReadError` on any I/O error while reading the bool marker,","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":10181,"byte_end":10275,"line_start":123,"line_end":123,"column_start":1,"column_end":95}},{"value":"/ except the EINTR, which is handled internally.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":10276,"byte_end":10326,"line_start":124,"line_end":124,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":10327,"byte_end":10330,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ It also returns `ValueReadError::TypeMismatch` if the actual type is not equal with the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":10331,"byte_end":10422,"line_start":126,"line_end":126,"column_start":1,"column_end":92}},{"value":"/ expected one, indicating you with the actual type.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":10423,"byte_end":10477,"line_start":127,"line_end":127,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":10478,"byte_end":10481,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":10482,"byte_end":10492,"line_start":129,"line_end":129,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":10493,"byte_end":10496,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ This function will silently retry on every EINTR received from the underlying `Read` until","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":10497,"byte_end":10591,"line_start":131,"line_end":131,"column_start":1,"column_end":95}},{"value":"/ successful read.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":10592,"byte_end":10612,"line_start":132,"line_end":132,"column_start":1,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":475},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":11037,"byte_end":11054,"line_start":145,"line_end":145,"column_start":5,"column_end":22},"name":"InvalidMarkerRead","qualname":"::decode::NumValueReadError::InvalidMarkerRead","value":"NumValueReadError::InvalidMarkerRead(Error)","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Failed to read the marker.\n","sig":null,"attributes":[{"value":"/ Failed to read the marker.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":11002,"byte_end":11032,"line_start":144,"line_end":144,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":478},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":11100,"byte_end":11115,"line_start":147,"line_end":147,"column_start":5,"column_end":20},"name":"InvalidDataRead","qualname":"::decode::NumValueReadError::InvalidDataRead","value":"NumValueReadError::InvalidDataRead(Error)","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Failed to read the data.\n","sig":null,"attributes":[{"value":"/ Failed to read the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":11067,"byte_end":11095,"line_start":146,"line_end":146,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":481},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":11188,"byte_end":11200,"line_start":149,"line_end":149,"column_start":5,"column_end":17},"name":"TypeMismatch","qualname":"::decode::NumValueReadError::TypeMismatch","value":"NumValueReadError::TypeMismatch(Marker)","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" The type decoded isn't match with the expected one.\n","sig":null,"attributes":[{"value":"/ The type decoded isn't match with the expected one.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":11128,"byte_end":11183,"line_start":148,"line_end":148,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":484},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":11271,"byte_end":11281,"line_start":151,"line_end":151,"column_start":5,"column_end":15},"name":"OutOfRange","qualname":"::decode::NumValueReadError::OutOfRange","value":"NumValueReadError::OutOfRange","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Out of range integral type conversion attempted.\n","sig":null,"attributes":[{"value":"/ Out of range integral type conversion attempted.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":11214,"byte_end":11266,"line_start":150,"line_end":150,"column_start":5,"column_end":57}}]},{"kind":"Enum","id":{"krate":0,"index":474},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":10978,"byte_end":10995,"line_start":143,"line_end":143,"column_start":10,"column_end":27},"name":"NumValueReadError","qualname":"::decode::NumValueReadError","value":"pub enum NumValueReadError {\n\n    /// Failed to read the marker.\n    InvalidMarkerRead(Error),\n\n    /// Failed to read the data.\n    InvalidDataRead(Error),\n\n    /// The type decoded isn't match with the expected one.\n    TypeMismatch(Marker),\n\n    /// Out of range integral type conversion attempted.\n    OutOfRange,\n}","parent":null,"children":[{"krate":0,"index":475},{"krate":0,"index":478},{"krate":0,"index":481},{"krate":0,"index":484}],"decl_id":null,"docs":" An error which can occur when attempting to read a MessagePack numeric value from the reader.\n","sig":null,"attributes":[{"value":"/ An error which can occur when attempting to read a MessagePack numeric value from the reader.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":10854,"byte_end":10951,"line_start":141,"line_end":141,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":197},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":12980,"byte_end":12992,"line_start":199,"line_end":199,"column_start":8,"column_end":20},"name":"read_data_u8","qualname":"::decode::read_data_u8","value":"pub fn read_data_u8<R: Read>(&mut R) -> Result<u8, ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":199},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":13129,"byte_end":13142,"line_start":204,"line_end":204,"column_start":8,"column_end":21},"name":"read_data_u16","qualname":"::decode::read_data_u16","value":"pub fn read_data_u16<R: Read>(&mut R) -> Result<u16, ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":201},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":13305,"byte_end":13318,"line_start":209,"line_end":209,"column_start":8,"column_end":21},"name":"read_data_u32","qualname":"::decode::read_data_u32","value":"pub fn read_data_u32<R: Read>(&mut R) -> Result<u32, ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":203},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":13481,"byte_end":13494,"line_start":214,"line_end":214,"column_start":8,"column_end":21},"name":"read_data_u64","qualname":"::decode::read_data_u64","value":"pub fn read_data_u64<R: Read>(&mut R) -> Result<u64, ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":205},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":13657,"byte_end":13669,"line_start":219,"line_end":219,"column_start":8,"column_end":20},"name":"read_data_i8","qualname":"::decode::read_data_i8","value":"pub fn read_data_i8<R: Read>(&mut R) -> Result<i8, ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":207},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":13806,"byte_end":13819,"line_start":224,"line_end":224,"column_start":8,"column_end":21},"name":"read_data_i16","qualname":"::decode::read_data_i16","value":"pub fn read_data_i16<R: Read>(&mut R) -> Result<i16, ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":209},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":13982,"byte_end":13995,"line_start":229,"line_end":229,"column_start":8,"column_end":21},"name":"read_data_i32","qualname":"::decode::read_data_i32","value":"pub fn read_data_i32<R: Read>(&mut R) -> Result<i32, ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":211},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":14158,"byte_end":14171,"line_start":234,"line_end":234,"column_start":8,"column_end":21},"name":"read_data_i64","qualname":"::decode::read_data_i64","value":"pub fn read_data_i64<R: Read>(&mut R) -> Result<i64, ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":213},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":14334,"byte_end":14347,"line_start":239,"line_end":239,"column_start":8,"column_end":21},"name":"read_data_f32","qualname":"::decode::read_data_f32","value":"pub fn read_data_f32<R: Read>(&mut R) -> Result<f32, ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":215},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":14510,"byte_end":14523,"line_start":244,"line_end":244,"column_start":8,"column_end":21},"name":"read_data_f64","qualname":"::decode::read_data_f64","value":"pub fn read_data_f64<R: Read>(&mut R) -> Result<f64, ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":217},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":16018,"byte_end":16026,"line_start":278,"line_end":278,"column_start":8,"column_end":16},"name":"read_int","qualname":"::decode::read_int","value":"pub fn read_int<T: FromPrimitive, R: Read>(&mut R)\n-> Result<T, NumValueReadError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to read up to 9 bytes from the given reader and to decode them as integral `T` value.","sig":null,"attributes":[{"value":"/ Attempts to read up to 9 bytes from the given reader and to decode them as integral `T` value.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":14664,"byte_end":14762,"line_start":248,"line_end":248,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":14763,"byte_end":14766,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"/ This function will try to read up to 9 bytes from the reader (1 for marker and up to 8 for data)","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":14767,"byte_end":14867,"line_start":250,"line_end":250,"column_start":1,"column_end":101}},{"value":"/ and interpret them as a big-endian `T`.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":14868,"byte_end":14911,"line_start":251,"line_end":251,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":14912,"byte_end":14915,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ Unlike `read_*`, this function weakens type restrictions, allowing you to safely decode packed","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":14916,"byte_end":15014,"line_start":253,"line_end":253,"column_start":1,"column_end":99}},{"value":"/ values even if you aren't sure about the actual integral type.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":15015,"byte_end":15081,"line_start":254,"line_end":254,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":15082,"byte_end":15085,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":15086,"byte_end":15098,"line_start":256,"line_end":256,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":15099,"byte_end":15102,"line_start":257,"line_end":257,"column_start":1,"column_end":4}},{"value":"/ This function will return `NumValueReadError` on any I/O error while reading either the marker","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":15103,"byte_end":15201,"line_start":258,"line_end":258,"column_start":1,"column_end":99}},{"value":"/ or the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":15202,"byte_end":15218,"line_start":259,"line_end":259,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":15219,"byte_end":15222,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"/ It also returns `NumValueReadError::OutOfRange` if the actual type is not an integer or it does","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":15223,"byte_end":15322,"line_start":261,"line_end":261,"column_start":1,"column_end":100}},{"value":"/ not fit in the given numeric range.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":15323,"byte_end":15362,"line_start":262,"line_end":262,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":15363,"byte_end":15366,"line_start":263,"line_end":263,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":15367,"byte_end":15381,"line_start":264,"line_end":264,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":15382,"byte_end":15385,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":15386,"byte_end":15393,"line_start":266,"line_end":266,"column_start":1,"column_end":8}},{"value":"/ let buf = [0xcd, 0x1, 0x2c];","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":15394,"byte_end":15426,"line_start":267,"line_end":267,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":15427,"byte_end":15430,"line_start":268,"line_end":268,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(300u16, rmp::decode::read_int(&mut &buf[..]).unwrap());","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":15431,"byte_end":15501,"line_start":269,"line_end":269,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(300i16, rmp::decode::read_int(&mut &buf[..]).unwrap());","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":15502,"byte_end":15572,"line_start":270,"line_end":270,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(300u32, rmp::decode::read_int(&mut &buf[..]).unwrap());","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":15573,"byte_end":15643,"line_start":271,"line_end":271,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(300i32, rmp::decode::read_int(&mut &buf[..]).unwrap());","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":15644,"byte_end":15714,"line_start":272,"line_end":272,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(300u64, rmp::decode::read_int(&mut &buf[..]).unwrap());","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":15715,"byte_end":15785,"line_start":273,"line_end":273,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(300i64, rmp::decode::read_int(&mut &buf[..]).unwrap());","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":15786,"byte_end":15856,"line_start":274,"line_end":274,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(300usize, rmp::decode::read_int(&mut &buf[..]).unwrap());","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":15857,"byte_end":15929,"line_start":275,"line_end":275,"column_start":1,"column_end":73}},{"value":"/ assert_eq!(300isize, rmp::decode::read_int(&mut &buf[..]).unwrap());","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":15930,"byte_end":16002,"line_start":276,"line_end":276,"column_start":1,"column_end":73}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":16003,"byte_end":16010,"line_start":277,"line_end":277,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":220},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":17237,"byte_end":17251,"line_start":308,"line_end":308,"column_start":8,"column_end":22},"name":"read_array_len","qualname":"::decode::read_array_len","value":"pub fn read_array_len<R>(&mut R) -> Result<u32, ValueReadError> where R: Read","parent":null,"children":[],"decl_id":null,"docs":" Attempts to read up to 5 bytes from the given reader and to decode them as a big-endian u32\n array size.","sig":null,"attributes":[{"value":"/ Attempts to read up to 5 bytes from the given reader and to decode them as a big-endian u32","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":16804,"byte_end":16899,"line_start":296,"line_end":296,"column_start":1,"column_end":96}},{"value":"/ array size.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":16900,"byte_end":16915,"line_start":297,"line_end":297,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":16916,"byte_end":16919,"line_start":298,"line_end":298,"column_start":1,"column_end":4}},{"value":"/ Array format family stores a sequence of elements in 1, 3, or 5 bytes of extra bytes in addition","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":16920,"byte_end":17020,"line_start":299,"line_end":299,"column_start":1,"column_end":101}},{"value":"/ to the elements.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":17021,"byte_end":17041,"line_start":300,"line_end":300,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":17042,"byte_end":17045,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":17046,"byte_end":17056,"line_start":302,"line_end":302,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":17057,"byte_end":17060,"line_start":303,"line_end":303,"column_start":1,"column_end":4}},{"value":"/ This function will silently retry on every EINTR received from the underlying `Read` until","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":17061,"byte_end":17155,"line_start":304,"line_end":304,"column_start":1,"column_end":95}},{"value":"/ successful read.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":17156,"byte_end":17176,"line_start":305,"line_end":305,"column_start":1,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":222},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":17969,"byte_end":17981,"line_start":331,"line_end":331,"column_start":8,"column_end":20},"name":"read_map_len","qualname":"::decode::read_map_len","value":"pub fn read_map_len<R: Read>(&mut R) -> Result<u32, ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to read up to 5 bytes from the given reader and to decode them as a big-endian u32\n map size.","sig":null,"attributes":[{"value":"/ Attempts to read up to 5 bytes from the given reader and to decode them as a big-endian u32","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":17578,"byte_end":17673,"line_start":320,"line_end":320,"column_start":1,"column_end":96}},{"value":"/ map size.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":17674,"byte_end":17687,"line_start":321,"line_end":321,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":17688,"byte_end":17691,"line_start":322,"line_end":322,"column_start":1,"column_end":4}},{"value":"/ Map format family stores a sequence of elements in 1, 3, or 5 bytes of extra bytes in addition","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":17692,"byte_end":17790,"line_start":323,"line_end":323,"column_start":1,"column_end":99}},{"value":"/ to the elements.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":17791,"byte_end":17811,"line_start":324,"line_end":324,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":17812,"byte_end":17815,"line_start":325,"line_end":325,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":17816,"byte_end":17826,"line_start":326,"line_end":326,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":17827,"byte_end":17830,"line_start":327,"line_end":327,"column_start":1,"column_end":4}},{"value":"/ This function will silently retry on every EINTR received from the underlying `Read` until","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":17831,"byte_end":17925,"line_start":328,"line_end":328,"column_start":1,"column_end":95}},{"value":"/ successful read.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":17926,"byte_end":17946,"line_start":329,"line_end":329,"column_start":1,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":224},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":18111,"byte_end":18124,"line_start":336,"line_end":336,"column_start":8,"column_end":21},"name":"marker_to_len","qualname":"::decode::marker_to_len","value":"pub fn marker_to_len<R: Read>(&mut R, Marker) -> Result<u32, ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":226},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":18695,"byte_end":18707,"line_start":352,"line_end":352,"column_start":8,"column_end":20},"name":"read_bin_len","qualname":"::decode::read_bin_len","value":"pub fn read_bin_len<R: Read>(&mut R) -> Result<u32, ValueReadError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to read up to 5 bytes from the given reader and to decode them as Binary array length.","sig":null,"attributes":[{"value":"/ Attempts to read up to 5 bytes from the given reader and to decode them as Binary array length.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":18438,"byte_end":18537,"line_start":345,"line_end":345,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":18538,"byte_end":18541,"line_start":346,"line_end":346,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":18542,"byte_end":18552,"line_start":347,"line_end":347,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":18553,"byte_end":18556,"line_start":348,"line_end":348,"column_start":1,"column_end":4}},{"value":"/ This function will silently retry on every EINTR received from the underlying `Read` until","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":18557,"byte_end":18651,"line_start":349,"line_end":349,"column_start":1,"column_end":95}},{"value":"/ successful read.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":18652,"byte_end":18672,"line_start":350,"line_end":350,"column_start":1,"column_end":21}}]},{"kind":"Mod","id":{"krate":0,"index":228},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"encode","qualname":"::encode","value":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","parent":null,"children":[{"krate":0,"index":229},{"krate":0,"index":243},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":286},{"krate":0,"index":299},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":361},{"krate":0,"index":363},{"krate":0,"index":365},{"krate":0,"index":367},{"krate":0,"index":370},{"krate":0,"index":372},{"krate":0,"index":374},{"krate":0,"index":376},{"krate":0,"index":378},{"krate":0,"index":380},{"krate":0,"index":382},{"krate":0,"index":384},{"krate":0,"index":386},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":392},{"krate":0,"index":394},{"krate":0,"index":396},{"krate":0,"index":488},{"krate":0,"index":495},{"krate":0,"index":398},{"krate":0,"index":400},{"krate":0,"index":402},{"krate":0,"index":404},{"krate":0,"index":406},{"krate":0,"index":408},{"krate":0,"index":410},{"krate":0,"index":412}],"decl_id":null,"docs":" Provides various functions and structs for MessagePack encoding.\n","sig":null,"attributes":[{"value":"/ Provides various functions and structs for MessagePack encoding.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":42025,"byte_end":42093,"line_start":1,"line_end":1,"column_start":1,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":239},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/bin.rs","byte_start":51327,"byte_end":51340,"line_start":17,"line_end":17,"column_start":8,"column_end":21},"name":"write_bin_len","qualname":"::encode::bin::write_bin_len","value":"pub fn write_bin_len<W: Write>(&mut W, u32) -> Result<Marker, ValueWriteError>","parent":null,"children":[],"decl_id":null,"docs":" Encodes and attempts to write the most efficient binary array length implementation to the given\n write, returning the marker used.","sig":null,"attributes":[{"value":"/ Encodes and attempts to write the most efficient binary array length implementation to the given","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/bin.rs","byte_start":50893,"byte_end":50993,"line_start":7,"line_end":7,"column_start":1,"column_end":101}},{"value":"/ write, returning the marker used.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/bin.rs","byte_start":50994,"byte_end":51031,"line_start":8,"line_end":8,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/bin.rs","byte_start":51032,"byte_end":51035,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This function is useful when you want to get full control for writing the data itself, for","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/bin.rs","byte_start":51036,"byte_end":51130,"line_start":10,"line_end":10,"column_start":1,"column_end":95}},{"value":"/ example, when using non-blocking socket.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/bin.rs","byte_start":51131,"byte_end":51175,"line_start":11,"line_end":11,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/bin.rs","byte_start":51176,"byte_end":51179,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/bin.rs","byte_start":51180,"byte_end":51192,"line_start":13,"line_end":13,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/bin.rs","byte_start":51193,"byte_end":51196,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueWriteError` on any I/O error occurred while writing either the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/bin.rs","byte_start":51197,"byte_end":51295,"line_start":15,"line_end":15,"column_start":1,"column_end":99}},{"value":"/ marker or the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/bin.rs","byte_start":51296,"byte_end":51319,"line_start":16,"line_end":16,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":241},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/bin.rs","byte_start":52092,"byte_end":52101,"line_start":40,"line_end":40,"column_start":8,"column_end":17},"name":"write_bin","qualname":"::encode::bin::write_bin","value":"pub fn write_bin<W: Write>(&mut W, &[u8]) -> Result<(), ValueWriteError>","parent":null,"children":[],"decl_id":null,"docs":" Encodes and attempts to write the most efficient binary implementation to the given `Write`.","sig":null,"attributes":[{"value":"/ Encodes and attempts to write the most efficient binary implementation to the given `Write`.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/bin.rs","byte_start":51795,"byte_end":51891,"line_start":33,"line_end":33,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/bin.rs","byte_start":51892,"byte_end":51895,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/bin.rs","byte_start":51896,"byte_end":51908,"line_start":35,"line_end":35,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/bin.rs","byte_start":51909,"byte_end":51912,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueWriteError` on any I/O error occurred while writing either the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/bin.rs","byte_start":51913,"byte_end":52011,"line_start":37,"line_end":37,"column_start":1,"column_end":99}},{"value":"/ marker or the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/bin.rs","byte_start":52012,"byte_end":52035,"line_start":38,"line_end":38,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":251},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/dec.rs","byte_start":52756,"byte_end":52765,"line_start":15,"line_end":15,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::encode::dec::write_f32","value":"pub fn write_f32<W: Write>(&mut W, f32) -> Result<(), ValueWriteError>","parent":null,"children":[],"decl_id":null,"docs":" Encodes and attempts to write an `f32` value as a 5-byte sequence into the given write.","sig":null,"attributes":[{"value":"/ Encodes and attempts to write an `f32` value as a 5-byte sequence into the given write.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/dec.rs","byte_start":52418,"byte_end":52509,"line_start":7,"line_end":7,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/dec.rs","byte_start":52510,"byte_end":52513,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ The first byte becomes the `f32` marker and the others will represent the data itself.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/dec.rs","byte_start":52514,"byte_end":52604,"line_start":9,"line_end":9,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/dec.rs","byte_start":52605,"byte_end":52608,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/dec.rs","byte_start":52609,"byte_end":52621,"line_start":11,"line_end":11,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/dec.rs","byte_start":52622,"byte_end":52625,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueWriteError` on any I/O error occurred while writing either the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/dec.rs","byte_start":52626,"byte_end":52724,"line_start":13,"line_end":13,"column_start":1,"column_end":99}},{"value":"/ marker or the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/dec.rs","byte_start":52725,"byte_end":52748,"line_start":14,"line_end":14,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":253},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/dec.rs","byte_start":53249,"byte_end":53258,"line_start":29,"line_end":29,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::encode::dec::write_f64","value":"pub fn write_f64<W: Write>(&mut W, f64) -> Result<(), ValueWriteError>","parent":null,"children":[],"decl_id":null,"docs":" Encodes and attempts to write an `f64` value as a 9-byte sequence into the given write.","sig":null,"attributes":[{"value":"/ Encodes and attempts to write an `f64` value as a 9-byte sequence into the given write.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/dec.rs","byte_start":52911,"byte_end":53002,"line_start":21,"line_end":21,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/dec.rs","byte_start":53003,"byte_end":53006,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ The first byte becomes the `f64` marker and the others will represent the data itself.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/dec.rs","byte_start":53007,"byte_end":53097,"line_start":23,"line_end":23,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/dec.rs","byte_start":53098,"byte_end":53101,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/dec.rs","byte_start":53102,"byte_end":53114,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/dec.rs","byte_start":53115,"byte_end":53118,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueWriteError` on any I/O error occurred while writing either the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/dec.rs","byte_start":53119,"byte_end":53217,"line_start":27,"line_end":27,"column_start":1,"column_end":99}},{"value":"/ marker or the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/dec.rs","byte_start":53218,"byte_end":53241,"line_start":28,"line_end":28,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":274},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":54513,"byte_end":54523,"line_start":27,"line_end":27,"column_start":8,"column_end":18},"name":"write_nfix","qualname":"::encode::sint::write_nfix","value":"pub fn write_nfix<W: Write>(&mut W, i8) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Encodes and attempts to write a negative small integer value as a negative fixnum into the\n given write.","sig":null,"attributes":[{"value":"/ Encodes and attempts to write a negative small integer value as a negative fixnum into the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":53637,"byte_end":53731,"line_start":7,"line_end":7,"column_start":1,"column_end":95}},{"value":"/ given write.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":53732,"byte_end":53748,"line_start":8,"line_end":8,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":53749,"byte_end":53752,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ According to the MessagePack specification, a negative fixed integer value is represented using","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":53753,"byte_end":53852,"line_start":10,"line_end":10,"column_start":1,"column_end":100}},{"value":"/ a single byte in `[0xe0; 0xff]` range inclusively, prepended with a special marker mask.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":53853,"byte_end":53945,"line_start":11,"line_end":11,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":53946,"byte_end":53949,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ The function is **strict** with the input arguments - it is the user's responsibility to check","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":53950,"byte_end":54048,"line_start":13,"line_end":13,"column_start":1,"column_end":99}},{"value":"/ if the value fits in the described range, otherwise it will panic.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":54049,"byte_end":54119,"line_start":14,"line_end":14,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":54120,"byte_end":54123,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ If you are not sure if the value fits in the given range use `write_sint` instead, which","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":54124,"byte_end":54216,"line_start":16,"line_end":16,"column_start":1,"column_end":93}},{"value":"/ automatically selects the most compact integer representation.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":54217,"byte_end":54283,"line_start":17,"line_end":17,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":54284,"byte_end":54287,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":54288,"byte_end":54300,"line_start":19,"line_end":19,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":54301,"byte_end":54304,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This function will return `FixedValueWriteError` on any I/O error occurred while writing the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":54305,"byte_end":54401,"line_start":21,"line_end":21,"column_start":1,"column_end":97}},{"value":"/ positive integer marker.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":54402,"byte_end":54430,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":54431,"byte_end":54434,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":54435,"byte_end":54447,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":54448,"byte_end":54451,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Panics if `val` does not fit in `[-32; 0)` range.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":54452,"byte_end":54505,"line_start":26,"line_end":26,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":276},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":55782,"byte_end":55790,"line_start":61,"line_end":61,"column_start":8,"column_end":16},"name":"write_i8","qualname":"::encode::sint::write_i8","value":"pub fn write_i8<W: Write>(&mut W, i8) -> Result<(), ValueWriteError>","parent":null,"children":[],"decl_id":null,"docs":" Encodes and attempts to write an `i8` value as a 2-byte sequence into the given write.","sig":null,"attributes":[{"value":"/ Encodes and attempts to write an `i8` value as a 2-byte sequence into the given write.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":54672,"byte_end":54762,"line_start":33,"line_end":33,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":54763,"byte_end":54766,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ The first byte becomes the marker and the second one will represent the data itself.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":54767,"byte_end":54855,"line_start":35,"line_end":35,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":54856,"byte_end":54859,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ Note, that this function will encode the given value in 2-byte sequence no matter what, even if","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":54860,"byte_end":54959,"line_start":37,"line_end":37,"column_start":1,"column_end":100}},{"value":"/ the value can be represented using single byte as a fixnum. Also note, that the first byte will","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":54960,"byte_end":55059,"line_start":38,"line_end":38,"column_start":1,"column_end":100}},{"value":"/ always be the i8 marker (`0xd0`).","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":55060,"byte_end":55097,"line_start":39,"line_end":39,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":55098,"byte_end":55101,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ If you need to fit the given buffer efficiently use `write_sint` instead, which automatically","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":55102,"byte_end":55199,"line_start":41,"line_end":41,"column_start":1,"column_end":98}},{"value":"/ selects the appropriate integer representation.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":55200,"byte_end":55251,"line_start":42,"line_end":42,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":55252,"byte_end":55255,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":55256,"byte_end":55268,"line_start":44,"line_end":44,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":55269,"byte_end":55272,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueWriteError` on any I/O error occurred while writing either the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":55273,"byte_end":55371,"line_start":46,"line_end":46,"column_start":1,"column_end":99}},{"value":"/ marker or the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":55372,"byte_end":55395,"line_start":47,"line_end":47,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":55396,"byte_end":55399,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":55400,"byte_end":55414,"line_start":49,"line_end":49,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":55415,"byte_end":55418,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":55419,"byte_end":55426,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ let mut buf = [0x00, 0x00];","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":55427,"byte_end":55458,"line_start":52,"line_end":52,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":55459,"byte_end":55462,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ rmp::encode::write_i8(&mut &mut buf[..], 42).ok().unwrap();","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":55463,"byte_end":55526,"line_start":54,"line_end":54,"column_start":1,"column_end":64}},{"value":"/ assert_eq!([0xd0, 0x2a], buf);","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":55527,"byte_end":55561,"line_start":55,"line_end":55,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":55562,"byte_end":55565,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ // Note, that -18 can be represented simply as `[0xee]`, but the function emits 2-byte sequence.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":55566,"byte_end":55666,"line_start":57,"line_end":57,"column_start":1,"column_end":101}},{"value":"/ rmp::encode::write_i8(&mut &mut buf[..], -18).ok().unwrap();","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":55667,"byte_end":55731,"line_start":58,"line_end":58,"column_start":1,"column_end":65}},{"value":"/ assert_eq!([0xd0, 0xee], buf);","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":55732,"byte_end":55766,"line_start":59,"line_end":59,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":55767,"byte_end":55774,"line_start":60,"line_end":60,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":278},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":56662,"byte_end":56671,"line_start":82,"line_end":82,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::encode::sint::write_i16","value":"pub fn write_i16<W: Write>(&mut W, i16) -> Result<(), ValueWriteError>","parent":null,"children":[],"decl_id":null,"docs":" Encodes and attempts to write an `i16` value as a 3-byte sequence into the given write.","sig":null,"attributes":[{"value":"/ Encodes and attempts to write an `i16` value as a 3-byte sequence into the given write.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":55933,"byte_end":56024,"line_start":67,"line_end":67,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":56025,"byte_end":56028,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ The first byte becomes the marker and the others will represent the data itself.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":56029,"byte_end":56113,"line_start":69,"line_end":69,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":56114,"byte_end":56117,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ Note, that this function will encode the given value in 3-byte sequence no matter what, even if","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":56118,"byte_end":56217,"line_start":71,"line_end":71,"column_start":1,"column_end":100}},{"value":"/ the value can be represented using single byte as a fixnum. Also note, that the first byte will","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":56218,"byte_end":56317,"line_start":72,"line_end":72,"column_start":1,"column_end":100}},{"value":"/ always be the i16 marker (`0xd1`).","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":56318,"byte_end":56356,"line_start":73,"line_end":73,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":56357,"byte_end":56360,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ If you need to fit the given buffer efficiently use `write_sint` instead, which automatically","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":56361,"byte_end":56458,"line_start":75,"line_end":75,"column_start":1,"column_end":98}},{"value":"/ selects the appropriate integer representation.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":56459,"byte_end":56510,"line_start":76,"line_end":76,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":56511,"byte_end":56514,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":56515,"byte_end":56527,"line_start":78,"line_end":78,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":56528,"byte_end":56531,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueWriteError` on any I/O error occurred while writing either the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":56532,"byte_end":56630,"line_start":80,"line_end":80,"column_start":1,"column_end":99}},{"value":"/ marker or the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":56631,"byte_end":56654,"line_start":81,"line_end":81,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":280},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":57546,"byte_end":57555,"line_start":103,"line_end":103,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::encode::sint::write_i32","value":"pub fn write_i32<W: Write>(&mut W, i32) -> Result<(), ValueWriteError>","parent":null,"children":[],"decl_id":null,"docs":" Encodes and attempts to write an `i32` value as a 5-byte sequence into the given write.","sig":null,"attributes":[{"value":"/ Encodes and attempts to write an `i32` value as a 5-byte sequence into the given write.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":56817,"byte_end":56908,"line_start":88,"line_end":88,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":56909,"byte_end":56912,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ The first byte becomes the marker and the others will represent the data itself.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":56913,"byte_end":56997,"line_start":90,"line_end":90,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":56998,"byte_end":57001,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ Note, that this function will encode the given value in 5-byte sequence no matter what, even if","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":57002,"byte_end":57101,"line_start":92,"line_end":92,"column_start":1,"column_end":100}},{"value":"/ the value can be represented using single byte as a fixnum. Also note, that the first byte will","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":57102,"byte_end":57201,"line_start":93,"line_end":93,"column_start":1,"column_end":100}},{"value":"/ always be the i32 marker (`0xd2`).","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":57202,"byte_end":57240,"line_start":94,"line_end":94,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":57241,"byte_end":57244,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ If you need to fit the given buffer efficiently use `write_sint` instead, which automatically","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":57245,"byte_end":57342,"line_start":96,"line_end":96,"column_start":1,"column_end":98}},{"value":"/ selects the appropriate integer representation.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":57343,"byte_end":57394,"line_start":97,"line_end":97,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":57395,"byte_end":57398,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":57399,"byte_end":57411,"line_start":99,"line_end":99,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":57412,"byte_end":57415,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueWriteError` on any I/O error occurred while writing either the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":57416,"byte_end":57514,"line_start":101,"line_end":101,"column_start":1,"column_end":99}},{"value":"/ marker or the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":57515,"byte_end":57538,"line_start":102,"line_end":102,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":282},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":58430,"byte_end":58439,"line_start":124,"line_end":124,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::encode::sint::write_i64","value":"pub fn write_i64<W: Write>(&mut W, i64) -> Result<(), ValueWriteError>","parent":null,"children":[],"decl_id":null,"docs":" Encodes and attempts to write an `i64` value as a 9-byte sequence into the given write.","sig":null,"attributes":[{"value":"/ Encodes and attempts to write an `i64` value as a 9-byte sequence into the given write.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":57701,"byte_end":57792,"line_start":109,"line_end":109,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":57793,"byte_end":57796,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ The first byte becomes the marker and the others will represent the data itself.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":57797,"byte_end":57881,"line_start":111,"line_end":111,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":57882,"byte_end":57885,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ Note, that this function will encode the given value in 9-byte sequence no matter what, even if","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":57886,"byte_end":57985,"line_start":113,"line_end":113,"column_start":1,"column_end":100}},{"value":"/ the value can be represented using single byte as a fixnum. Also note, that the first byte will","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":57986,"byte_end":58085,"line_start":114,"line_end":114,"column_start":1,"column_end":100}},{"value":"/ always be the i16 marker (`0xd3`).","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":58086,"byte_end":58124,"line_start":115,"line_end":115,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":58125,"byte_end":58128,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ If you need to fit the given buffer efficiently use `write_sint` instead, which automatically","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":58129,"byte_end":58226,"line_start":117,"line_end":117,"column_start":1,"column_end":98}},{"value":"/ selects the appropriate integer representation.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":58227,"byte_end":58278,"line_start":118,"line_end":118,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":58279,"byte_end":58282,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":58283,"byte_end":58295,"line_start":120,"line_end":120,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":58296,"byte_end":58299,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueWriteError` on any I/O error occurred while writing either the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":58300,"byte_end":58398,"line_start":122,"line_end":122,"column_start":1,"column_end":99}},{"value":"/ marker or the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":58399,"byte_end":58422,"line_start":123,"line_end":123,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":284},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":59392,"byte_end":59402,"line_start":147,"line_end":147,"column_start":8,"column_end":18},"name":"write_sint","qualname":"::encode::sint::write_sint","value":"pub fn write_sint<W: Write>(&mut W, i64) -> Result<Marker, ValueWriteError>","parent":null,"children":[],"decl_id":null,"docs":" Encodes and attempts to write an `i64` value into the given write using the most efficient\n representation, returning the marker used.","sig":null,"attributes":[{"value":"/ Encodes and attempts to write an `i64` value into the given write using the most efficient","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":58585,"byte_end":58679,"line_start":130,"line_end":130,"column_start":1,"column_end":95}},{"value":"/ representation, returning the marker used.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":58680,"byte_end":58726,"line_start":131,"line_end":131,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":58727,"byte_end":58730,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ This function obeys the MessagePack specification, which requires that the serializer SHOULD use","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":58731,"byte_end":58831,"line_start":133,"line_end":133,"column_start":1,"column_end":101}},{"value":"/ the format which represents the data in the smallest number of bytes, with the exception of","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":58832,"byte_end":58927,"line_start":134,"line_end":134,"column_start":1,"column_end":96}},{"value":"/ sized/unsized types.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":58928,"byte_end":58952,"line_start":135,"line_end":135,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":58953,"byte_end":58956,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ Note, that the function will **always** use signed integer representation even if the value can","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":58957,"byte_end":59056,"line_start":137,"line_end":137,"column_start":1,"column_end":100}},{"value":"/ be more efficiently represented using unsigned integer encoding.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":59057,"byte_end":59125,"line_start":138,"line_end":138,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":59126,"byte_end":59129,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ The first byte becomes the marker and the others (if present, up to 9) will represent the data","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":59130,"byte_end":59228,"line_start":140,"line_end":140,"column_start":1,"column_end":99}},{"value":"/ itself.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":59229,"byte_end":59240,"line_start":141,"line_end":141,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":59241,"byte_end":59244,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":59245,"byte_end":59257,"line_start":143,"line_end":143,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":59258,"byte_end":59261,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueWriteError` on any I/O error occurred while writing either the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":59262,"byte_end":59360,"line_start":145,"line_end":145,"column_start":1,"column_end":99}},{"value":"/ marker or the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/sint.rs","byte_start":59361,"byte_end":59384,"line_start":146,"line_end":146,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":295},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/str.rs","byte_start":60997,"byte_end":61010,"line_start":14,"line_end":14,"column_start":8,"column_end":21},"name":"write_str_len","qualname":"::encode::str::write_str_len","value":"pub fn write_str_len<W: Write>(&mut W, u32) -> Result<Marker, ValueWriteError>","parent":null,"children":[],"decl_id":null,"docs":" Encodes and attempts to write the most efficient string length implementation to the given\n write, returning the marker used.","sig":null,"attributes":[{"value":"/ Encodes and attempts to write the most efficient string length implementation to the given","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/str.rs","byte_start":60713,"byte_end":60807,"line_start":7,"line_end":7,"column_start":1,"column_end":95}},{"value":"/ write, returning the marker used.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/str.rs","byte_start":60808,"byte_end":60845,"line_start":8,"line_end":8,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/str.rs","byte_start":60846,"byte_end":60849,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/str.rs","byte_start":60850,"byte_end":60862,"line_start":10,"line_end":10,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/str.rs","byte_start":60863,"byte_end":60866,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueWriteError` on any I/O error occurred while writing either the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/str.rs","byte_start":60867,"byte_end":60965,"line_start":12,"line_end":12,"column_start":1,"column_end":99}},{"value":"/ marker or the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/str.rs","byte_start":60966,"byte_end":60989,"line_start":13,"line_end":13,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":297},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/str.rs","byte_start":61890,"byte_end":61899,"line_start":41,"line_end":41,"column_start":8,"column_end":17},"name":"write_str","qualname":"::encode::str::write_str","value":"pub fn write_str<W: Write>(&mut W, &str) -> Result<(), ValueWriteError>","parent":null,"children":[],"decl_id":null,"docs":" Encodes and attempts to write the most efficient string binary representation to the\n given `Write`.","sig":null,"attributes":[{"value":"/ Encodes and attempts to write the most efficient string binary representation to the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/str.rs","byte_start":61582,"byte_end":61670,"line_start":33,"line_end":33,"column_start":1,"column_end":89}},{"value":"/ given `Write`.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/str.rs","byte_start":61671,"byte_end":61689,"line_start":34,"line_end":34,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/str.rs","byte_start":61690,"byte_end":61693,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/str.rs","byte_start":61694,"byte_end":61706,"line_start":36,"line_end":36,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/str.rs","byte_start":61707,"byte_end":61710,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueWriteError` on any I/O error occurred while writing either the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/str.rs","byte_start":61711,"byte_end":61809,"line_start":38,"line_end":38,"column_start":1,"column_end":99}},{"value":"/ marker or the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/str.rs","byte_start":61810,"byte_end":61833,"line_start":39,"line_end":39,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":311},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":63130,"byte_end":63140,"line_start":27,"line_end":27,"column_start":8,"column_end":18},"name":"write_pfix","qualname":"::encode::uint::write_pfix","value":"pub fn write_pfix<W: Write>(&mut W, u8) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Encodes and attempts to write an unsigned small integer value as a positive fixint into the\n given write.","sig":null,"attributes":[{"value":"/ Encodes and attempts to write an unsigned small integer value as a positive fixint into the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":62266,"byte_end":62361,"line_start":7,"line_end":7,"column_start":1,"column_end":96}},{"value":"/ given write.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":62362,"byte_end":62378,"line_start":8,"line_end":8,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":62379,"byte_end":62382,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ According to the MessagePack specification, a positive fixed integer value is represented using","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":62383,"byte_end":62482,"line_start":10,"line_end":10,"column_start":1,"column_end":100}},{"value":"/ a single byte in `[0x00; 0x7f]` range inclusively, prepended with a special marker mask.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":62483,"byte_end":62575,"line_start":11,"line_end":11,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":62576,"byte_end":62579,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ The function is **strict** with the input arguments - it is the user's responsibility to check","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":62580,"byte_end":62678,"line_start":13,"line_end":13,"column_start":1,"column_end":99}},{"value":"/ if the value fits in the described range, otherwise it will panic.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":62679,"byte_end":62749,"line_start":14,"line_end":14,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":62750,"byte_end":62753,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ If you are not sure if the value fits in the given range use `write_uint` instead, which","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":62754,"byte_end":62846,"line_start":16,"line_end":16,"column_start":1,"column_end":93}},{"value":"/ automatically selects the most compact integer representation.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":62847,"byte_end":62913,"line_start":17,"line_end":17,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":62914,"byte_end":62917,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":62918,"byte_end":62930,"line_start":19,"line_end":19,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":62931,"byte_end":62934,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This function will return `FixedValueWriteError` on any I/O error occurred while writing the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":62935,"byte_end":63031,"line_start":21,"line_end":21,"column_start":1,"column_end":97}},{"value":"/ positive integer marker.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":63032,"byte_end":63060,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":63061,"byte_end":63064,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":63065,"byte_end":63077,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":63078,"byte_end":63081,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Panics if `val` is greater than 127.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":63082,"byte_end":63122,"line_start":26,"line_end":26,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":313},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":64317,"byte_end":64325,"line_start":59,"line_end":59,"column_start":8,"column_end":16},"name":"write_u8","qualname":"::encode::uint::write_u8","value":"pub fn write_u8<W: Write>(&mut W, u8) -> Result<(), ValueWriteError>","parent":null,"children":[],"decl_id":null,"docs":" Encodes and attempts to write an `u8` value as a 2-byte sequence into the given write.","sig":null,"attributes":[{"value":"/ Encodes and attempts to write an `u8` value as a 2-byte sequence into the given write.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":63277,"byte_end":63367,"line_start":33,"line_end":33,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":63368,"byte_end":63371,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ The first byte becomes the marker and the second one will represent the data itself.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":63372,"byte_end":63460,"line_start":35,"line_end":35,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":63461,"byte_end":63464,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ Note, that this function will encode the given value in 2-byte sequence no matter what, even if","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":63465,"byte_end":63564,"line_start":37,"line_end":37,"column_start":1,"column_end":100}},{"value":"/ the value can be represented using single byte as a positive fixnum.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":63565,"byte_end":63637,"line_start":38,"line_end":38,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":63638,"byte_end":63641,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ If you need to fit the given buffer efficiently use `write_uint` instead, which automatically","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":63642,"byte_end":63739,"line_start":40,"line_end":40,"column_start":1,"column_end":98}},{"value":"/ selects the appropriate integer representation.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":63740,"byte_end":63791,"line_start":41,"line_end":41,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":63792,"byte_end":63795,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":63796,"byte_end":63808,"line_start":43,"line_end":43,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":63809,"byte_end":63812,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueWriteError` on any I/O error occurred while writing either the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":63813,"byte_end":63911,"line_start":45,"line_end":45,"column_start":1,"column_end":99}},{"value":"/ marker or the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":63912,"byte_end":63935,"line_start":46,"line_end":46,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":63936,"byte_end":63939,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":63940,"byte_end":63954,"line_start":48,"line_end":48,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":63955,"byte_end":63962,"line_start":49,"line_end":49,"column_start":1,"column_end":8}},{"value":"/ let mut buf = [0x00, 0x00];","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":63963,"byte_end":63994,"line_start":50,"line_end":50,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":63995,"byte_end":63998,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ rmp::encode::write_u8(&mut &mut buf[..], 146).ok().unwrap();","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":63999,"byte_end":64063,"line_start":52,"line_end":52,"column_start":1,"column_end":65}},{"value":"/ assert_eq!([0xcc, 0x92], buf);","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":64064,"byte_end":64098,"line_start":53,"line_end":53,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":64099,"byte_end":64102,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ // Note, that 42 can be represented simply as `[0x2a]`, but the function emits 2-byte sequence.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":64103,"byte_end":64202,"line_start":55,"line_end":55,"column_start":1,"column_end":100}},{"value":"/ rmp::encode::write_u8(&mut &mut buf[..], 42).ok().unwrap();","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":64203,"byte_end":64266,"line_start":56,"line_end":56,"column_start":1,"column_end":64}},{"value":"/ assert_eq!([0xcc, 0x2a], buf);","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":64267,"byte_end":64301,"line_start":57,"line_end":57,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":64302,"byte_end":64309,"line_start":58,"line_end":58,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":315},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":65140,"byte_end":65149,"line_start":79,"line_end":79,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::encode::uint::write_u16","value":"pub fn write_u16<W: Write>(&mut W, u16) -> Result<(), ValueWriteError>","parent":null,"children":[],"decl_id":null,"docs":" Encodes and attempts to write an `u16` value strictly as a 3-byte sequence into the given write.","sig":null,"attributes":[{"value":"/ Encodes and attempts to write an `u16` value strictly as a 3-byte sequence into the given write.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":64468,"byte_end":64568,"line_start":65,"line_end":65,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":64569,"byte_end":64572,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ The first byte becomes the marker and the others will represent the data itself.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":64573,"byte_end":64657,"line_start":67,"line_end":67,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":64658,"byte_end":64661,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ Note, that this function will encode the given value in 3-byte sequence no matter what, even if","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":64662,"byte_end":64761,"line_start":69,"line_end":69,"column_start":1,"column_end":100}},{"value":"/ the value can be represented using single byte as a positive fixnum.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":64762,"byte_end":64834,"line_start":70,"line_end":70,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":64835,"byte_end":64838,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ If you need to fit the given buffer efficiently use `write_uint` instead, which automatically","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":64839,"byte_end":64936,"line_start":72,"line_end":72,"column_start":1,"column_end":98}},{"value":"/ selects the appropriate integer representation.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":64937,"byte_end":64988,"line_start":73,"line_end":73,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":64989,"byte_end":64992,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":64993,"byte_end":65005,"line_start":75,"line_end":75,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":65006,"byte_end":65009,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueWriteError` on any I/O error occurred while writing either the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":65010,"byte_end":65108,"line_start":77,"line_end":77,"column_start":1,"column_end":99}},{"value":"/ marker or the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":65109,"byte_end":65132,"line_start":78,"line_end":78,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":317},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":65967,"byte_end":65976,"line_start":99,"line_end":99,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::encode::uint::write_u32","value":"pub fn write_u32<W: Write>(&mut W, u32) -> Result<(), ValueWriteError>","parent":null,"children":[],"decl_id":null,"docs":" Encodes and attempts to write an `u32` value strictly as a 5-byte sequence into the given write.","sig":null,"attributes":[{"value":"/ Encodes and attempts to write an `u32` value strictly as a 5-byte sequence into the given write.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":65295,"byte_end":65395,"line_start":85,"line_end":85,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":65396,"byte_end":65399,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ The first byte becomes the marker and the others will represent the data itself.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":65400,"byte_end":65484,"line_start":87,"line_end":87,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":65485,"byte_end":65488,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ Note, that this function will encode the given value in 5-byte sequence no matter what, even if","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":65489,"byte_end":65588,"line_start":89,"line_end":89,"column_start":1,"column_end":100}},{"value":"/ the value can be represented using single byte as a positive fixnum.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":65589,"byte_end":65661,"line_start":90,"line_end":90,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":65662,"byte_end":65665,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ If you need to fit the given buffer efficiently use `write_uint` instead, which automatically","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":65666,"byte_end":65763,"line_start":92,"line_end":92,"column_start":1,"column_end":98}},{"value":"/ selects the appropriate integer representation.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":65764,"byte_end":65815,"line_start":93,"line_end":93,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":65816,"byte_end":65819,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":65820,"byte_end":65832,"line_start":95,"line_end":95,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":65833,"byte_end":65836,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueWriteError` on any I/O error occurred while writing either the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":65837,"byte_end":65935,"line_start":97,"line_end":97,"column_start":1,"column_end":99}},{"value":"/ marker or the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":65936,"byte_end":65959,"line_start":98,"line_end":98,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":319},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":66794,"byte_end":66803,"line_start":119,"line_end":119,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::encode::uint::write_u64","value":"pub fn write_u64<W: Write>(&mut W, u64) -> Result<(), ValueWriteError>","parent":null,"children":[],"decl_id":null,"docs":" Encodes and attempts to write an `u64` value strictly as a 9-byte sequence into the given write.","sig":null,"attributes":[{"value":"/ Encodes and attempts to write an `u64` value strictly as a 9-byte sequence into the given write.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":66122,"byte_end":66222,"line_start":105,"line_end":105,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":66223,"byte_end":66226,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ The first byte becomes the marker and the others will represent the data itself.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":66227,"byte_end":66311,"line_start":107,"line_end":107,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":66312,"byte_end":66315,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ Note, that this function will encode the given value in 9-byte sequence no matter what, even if","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":66316,"byte_end":66415,"line_start":109,"line_end":109,"column_start":1,"column_end":100}},{"value":"/ the value can be represented using single byte as a positive fixnum.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":66416,"byte_end":66488,"line_start":110,"line_end":110,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":66489,"byte_end":66492,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ If you need to fit the given buffer efficiently use `write_uint` instead, which automatically","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":66493,"byte_end":66590,"line_start":112,"line_end":112,"column_start":1,"column_end":98}},{"value":"/ selects the appropriate integer representation.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":66591,"byte_end":66642,"line_start":113,"line_end":113,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":66643,"byte_end":66646,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":66647,"byte_end":66659,"line_start":115,"line_end":115,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":66660,"byte_end":66663,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueWriteError` on any I/O error occurred while writing either the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":66664,"byte_end":66762,"line_start":117,"line_end":117,"column_start":1,"column_end":99}},{"value":"/ marker or the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":66763,"byte_end":66786,"line_start":118,"line_end":118,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":321},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":67536,"byte_end":67546,"line_start":138,"line_end":138,"column_start":8,"column_end":18},"name":"write_uint","qualname":"::encode::uint::write_uint","value":"pub fn write_uint<W: Write>(&mut W, u64) -> Result<Marker, ValueWriteError>","parent":null,"children":[],"decl_id":null,"docs":" Encodes and attempts to write an `u64` value into the given write using the most efficient\n representation, returning the marker used.","sig":null,"attributes":[{"value":"/ Encodes and attempts to write an `u64` value into the given write using the most efficient","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":66949,"byte_end":67043,"line_start":125,"line_end":125,"column_start":1,"column_end":95}},{"value":"/ representation, returning the marker used.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":67044,"byte_end":67090,"line_start":126,"line_end":126,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":67091,"byte_end":67094,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ This function obeys the MessagePack specification, which requires that the serializer SHOULD use","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":67095,"byte_end":67195,"line_start":128,"line_end":128,"column_start":1,"column_end":101}},{"value":"/ the format which represents the data in the smallest number of bytes.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":67196,"byte_end":67269,"line_start":129,"line_end":129,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":67270,"byte_end":67273,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ The first byte becomes the marker and the others (if present, up to 9) will represent the data","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":67274,"byte_end":67372,"line_start":131,"line_end":131,"column_start":1,"column_end":99}},{"value":"/ itself.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":67373,"byte_end":67384,"line_start":132,"line_end":132,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":67385,"byte_end":67388,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":67389,"byte_end":67401,"line_start":134,"line_end":134,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":67402,"byte_end":67405,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueWriteError` on any I/O error occurred while writing either the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":67406,"byte_end":67504,"line_start":136,"line_end":136,"column_start":1,"column_end":99}},{"value":"/ marker or the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/uint.rs","byte_start":67505,"byte_end":67528,"line_start":137,"line_end":137,"column_start":1,"column_end":24}}]},{"kind":"Type","id":{"krate":0,"index":357},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":42709,"byte_end":42714,"line_start":27,"line_end":27,"column_start":10,"column_end":15},"name":"Error","qualname":"::encode::Error","value":"::std::io::Error","parent":null,"children":[],"decl_id":null,"docs":" The error type for I/O operations of the `Write` and associated traits.\n","sig":null,"attributes":[{"value":"/ The error type for I/O operations of the `Write` and associated traits.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":42624,"byte_end":42699,"line_start":26,"line_end":26,"column_start":1,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":374},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":44107,"byte_end":44116,"line_start":83,"line_end":83,"column_start":8,"column_end":17},"name":"write_nil","qualname":"::encode::write_nil","value":"pub fn write_nil<W: Write>(&mut W) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Encodes and attempts to write a nil value into the given write.","sig":null,"attributes":[{"value":"/ Encodes and attempts to write a nil value into the given write.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":43656,"byte_end":43723,"line_start":66,"line_end":66,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":43724,"byte_end":43727,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ According to the MessagePack specification, a nil value is represented as a single `0xc0` byte.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":43728,"byte_end":43827,"line_start":68,"line_end":68,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":43828,"byte_end":43831,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":43832,"byte_end":43844,"line_start":70,"line_end":70,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":43845,"byte_end":43848,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ This function will return `Error` on any I/O error occurred while writing the nil marker.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":43849,"byte_end":43942,"line_start":72,"line_end":72,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":43943,"byte_end":43946,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":43947,"byte_end":43961,"line_start":74,"line_end":74,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":43962,"byte_end":43965,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":43966,"byte_end":43973,"line_start":76,"line_end":76,"column_start":1,"column_end":8}},{"value":"/ let mut buf = Vec::new();","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":43974,"byte_end":44003,"line_start":77,"line_end":77,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":44004,"byte_end":44007,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ rmp::encode::write_nil(&mut buf).unwrap();","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":44008,"byte_end":44054,"line_start":79,"line_end":79,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":44055,"byte_end":44058,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(vec![0xc0], buf);","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":44059,"byte_end":44091,"line_start":81,"line_end":81,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":44092,"byte_end":44099,"line_start":82,"line_end":82,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":376},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":44546,"byte_end":44556,"line_start":96,"line_end":96,"column_start":8,"column_end":18},"name":"write_bool","qualname":"::encode::write_bool","value":"pub fn write_bool<W: Write>(&mut W, bool) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Encodes and attempts to write a bool value into the given write.","sig":null,"attributes":[{"value":"/ Encodes and attempts to write a bool value into the given write.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":44220,"byte_end":44288,"line_start":87,"line_end":87,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":44289,"byte_end":44292,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ According to the MessagePack specification, an encoded boolean value is represented as a single","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":44293,"byte_end":44392,"line_start":89,"line_end":89,"column_start":1,"column_end":100}},{"value":"/ byte.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":44393,"byte_end":44402,"line_start":90,"line_end":90,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":44403,"byte_end":44406,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":44407,"byte_end":44419,"line_start":92,"line_end":92,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":44420,"byte_end":44423,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ Each call to this function may generate an I/O error indicating that the operation could not be","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":44424,"byte_end":44523,"line_start":94,"line_end":94,"column_start":1,"column_end":100}},{"value":"/ completed.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":44524,"byte_end":44538,"line_start":95,"line_end":95,"column_start":1,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":489},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":46422,"byte_end":46440,"line_start":150,"line_end":150,"column_start":5,"column_end":23},"name":"InvalidMarkerWrite","qualname":"::encode::ValueWriteError::InvalidMarkerWrite","value":"ValueWriteError::InvalidMarkerWrite(Error)","parent":{"krate":0,"index":488},"children":[],"decl_id":null,"docs":" I/O error while writing marker.\n","sig":null,"attributes":[{"value":"/ I/O error while writing marker.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":46382,"byte_end":46417,"line_start":149,"line_end":149,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":492},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":46491,"byte_end":46507,"line_start":152,"line_end":152,"column_start":5,"column_end":21},"name":"InvalidDataWrite","qualname":"::encode::ValueWriteError::InvalidDataWrite","value":"ValueWriteError::InvalidDataWrite(Error)","parent":{"krate":0,"index":488},"children":[],"decl_id":null,"docs":" I/O error while writing data.\n","sig":null,"attributes":[{"value":"/ I/O error while writing data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":46453,"byte_end":46486,"line_start":151,"line_end":151,"column_start":5,"column_end":38}}]},{"kind":"Enum","id":{"krate":0,"index":488},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":46360,"byte_end":46375,"line_start":148,"line_end":148,"column_start":10,"column_end":25},"name":"ValueWriteError","qualname":"::encode::ValueWriteError","value":"pub enum ValueWriteError {\n\n    /// I/O error while writing marker.\n    InvalidMarkerWrite(Error),\n\n    /// I/O error while writing data.\n    InvalidDataWrite(Error),\n}","parent":null,"children":[{"krate":0,"index":489},{"krate":0,"index":492}],"decl_id":null,"docs":" An error that can occur when attempting to write multi-byte MessagePack value.\n","sig":null,"attributes":[{"value":"/ An error that can occur when attempting to write multi-byte MessagePack value.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":46251,"byte_end":46333,"line_start":146,"line_end":146,"column_start":1,"column_end":83}}]},{"kind":"Function","id":{"krate":0,"index":408},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":47937,"byte_end":47952,"line_start":202,"line_end":202,"column_start":8,"column_end":23},"name":"write_array_len","qualname":"::encode::write_array_len","value":"pub fn write_array_len<W: Write>(&mut W, u32)\n-> Result<Marker, ValueWriteError>","parent":null,"children":[],"decl_id":null,"docs":" Encodes and attempts to write the most efficient array length implementation to the given write,\n returning the marker used.","sig":null,"attributes":[{"value":"/ Encodes and attempts to write the most efficient array length implementation to the given write,","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":47654,"byte_end":47754,"line_start":195,"line_end":195,"column_start":1,"column_end":101}},{"value":"/ returning the marker used.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":47755,"byte_end":47785,"line_start":196,"line_end":196,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":47786,"byte_end":47789,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":47790,"byte_end":47802,"line_start":198,"line_end":198,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":47803,"byte_end":47806,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueWriteError` on any I/O error occurred while writing either the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":47807,"byte_end":47905,"line_start":200,"line_end":200,"column_start":1,"column_end":99}},{"value":"/ marker or the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":47906,"byte_end":47929,"line_start":201,"line_end":201,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":410},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":48704,"byte_end":48717,"line_start":226,"line_end":226,"column_start":8,"column_end":21},"name":"write_map_len","qualname":"::encode::write_map_len","value":"pub fn write_map_len<W: Write>(&mut W, u32) -> Result<Marker, ValueWriteError>","parent":null,"children":[],"decl_id":null,"docs":" Encodes and attempts to write the most efficient map length implementation to the given write,\n returning the marker used.","sig":null,"attributes":[{"value":"/ Encodes and attempts to write the most efficient map length implementation to the given write,","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":48423,"byte_end":48521,"line_start":219,"line_end":219,"column_start":1,"column_end":99}},{"value":"/ returning the marker used.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":48522,"byte_end":48552,"line_start":220,"line_end":220,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":48553,"byte_end":48556,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":48557,"byte_end":48569,"line_start":222,"line_end":222,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":48570,"byte_end":48573,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueWriteError` on any I/O error occurred while writing either the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":48574,"byte_end":48672,"line_start":224,"line_end":224,"column_start":1,"column_end":99}},{"value":"/ marker or the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":48673,"byte_end":48696,"line_start":225,"line_end":225,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":412},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":49607,"byte_end":49621,"line_start":255,"line_end":255,"column_start":8,"column_end":22},"name":"write_ext_meta","qualname":"::encode::write_ext_meta","value":"pub fn write_ext_meta<W: Write>(&mut W, u32, i8)\n-> Result<Marker, ValueWriteError>","parent":null,"children":[],"decl_id":null,"docs":" Encodes and attempts to write the most efficient ext metadata implementation to the given\n write, returning the marker used.","sig":null,"attributes":[{"value":"/ Encodes and attempts to write the most efficient ext metadata implementation to the given","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":49176,"byte_end":49269,"line_start":243,"line_end":243,"column_start":1,"column_end":94}},{"value":"/ write, returning the marker used.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":49270,"byte_end":49307,"line_start":244,"line_end":244,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":49308,"byte_end":49311,"line_start":245,"line_end":245,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":49312,"byte_end":49324,"line_start":246,"line_end":246,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":49325,"byte_end":49328,"line_start":247,"line_end":247,"column_start":1,"column_end":4}},{"value":"/ This function will return `ValueWriteError` on any I/O error occurred while writing either the","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":49329,"byte_end":49427,"line_start":248,"line_end":248,"column_start":1,"column_end":99}},{"value":"/ marker or the data.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":49428,"byte_end":49451,"line_start":249,"line_end":249,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":49452,"byte_end":49455,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":49456,"byte_end":49468,"line_start":251,"line_end":251,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":49469,"byte_end":49472,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ Panics if `ty` is negative, because it is reserved for future MessagePack extension including","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":49473,"byte_end":49570,"line_start":253,"line_end":253,"column_start":1,"column_end":98}},{"value":"/ 2-byte type information.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":49571,"byte_end":49599,"line_start":254,"line_end":254,"column_start":1,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":498},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68278,"byte_end":68284,"line_start":8,"line_end":8,"column_start":5,"column_end":11},"name":"FixPos","qualname":"::marker::Marker::FixPos","value":"Marker::FixPos(u8)","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":501},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68294,"byte_end":68300,"line_start":9,"line_end":9,"column_start":5,"column_end":11},"name":"FixNeg","qualname":"::marker::Marker::FixNeg","value":"Marker::FixNeg(i8)","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":504},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68310,"byte_end":68314,"line_start":10,"line_end":10,"column_start":5,"column_end":9},"name":"Null","qualname":"::marker::Marker::Null","value":"Marker::Null","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":506},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68320,"byte_end":68324,"line_start":11,"line_end":11,"column_start":5,"column_end":9},"name":"True","qualname":"::marker::Marker::True","value":"Marker::True","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":508},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68330,"byte_end":68335,"line_start":12,"line_end":12,"column_start":5,"column_end":10},"name":"False","qualname":"::marker::Marker::False","value":"Marker::False","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":510},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68341,"byte_end":68343,"line_start":13,"line_end":13,"column_start":5,"column_end":7},"name":"U8","qualname":"::marker::Marker::U8","value":"Marker::U8","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":512},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68349,"byte_end":68352,"line_start":14,"line_end":14,"column_start":5,"column_end":8},"name":"U16","qualname":"::marker::Marker::U16","value":"Marker::U16","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":514},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68358,"byte_end":68361,"line_start":15,"line_end":15,"column_start":5,"column_end":8},"name":"U32","qualname":"::marker::Marker::U32","value":"Marker::U32","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":516},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68367,"byte_end":68370,"line_start":16,"line_end":16,"column_start":5,"column_end":8},"name":"U64","qualname":"::marker::Marker::U64","value":"Marker::U64","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":518},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68376,"byte_end":68378,"line_start":17,"line_end":17,"column_start":5,"column_end":7},"name":"I8","qualname":"::marker::Marker::I8","value":"Marker::I8","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":520},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68384,"byte_end":68387,"line_start":18,"line_end":18,"column_start":5,"column_end":8},"name":"I16","qualname":"::marker::Marker::I16","value":"Marker::I16","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":522},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68393,"byte_end":68396,"line_start":19,"line_end":19,"column_start":5,"column_end":8},"name":"I32","qualname":"::marker::Marker::I32","value":"Marker::I32","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":524},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68402,"byte_end":68405,"line_start":20,"line_end":20,"column_start":5,"column_end":8},"name":"I64","qualname":"::marker::Marker::I64","value":"Marker::I64","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":526},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68411,"byte_end":68414,"line_start":21,"line_end":21,"column_start":5,"column_end":8},"name":"F32","qualname":"::marker::Marker::F32","value":"Marker::F32","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":528},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68420,"byte_end":68423,"line_start":22,"line_end":22,"column_start":5,"column_end":8},"name":"F64","qualname":"::marker::Marker::F64","value":"Marker::F64","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":530},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68429,"byte_end":68435,"line_start":23,"line_end":23,"column_start":5,"column_end":11},"name":"FixStr","qualname":"::marker::Marker::FixStr","value":"Marker::FixStr(u8)","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":533},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68445,"byte_end":68449,"line_start":24,"line_end":24,"column_start":5,"column_end":9},"name":"Str8","qualname":"::marker::Marker::Str8","value":"Marker::Str8","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":535},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68455,"byte_end":68460,"line_start":25,"line_end":25,"column_start":5,"column_end":10},"name":"Str16","qualname":"::marker::Marker::Str16","value":"Marker::Str16","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":537},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68466,"byte_end":68471,"line_start":26,"line_end":26,"column_start":5,"column_end":10},"name":"Str32","qualname":"::marker::Marker::Str32","value":"Marker::Str32","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":539},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68477,"byte_end":68481,"line_start":27,"line_end":27,"column_start":5,"column_end":9},"name":"Bin8","qualname":"::marker::Marker::Bin8","value":"Marker::Bin8","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":541},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68487,"byte_end":68492,"line_start":28,"line_end":28,"column_start":5,"column_end":10},"name":"Bin16","qualname":"::marker::Marker::Bin16","value":"Marker::Bin16","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":543},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68498,"byte_end":68503,"line_start":29,"line_end":29,"column_start":5,"column_end":10},"name":"Bin32","qualname":"::marker::Marker::Bin32","value":"Marker::Bin32","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":545},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68509,"byte_end":68517,"line_start":30,"line_end":30,"column_start":5,"column_end":13},"name":"FixArray","qualname":"::marker::Marker::FixArray","value":"Marker::FixArray(u8)","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":548},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68527,"byte_end":68534,"line_start":31,"line_end":31,"column_start":5,"column_end":12},"name":"Array16","qualname":"::marker::Marker::Array16","value":"Marker::Array16","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":550},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68540,"byte_end":68547,"line_start":32,"line_end":32,"column_start":5,"column_end":12},"name":"Array32","qualname":"::marker::Marker::Array32","value":"Marker::Array32","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":552},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68553,"byte_end":68559,"line_start":33,"line_end":33,"column_start":5,"column_end":11},"name":"FixMap","qualname":"::marker::Marker::FixMap","value":"Marker::FixMap(u8)","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":555},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68569,"byte_end":68574,"line_start":34,"line_end":34,"column_start":5,"column_end":10},"name":"Map16","qualname":"::marker::Marker::Map16","value":"Marker::Map16","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":557},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68580,"byte_end":68585,"line_start":35,"line_end":35,"column_start":5,"column_end":10},"name":"Map32","qualname":"::marker::Marker::Map32","value":"Marker::Map32","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":559},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68591,"byte_end":68598,"line_start":36,"line_end":36,"column_start":5,"column_end":12},"name":"FixExt1","qualname":"::marker::Marker::FixExt1","value":"Marker::FixExt1","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":561},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68604,"byte_end":68611,"line_start":37,"line_end":37,"column_start":5,"column_end":12},"name":"FixExt2","qualname":"::marker::Marker::FixExt2","value":"Marker::FixExt2","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":563},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68617,"byte_end":68624,"line_start":38,"line_end":38,"column_start":5,"column_end":12},"name":"FixExt4","qualname":"::marker::Marker::FixExt4","value":"Marker::FixExt4","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":565},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68630,"byte_end":68637,"line_start":39,"line_end":39,"column_start":5,"column_end":12},"name":"FixExt8","qualname":"::marker::Marker::FixExt8","value":"Marker::FixExt8","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":567},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68643,"byte_end":68651,"line_start":40,"line_end":40,"column_start":5,"column_end":13},"name":"FixExt16","qualname":"::marker::Marker::FixExt16","value":"Marker::FixExt16","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":569},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68657,"byte_end":68661,"line_start":41,"line_end":41,"column_start":5,"column_end":9},"name":"Ext8","qualname":"::marker::Marker::Ext8","value":"Marker::Ext8","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":571},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68667,"byte_end":68672,"line_start":42,"line_end":42,"column_start":5,"column_end":10},"name":"Ext16","qualname":"::marker::Marker::Ext16","value":"Marker::Ext16","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":573},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68678,"byte_end":68683,"line_start":43,"line_end":43,"column_start":5,"column_end":10},"name":"Ext32","qualname":"::marker::Marker::Ext32","value":"Marker::Ext32","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":575},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68689,"byte_end":68697,"line_start":44,"line_end":44,"column_start":5,"column_end":13},"name":"Reserved","qualname":"::marker::Marker::Reserved","value":"Marker::Reserved","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":497},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68265,"byte_end":68271,"line_start":7,"line_end":7,"column_start":10,"column_end":16},"name":"Marker","qualname":"::marker::Marker","value":"pub enum Marker {\n    FixPos(u8),\n    FixNeg(i8),\n    Null,\n    True,\n    False,\n    U8,\n    U16,\n    U32,\n    U64,\n    I8,\n    I16,\n    I32,\n    I64,\n    F32,\n    F64,\n    FixStr(u8),\n    Str8,\n    Str16,\n    Str32,\n    Bin8,\n    Bin16,\n    Bin32,\n    FixArray(u8),\n    Array16,\n    Array32,\n    FixMap(u8),\n    Map16,\n    Map32,\n    FixExt1,\n    FixExt2,\n    FixExt4,\n    FixExt8,\n    FixExt16,\n    Ext8,\n    Ext16,\n    Ext32,\n    Reserved,\n}","parent":null,"children":[{"krate":0,"index":498},{"krate":0,"index":501},{"krate":0,"index":504},{"krate":0,"index":506},{"krate":0,"index":508},{"krate":0,"index":510},{"krate":0,"index":512},{"krate":0,"index":514},{"krate":0,"index":516},{"krate":0,"index":518},{"krate":0,"index":520},{"krate":0,"index":522},{"krate":0,"index":524},{"krate":0,"index":526},{"krate":0,"index":528},{"krate":0,"index":530},{"krate":0,"index":533},{"krate":0,"index":535},{"krate":0,"index":537},{"krate":0,"index":539},{"krate":0,"index":541},{"krate":0,"index":543},{"krate":0,"index":545},{"krate":0,"index":548},{"krate":0,"index":550},{"krate":0,"index":552},{"krate":0,"index":555},{"krate":0,"index":557},{"krate":0,"index":559},{"krate":0,"index":561},{"krate":0,"index":563},{"krate":0,"index":565},{"krate":0,"index":567},{"krate":0,"index":569},{"krate":0,"index":571},{"krate":0,"index":573},{"krate":0,"index":575}],"decl_id":null,"docs":" Format markers.\n","sig":null,"attributes":[{"value":"/ Format markers.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68195,"byte_end":68214,"line_start":5,"line_end":5,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68782,"byte_end":68789,"line_start":49,"line_end":49,"column_start":12,"column_end":19},"name":"from_u8","qualname":"<Marker>::from_u8","value":"pub fn from_u8(u8) -> Marker","parent":null,"children":[],"decl_id":null,"docs":" Construct a msgpack marker from a single byte.\n","sig":null,"attributes":[{"value":"/ Construct a msgpack marker from a single byte.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68720,"byte_end":68770,"line_start":48,"line_end":48,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":70416,"byte_end":70421,"line_start":94,"line_end":94,"column_start":12,"column_end":17},"name":"to_u8","qualname":"<Marker>::to_u8","value":"pub fn to_u8(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Converts a marker object into a single-byte representation.\n","sig":null,"attributes":[{"value":"/ Converts a marker object into a single-byte representation.","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":70341,"byte_end":70404,"line_start":93,"line_end":93,"column_start":5,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":426},"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":5833,"byte_end":5848,"line_start":158,"line_end":158,"column_start":11,"column_end":26},"name":"MSGPACK_VERSION","qualname":"::MSGPACK_VERSION","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Version of the MessagePack [spec](http://github.com/msgpack/msgpack/blob/master/spec.md).\n","sig":null,"attributes":[{"value":"/ Version of the MessagePack [spec](http://github.com/msgpack/msgpack/blob/master/spec.md).","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":5729,"byte_end":5822,"line_start":157,"line_end":157,"column_start":1,"column_end":94}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":31761,"byte_end":31778,"line_start":19,"line_end":19,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":32223,"byte_end":32240,"line_start":31,"line_end":31,"column_start":22,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":32410,"byte_end":32427,"line_start":37,"line_end":37,"column_start":35,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":7783,"byte_end":7797,"line_start":52,"line_end":52,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":8100,"byte_end":8114,"line_start":62,"line_end":62,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":8580,"byte_end":8594,"line_start":74,"line_end":74,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":8787,"byte_end":8802,"line_start":82,"line_end":82,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":11308,"byte_end":11325,"line_start":154,"line_end":154,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":11681,"byte_end":11698,"line_start":165,"line_end":165,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":12269,"byte_end":12286,"line_start":178,"line_end":178,"column_start":32,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":12494,"byte_end":12511,"line_start":186,"line_end":186,"column_start":31,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":42865,"byte_end":42881,"line_start":32,"line_end":32,"column_start":22,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":43001,"byte_end":43006,"line_start":38,"line_end":38,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":43453,"byte_end":43467,"line_start":54,"line_end":54,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":43581,"byte_end":43586,"line_start":60,"line_end":60,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":373}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":46551,"byte_end":46566,"line_start":155,"line_end":155,"column_start":33,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":399}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":46773,"byte_end":46788,"line_start":163,"line_end":163,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":46990,"byte_end":46995,"line_start":171,"line_end":171,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":47218,"byte_end":47233,"line_start":180,"line_end":180,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":405}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":47486,"byte_end":47501,"line_start":189,"line_end":189,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":407}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68707,"byte_end":68713,"line_start":47,"line_end":47,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":419},{"krate":0,"index":420}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":72170,"byte_end":72176,"line_start":148,"line_end":148,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":72268,"byte_end":72274,"line_start":154,"line_end":154,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":424}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":5660,"byte_end":5666,"line_start":151,"line_end":151,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":3}},{"kind":"Mod","span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/lib.rs","byte_start":5676,"byte_end":5682,"line_start":152,"line_end":152,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":228}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":31761,"byte_end":31778,"line_start":19,"line_end":19,"column_start":27,"column_end":44},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":436},"to":{"krate":1,"index":1740}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":32223,"byte_end":32240,"line_start":31,"line_end":31,"column_start":22,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":436},"to":{"krate":2,"index":6843}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/str.rs","byte_start":32410,"byte_end":32427,"line_start":37,"line_end":37,"column_start":35,"column_end":52},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":436},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":7783,"byte_end":7797,"line_start":52,"line_end":52,"column_start":23,"column_end":37},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":462},"to":{"krate":1,"index":1740}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":8100,"byte_end":8114,"line_start":62,"line_end":62,"column_start":18,"column_end":32},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":462},"to":{"krate":2,"index":6843}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":8580,"byte_end":8594,"line_start":74,"line_end":74,"column_start":32,"column_end":46},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":462},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":8787,"byte_end":8802,"line_start":82,"line_end":82,"column_start":22,"column_end":37},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":457},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":11308,"byte_end":11325,"line_start":154,"line_end":154,"column_start":23,"column_end":40},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":474},"to":{"krate":1,"index":1740}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":11681,"byte_end":11698,"line_start":165,"line_end":165,"column_start":18,"column_end":35},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":474},"to":{"krate":2,"index":6843}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":12269,"byte_end":12286,"line_start":178,"line_end":178,"column_start":32,"column_end":49},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":474},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/decode/mod.rs","byte_start":12494,"byte_end":12511,"line_start":186,"line_end":186,"column_start":31,"column_end":48},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":474},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":42865,"byte_end":42881,"line_start":32,"line_end":32,"column_start":22,"column_end":38},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":358},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":43001,"byte_end":43006,"line_start":38,"line_end":38,"column_start":33,"column_end":38},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":357},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":43453,"byte_end":43467,"line_start":54,"line_end":54,"column_start":22,"column_end":36},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":367},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":43581,"byte_end":43586,"line_start":60,"line_end":60,"column_start":31,"column_end":36},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":357},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":46551,"byte_end":46566,"line_start":155,"line_end":155,"column_start":33,"column_end":48},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":488},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":46773,"byte_end":46788,"line_start":163,"line_end":163,"column_start":31,"column_end":46},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":488},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":46990,"byte_end":46995,"line_start":171,"line_end":171,"column_start":32,"column_end":37},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":357},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":47218,"byte_end":47233,"line_start":180,"line_end":180,"column_start":23,"column_end":38},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":488},"to":{"krate":1,"index":1740}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/encode/mod.rs","byte_start":47486,"byte_end":47501,"line_start":189,"line_end":189,"column_start":18,"column_end":33},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":488},"to":{"krate":2,"index":6843}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":68707,"byte_end":68713,"line_start":47,"line_end":47,"column_start":6,"column_end":12},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":497},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":72170,"byte_end":72176,"line_start":148,"line_end":148,"column_start":19,"column_end":25},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":497},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/suru/.cargo/registry/src/github.com-1ecc6299db9ec823/rmp-0.8.9/src/marker.rs","byte_start":72268,"byte_end":72274,"line_start":154,"line_end":154,"column_start":19,"column_end":25},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":497},"to":{"krate":2,"index":1986}}]}